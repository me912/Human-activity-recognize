
rtosexample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aef4  0800ee20  0800ee20  0001ee20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019d14  08019d14  00030e48  2**0
                  CONTENTS
  4 .ARM          00000008  08019d14  08019d14  00029d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019d1c  08019d1c  00030e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019d1c  08019d1c  00029d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019d20  08019d20  00029d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e48  20000000  08019d24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008590  20000e48  0801ab6c  00030e48  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200093d8  0801ab6c  000393d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030e48  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002158f  00000000  00000000  00030e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004018  00000000  00000000  00052407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00056420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  000577c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a491  00000000  00000000  00058a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181a7  00000000  00000000  00072ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eee4  00000000  00000000  0008b068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  00129f4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d0  00000000  00000000  0012a01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001305ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001306b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000e48 	.word	0x20000e48
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee04 	.word	0x0800ee04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000e4c 	.word	0x20000e4c
 80001dc:	0800ee04 	.word	0x0800ee04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <SimpleKalmanInit>:
 *  Created on: 11 thg 10, 2021
 *      Author: LENOVO-PC
 */
#include "kalman.h"
struct SimpleKalman SimpleKalmanInit(float mea_e, float est_e, float q)
{
 8000f50:	b4b0      	push	{r4, r5, r7}
 8000f52:	b08b      	sub	sp, #44	; 0x2c
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f5c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f60:	ed87 1a00 	vstr	s2, [r7]
  struct SimpleKalman myFilter;
  myFilter._err_measure=mea_e;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	613b      	str	r3, [r7, #16]
  myFilter._err_estimate=est_e;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	617b      	str	r3, [r7, #20]
  myFilter._q = q;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	61bb      	str	r3, [r7, #24]
  return myFilter;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	461d      	mov	r5, r3
 8000f74:	f107 0410 	add.w	r4, r7, #16
 8000f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f80:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	372c      	adds	r7, #44	; 0x2c
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bcb0      	pop	{r4, r5, r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <updateEstimate>:
	}
	return myFilter;
}

float updateEstimate(struct SimpleKalman* myFilter, float mea)
{
 8000f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	ed87 0a00 	vstr	s0, [r7]

  myFilter->_kalman_gain = myFilter->_err_estimate/(myFilter->_err_estimate + myFilter->_err_measure);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edc3 7a05 	vstr	s15, [r3, #20]
  myFilter->_current_estimate = myFilter->_last_estimate + myFilter->_kalman_gain * (mea - myFilter->_last_estimate);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fd0:	ed97 6a00 	vldr	s12, [r7]
 8000fd4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	edc3 7a03 	vstr	s15, [r3, #12]
  myFilter->_err_estimate =  (1.0 - myFilter->_kalman_gain)*myFilter->_err_estimate + fabs(myFilter->_last_estimate-myFilter->_current_estimate)*myFilter->_q;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fab4 	bl	8000558 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4926      	ldr	r1, [pc, #152]	; (8001094 <updateEstimate+0x104>)
 8000ffa:	f7ff f94d 	bl	8000298 <__aeabi_dsub>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4614      	mov	r4, r2
 8001004:	461d      	mov	r5, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff faa4 	bl	8000558 <__aeabi_f2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff faf6 	bl	8000608 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4690      	mov	r8, r2
 8001022:	4699      	mov	r9, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	ed93 7a04 	vldr	s14, [r3, #16]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	eef0 7ae7 	vabs.f32	s15, s15
 8001038:	ee17 0a90 	vmov	r0, s15
 800103c:	f7ff fa8c 	bl	8000558 <__aeabi_f2d>
 8001040:	4604      	mov	r4, r0
 8001042:	460d      	mov	r5, r1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa85 	bl	8000558 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4620      	mov	r0, r4
 8001054:	4629      	mov	r1, r5
 8001056:	f7ff fad7 	bl	8000608 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4640      	mov	r0, r8
 8001060:	4649      	mov	r1, r9
 8001062:	f7ff f91b 	bl	800029c <__adddf3>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fda3 	bl	8000bb8 <__aeabi_d2f>
 8001072:	4602      	mov	r2, r0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
  myFilter->_last_estimate=myFilter->_current_estimate;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	611a      	str	r2, [r3, #16]

  return myFilter->_current_estimate;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	ee07 3a90 	vmov	s15, r3
}
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001094:	3ff00000 	.word	0x3ff00000

08001098 <main>:
// Initialize wrapper structs that hold pointers to data and info about the
// data (tensor height, width, channels)
ai_buffer ai_input[AI_HAR_IN_NUM] = AI_HAR_IN;
ai_buffer ai_output[AI_HAR_OUT_NUM] = AI_HAR_OUT;

int main(void) {
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	f5ad 5d54 	sub.w	sp, sp, #13568	; 0x3500
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
	ai_error ai_err;
	ai_i32 nbatch;
	uint32_t timestamp;
	//Har_InputTypeDef *mpudata = (Har_InputTypeDef*) malloc(sizeof(Har_InputTypeDef)); //newest input sensor
	float *y_val = (float*) malloc(6 * sizeof(float));
 80010a2:	2018      	movs	r0, #24
 80010a4:	f00a fce6 	bl	800ba74 <malloc>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f507 5254 	add.w	r2, r7, #13568	; 0x3500
 80010ae:	f102 0218 	add.w	r2, r2, #24
 80010b2:	6013      	str	r3, [r2, #0]

	AI_ALIGNED(4) ai_u8 activations[AI_HAR_DATA_ACTIVATIONS_SIZE];

	//Har_InputTypeDef *in_data = (Har_InputTypeDef *)malloc(128*sizeof(Har_InputTypeDef)); //input tensor

	ai_network_params ai_params = { .params =
 80010b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010b8:	3b3c      	subs	r3, #60	; 0x3c
 80010ba:	4aa7      	ldr	r2, [pc, #668]	; (8001358 <main+0x2c0>)
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010c2:	3b3c      	subs	r3, #60	; 0x3c
 80010c4:	2201      	movs	r2, #1
 80010c6:	809a      	strh	r2, [r3, #4]
 80010c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010cc:	3b3c      	subs	r3, #60	; 0x3c
 80010ce:	2201      	movs	r2, #1
 80010d0:	80da      	strh	r2, [r3, #6]
 80010d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010d6:	3b3c      	subs	r3, #60	; 0x3c
 80010d8:	2201      	movs	r2, #1
 80010da:	811a      	strh	r2, [r3, #8]
 80010dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010e0:	3b3c      	subs	r3, #60	; 0x3c
 80010e2:	f24a 0290 	movw	r2, #41104	; 0xa090
 80010e6:	60da      	str	r2, [r3, #12]
	AI_HAR_DATA_WEIGHTS(ai_har_data_weights_get()), .activations =
 80010e8:	f008 f994 	bl	8009414 <ai_har_data_weights_get>
 80010ec:	4602      	mov	r2, r0
	ai_network_params ai_params = { .params =
 80010ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f2:	3b3c      	subs	r3, #60	; 0x3c
 80010f4:	611a      	str	r2, [r3, #16]
 80010f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010fa:	3b3c      	subs	r3, #60	; 0x3c
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001104:	3b3c      	subs	r3, #60	; 0x3c
 8001106:	4a95      	ldr	r2, [pc, #596]	; (800135c <main+0x2c4>)
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800110e:	3b3c      	subs	r3, #60	; 0x3c
 8001110:	2201      	movs	r2, #1
 8001112:	839a      	strh	r2, [r3, #28]
 8001114:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001118:	3b3c      	subs	r3, #60	; 0x3c
 800111a:	2201      	movs	r2, #1
 800111c:	83da      	strh	r2, [r3, #30]
 800111e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001122:	3b3c      	subs	r3, #60	; 0x3c
 8001124:	2201      	movs	r2, #1
 8001126:	841a      	strh	r2, [r3, #32]
 8001128:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800112c:	3b3c      	subs	r3, #60	; 0x3c
 800112e:	f243 42bc 	movw	r2, #13500	; 0x34bc
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
 8001134:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001138:	3b3c      	subs	r3, #60	; 0x3c
 800113a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800113e:	3a0c      	subs	r2, #12
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
 8001142:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001146:	3b3c      	subs	r3, #60	; 0x3c
 8001148:	2200      	movs	r2, #0
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
	AI_HAR_DATA_ACTIVATIONS(activations) };

	ai_input[0].n_batches = 1;
 800114c:	4b84      	ldr	r3, [pc, #528]	; (8001360 <main+0x2c8>)
 800114e:	2201      	movs	r2, #1
 8001150:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001152:	4b83      	ldr	r3, [pc, #524]	; (8001360 <main+0x2c8>)
 8001154:	4a83      	ldr	r2, [pc, #524]	; (8001364 <main+0x2cc>)
 8001156:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8001158:	4b83      	ldr	r3, [pc, #524]	; (8001368 <main+0x2d0>)
 800115a:	2201      	movs	r2, #1
 800115c:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800115e:	4b82      	ldr	r3, [pc, #520]	; (8001368 <main+0x2d0>)
 8001160:	4a82      	ldr	r2, [pc, #520]	; (800136c <main+0x2d4>)
 8001162:	611a      	str	r2, [r3, #16]
	HAL_Init();
 8001164:	f001 fca0 	bl	8002aa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001168:	f000 f930 	bl	80013cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800116c:	f000 fa02 	bl	8001574 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001170:	f000 f9d6 	bl	8001520 <MX_USART2_UART_Init>
	MX_CRC_Init();
 8001174:	f000 f992 	bl	800149c <MX_CRC_Init>
	MX_I2C1_Init();
 8001178:	f000 f9a4 	bl	80014c4 <MX_I2C1_Init>

	ai_err = ai_har_create(&har_model, AI_HAR_DATA_CONFIG);
 800117c:	2100      	movs	r1, #0
 800117e:	487c      	ldr	r0, [pc, #496]	; (8001370 <main+0x2d8>)
 8001180:	f008 f8e6 	bl	8009350 <ai_har_create>
 8001184:	4603      	mov	r3, r0
 8001186:	f507 5254 	add.w	r2, r7, #13568	; 0x3500
 800118a:	f102 0210 	add.w	r2, r2, #16
 800118e:	6013      	str	r3, [r2, #0]
	if (ai_err.type != AI_ERROR_NONE) {
 8001190:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 8001194:	f103 0310 	add.w	r3, r3, #16
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00f      	beq.n	80011be <main+0x126>
		buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800119e:	4975      	ldr	r1, [pc, #468]	; (8001374 <main+0x2dc>)
 80011a0:	4875      	ldr	r0, [pc, #468]	; (8001378 <main+0x2e0>)
 80011a2:	f00b f9cb 	bl	800c53c <siprintf>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a74      	ldr	r2, [pc, #464]	; (800137c <main+0x2e4>)
 80011aa:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 80011ac:	4b73      	ldr	r3, [pc, #460]	; (800137c <main+0x2e4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	4970      	ldr	r1, [pc, #448]	; (8001378 <main+0x2e0>)
 80011b6:	4872      	ldr	r0, [pc, #456]	; (8001380 <main+0x2e8>)
 80011b8:	f003 ff2b 	bl	8005012 <HAL_UART_Transmit>
		while (1)
 80011bc:	e7fe      	b.n	80011bc <main+0x124>
			;
	}
	if (!ai_har_init(har_model, &ai_params)) {
 80011be:	4b6c      	ldr	r3, [pc, #432]	; (8001370 <main+0x2d8>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011c6:	3b3c      	subs	r3, #60	; 0x3c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f008 f8d6 	bl	800937c <ai_har_init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f083 0301 	eor.w	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00f      	beq.n	80011fc <main+0x164>
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80011dc:	4969      	ldr	r1, [pc, #420]	; (8001384 <main+0x2ec>)
 80011de:	4866      	ldr	r0, [pc, #408]	; (8001378 <main+0x2e0>)
 80011e0:	f00b f9ac 	bl	800c53c <siprintf>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a65      	ldr	r2, [pc, #404]	; (800137c <main+0x2e4>)
 80011e8:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 80011ea:	4b64      	ldr	r3, [pc, #400]	; (800137c <main+0x2e4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	4961      	ldr	r1, [pc, #388]	; (8001378 <main+0x2e0>)
 80011f4:	4862      	ldr	r0, [pc, #392]	; (8001380 <main+0x2e8>)
 80011f6:	f003 ff0c 	bl	8005012 <HAL_UART_Transmit>
		while (1)
 80011fa:	e7fe      	b.n	80011fa <main+0x162>
			;
	}

	buf_len = sprintf(buf, "Create success\r\n");
 80011fc:	4962      	ldr	r1, [pc, #392]	; (8001388 <main+0x2f0>)
 80011fe:	485e      	ldr	r0, [pc, #376]	; (8001378 <main+0x2e0>)
 8001200:	f00b f99c 	bl	800c53c <siprintf>
 8001204:	4603      	mov	r3, r0
 8001206:	4a5d      	ldr	r2, [pc, #372]	; (800137c <main+0x2e4>)
 8001208:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 800120a:	4b5c      	ldr	r3, [pc, #368]	; (800137c <main+0x2e4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	b29a      	uxth	r2, r3
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	4959      	ldr	r1, [pc, #356]	; (8001378 <main+0x2e0>)
 8001214:	485a      	ldr	r0, [pc, #360]	; (8001380 <main+0x2e8>)
 8001216:	f003 fefc 	bl	8005012 <HAL_UART_Transmit>
//	MAX30100_SetLEDPulseWidth(MAX30100_LEDPW_DEFAULT);
//	MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_DEFAULT,
//			MAX30100_LEDCURRENT_DEFAULT);
//	MAX30100_SetMode(MAX30100_SPO2_MODE);

	while (!SSD1306_Init()) {
 800121a:	e003      	b.n	8001224 <main+0x18c>
		HAL_Delay(1000);
 800121c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001220:	f001 fcb4 	bl	8002b8c <HAL_Delay>
	while (!SSD1306_Init()) {
 8001224:	f001 f81a 	bl	800225c <SSD1306_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f6      	beq.n	800121c <main+0x184>
	}

	SSD1306_Clear();
 800122e:	f001 fa3a 	bl	80026a6 <SSD1306_Clear>
	MPU_Init();
 8001232:	f000 fd25 	bl	8001c80 <MPU_Init>

	const float M = gravitystatic();
 8001236:	f000 fbb5 	bl	80019a4 <gravitystatic>
 800123a:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 800123e:	f103 0314 	add.w	r3, r3, #20
 8001242:	ed83 0a00 	vstr	s0, [r3]

	buf_len = sprintf(buf, "M: %f\r\n", M);
 8001246:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 800124a:	f103 0314 	add.w	r3, r3, #20
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f7ff f982 	bl	8000558 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	494c      	ldr	r1, [pc, #304]	; (800138c <main+0x2f4>)
 800125a:	4847      	ldr	r0, [pc, #284]	; (8001378 <main+0x2e0>)
 800125c:	f00b f96e 	bl	800c53c <siprintf>
 8001260:	4603      	mov	r3, r0
 8001262:	4a46      	ldr	r2, [pc, #280]	; (800137c <main+0x2e4>)
 8001264:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <main+0x2e4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b29a      	uxth	r2, r3
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	4942      	ldr	r1, [pc, #264]	; (8001378 <main+0x2e0>)
 8001270:	4843      	ldr	r0, [pc, #268]	; (8001380 <main+0x2e8>)
 8001272:	f003 fece 	bl	8005012 <HAL_UART_Transmit>

	Har_InputTypeDef mpudata;
	for (int i = 0; i < 128; i++) {
 8001276:	2300      	movs	r3, #0
 8001278:	f507 5254 	add.w	r2, r7, #13568	; 0x3500
 800127c:	f102 021c 	add.w	r2, r2, #28
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e027      	b.n	80012d4 <main+0x23c>
		MPU_Read_Data_forHAR(&mpudata);
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	3b20      	subs	r3, #32
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fedc 	bl	8002048 <MPU_Read_Data_forHAR>
		((Har_InputTypeDef*) in_data)[i] = mpudata;
 8001290:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 8001294:	f103 031c 	add.w	r3, r3, #28
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <main+0x2cc>)
 80012a6:	441a      	add	r2, r3
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	3b20      	subs	r3, #32
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 128; i++) {
 80012be:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 80012c2:	f103 031c 	add.w	r3, r3, #28
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	f507 5254 	add.w	r2, r7, #13568	; 0x3500
 80012ce:	f102 021c 	add.w	r2, r2, #28
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 80012d8:	f103 031c 	add.w	r3, r3, #28
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b7f      	cmp	r3, #127	; 0x7f
 80012e0:	ddd0      	ble.n	8001284 <main+0x1ec>
	}

	ai_har_run(har_model, &ai_input[0], &ai_output[0]);
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <main+0x2d8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a20      	ldr	r2, [pc, #128]	; (8001368 <main+0x2d0>)
 80012e8:	491d      	ldr	r1, [pc, #116]	; (8001360 <main+0x2c8>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f008 f882 	bl	80093f4 <ai_har_run>
	osKernelInitialize();
 80012f0:	f004 f98c 	bl	800560c <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of Neural_permit */
	Neural_permitHandle = osMutexNew(&Neural_permit_attributes);
 80012f4:	4826      	ldr	r0, [pc, #152]	; (8001390 <main+0x2f8>)
 80012f6:	f004 fa80 	bl	80057fa <osMutexNew>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a25      	ldr	r2, [pc, #148]	; (8001394 <main+0x2fc>)
 80012fe:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of ValueReady */
	ValueReadyHandle = osSemaphoreNew(32, 32, &ValueReady_attributes);
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <main+0x300>)
 8001302:	2120      	movs	r1, #32
 8001304:	2020      	movs	r0, #32
 8001306:	f004 fb86 	bl	8005a16 <osSemaphoreNew>
 800130a:	4603      	mov	r3, r0
 800130c:	4a23      	ldr	r2, [pc, #140]	; (800139c <main+0x304>)
 800130e:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of ValueQueue */
	ValueQueueHandle = osMessageQueueNew(128, sizeof(Har_InputTypeDef),
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <main+0x308>)
 8001312:	2124      	movs	r1, #36	; 0x24
 8001314:	2080      	movs	r0, #128	; 0x80
 8001316:	f004 fc07 	bl	8005b28 <osMessageQueueNew>
 800131a:	4603      	mov	r3, r0
 800131c:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <main+0x30c>)
 800131e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of GetValue */
	GetValueHandle = osThreadNew(StartTask1, NULL, &GetValue_attributes);
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <main+0x310>)
 8001322:	2100      	movs	r1, #0
 8001324:	4821      	ldr	r0, [pc, #132]	; (80013ac <main+0x314>)
 8001326:	f004 f9bb 	bl	80056a0 <osThreadNew>
 800132a:	4603      	mov	r3, r0
 800132c:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <main+0x318>)
 800132e:	6013      	str	r3, [r2, #0]

	/* creation of RunNeural */
	RunNeuralHandle = osThreadNew(StartTask02, NULL, &RunNeural_attributes);
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <main+0x31c>)
 8001332:	2100      	movs	r1, #0
 8001334:	4820      	ldr	r0, [pc, #128]	; (80013b8 <main+0x320>)
 8001336:	f004 f9b3 	bl	80056a0 <osThreadNew>
 800133a:	4603      	mov	r3, r0
 800133c:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <main+0x324>)
 800133e:	6013      	str	r3, [r2, #0]

	/* creation of CountStep */
	CountStepHandle = osThreadNew(StartTask03, NULL, &CountStep_attributes);
 8001340:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <main+0x328>)
 8001342:	2100      	movs	r1, #0
 8001344:	481f      	ldr	r0, [pc, #124]	; (80013c4 <main+0x32c>)
 8001346:	f004 f9ab 	bl	80056a0 <osThreadNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <main+0x330>)
 800134e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001350:	f004 f980 	bl	8005654 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001354:	e7fe      	b.n	8001354 <main+0x2bc>
 8001356:	bf00      	nop
 8001358:	40040440 	.word	0x40040440
 800135c:	00040440 	.word	0x00040440
 8001360:	20000008 	.word	0x20000008
 8001364:	20000e68 	.word	0x20000e68
 8001368:	20000020 	.word	0x20000020
 800136c:	2000936c 	.word	0x2000936c
 8001370:	20002068 	.word	0x20002068
 8001374:	0800ee6c 	.word	0x0800ee6c
 8001378:	20009134 	.word	0x20009134
 800137c:	20000e64 	.word	0x20000e64
 8001380:	20009328 	.word	0x20009328
 8001384:	0800ee94 	.word	0x0800ee94
 8001388:	0800eeb8 	.word	0x0800eeb8
 800138c:	0800eecc 	.word	0x0800eecc
 8001390:	0800f7f8 	.word	0x0800f7f8
 8001394:	20009130 	.word	0x20009130
 8001398:	0800f808 	.word	0x0800f808
 800139c:	200090a4 	.word	0x200090a4
 80013a0:	0800f7e0 	.word	0x0800f7e0
 80013a4:	200090b0 	.word	0x200090b0
 80013a8:	0800f774 	.word	0x0800f774
 80013ac:	08001661 	.word	0x08001661
 80013b0:	200090a8 	.word	0x200090a8
 80013b4:	0800f798 	.word	0x0800f798
 80013b8:	080016a1 	.word	0x080016a1
 80013bc:	200090ac 	.word	0x200090ac
 80013c0:	0800f7bc 	.word	0x0800f7bc
 80013c4:	080017b9 	.word	0x080017b9
 80013c8:	2000912c 	.word	0x2000912c

080013cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	; 0x50
 80013d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2230      	movs	r2, #48	; 0x30
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f00a fb82 	bl	800bae4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <SystemClock_Config+0xc8>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a26      	ldr	r2, [pc, #152]	; (8001494 <SystemClock_Config+0xc8>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <SystemClock_Config+0xc8>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <SystemClock_Config+0xcc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <SystemClock_Config+0xcc>)
 8001416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <SystemClock_Config+0xcc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001438:	2300      	movs	r3, #0
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800143c:	2308      	movs	r3, #8
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001448:	2307      	movs	r3, #7
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4618      	mov	r0, r3
 8001452:	f003 f91d 	bl	8004690 <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x94>
		Error_Handler();
 800145c:	f000 fc0a 	bl	8001c74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2302      	movs	r3, #2
 8001466:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2103      	movs	r1, #3
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fb7f 	bl	8004b80 <HAL_RCC_ClockConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xc0>
		Error_Handler();
 8001488:	f000 fbf4 	bl	8001c74 <Error_Handler>
	}
}
 800148c:	bf00      	nop
 800148e:	3750      	adds	r7, #80	; 0x50
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_CRC_Init+0x20>)
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <MX_CRC_Init+0x24>)
 80014a4:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_CRC_Init+0x20>)
 80014a8:	f001 fca5 	bl	8002df6 <HAL_CRC_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_CRC_Init+0x1a>
		Error_Handler();
 80014b2:	f000 fbdf 	bl	8001c74 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000909c 	.word	0x2000909c
 80014c0:	40023000 	.word	0x40023000

080014c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C1_Init+0x50>)
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <MX_I2C1_Init+0x54>)
 80014cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C1_Init+0x50>)
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_I2C1_Init+0x58>)
 80014d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C1_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_I2C1_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_I2C1_Init+0x50>)
 80014e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_I2C1_Init+0x50>)
 8001502:	f001 fe57 	bl	80031b4 <HAL_I2C_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800150c:	f000 fbb2 	bl	8001c74 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20009044 	.word	0x20009044
 8001518:	40005400 	.word	0x40005400
 800151c:	00061a80 	.word	0x00061a80

08001520 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_USART2_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001558:	f003 fd0e 	bl	8004f78 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001562:	f000 fb87 	bl	8001c74 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20009328 	.word	0x20009328
 8001570:	40004400 	.word	0x40004400

08001574 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b31      	ldr	r3, [pc, #196]	; (8001654 <MX_GPIO_Init+0xe0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a30      	ldr	r2, [pc, #192]	; (8001654 <MX_GPIO_Init+0xe0>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <MX_GPIO_Init+0xe0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a22      	ldr	r2, [pc, #136]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_GPIO_Init+0xe0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2120      	movs	r1, #32
 80015fe:	4816      	ldr	r0, [pc, #88]	; (8001658 <MX_GPIO_Init+0xe4>)
 8001600:	f001 fd9a 	bl	8003138 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001608:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <MX_GPIO_Init+0xe8>)
 800161c:	f001 fc08 	bl	8002e30 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001620:	2320      	movs	r3, #32
 8001622:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4808      	ldr	r0, [pc, #32]	; (8001658 <MX_GPIO_Init+0xe4>)
 8001638:	f001 fbfa 	bl	8002e30 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2105      	movs	r1, #5
 8001640:	2028      	movs	r0, #40	; 0x28
 8001642:	f001 fba2 	bl	8002d8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001646:	2028      	movs	r0, #40	; 0x28
 8001648:	f001 fbbb 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020800 	.word	0x40020800

08001660 <StartTask1>:
 * @brief  Function implementing the Task1 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	Har_InputTypeDef mpudata;
	for (;;) {
		MPU_Read_Data_forHAR(&mpudata);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fceb 	bl	8002048 <MPU_Read_Data_forHAR>
		MutexAcquire(&Neural_permitHandle);
 8001672:	4809      	ldr	r0, [pc, #36]	; (8001698 <StartTask1+0x38>)
 8001674:	f000 faac 	bl	8001bd0 <MutexAcquire>
		osMessageQueuePut(ValueQueueHandle, &mpudata, NULL, 0);
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <StartTask1+0x3c>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	f107 010c 	add.w	r1, r7, #12
 8001680:	2300      	movs	r3, #0
 8001682:	2200      	movs	r2, #0
 8001684:	f004 fac4 	bl	8005c10 <osMessageQueuePut>
		MutexRelease(&Neural_permitHandle);
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <StartTask1+0x38>)
 800168a:	f000 facb 	bl	8001c24 <MutexRelease>
		osDelay(data_cycle);
 800168e:	200a      	movs	r0, #10
 8001690:	f004 f898 	bl	80057c4 <osDelay>
		MPU_Read_Data_forHAR(&mpudata);
 8001694:	e7e8      	b.n	8001668 <StartTask1+0x8>
 8001696:	bf00      	nop
 8001698:	20009130 	.word	0x20009130
 800169c:	200090b0 	.word	0x200090b0

080016a0 <StartTask02>:
 * @brief Function implementing the RunNeural thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b090      	sub	sp, #64	; 0x40
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	ai_i32 nbatch;
	float *y_val = (float*) malloc(6 * sizeof(float));
 80016a8:	2018      	movs	r0, #24
 80016aa:	f00a f9e3 	bl	800ba74 <malloc>
 80016ae:	4603      	mov	r3, r0
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
	Har_InputTypeDef data;
	for (;;) {
		MutexAcquire(&Neural_permitHandle);
 80016b2:	4836      	ldr	r0, [pc, #216]	; (800178c <StartTask02+0xec>)
 80016b4:	f000 fa8c 	bl	8001bd0 <MutexAcquire>
		uint32_t count = osMessageQueueGetCount(ValueQueueHandle);
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <StartTask02+0xf0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fb65 	bl	8005d8c <osMessageQueueGetCount>
 80016c2:	6378      	str	r0, [r7, #52]	; 0x34
		memmove((Har_InputTypeDef*) in_data,
				((Har_InputTypeDef*) in_data + count),
 80016c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	461a      	mov	r2, r3
		memmove((Har_InputTypeDef*) in_data,
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <StartTask02+0xf4>)
 80016d2:	18d1      	adds	r1, r2, r3
 80016d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d6:	f06f 0223 	mvn.w	r2, #35	; 0x23
 80016da:	fb02 f303 	mul.w	r3, r2, r3
				sizeof(Har_InputTypeDef) * (128 - count));
 80016de:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
		memmove((Har_InputTypeDef*) in_data,
 80016e2:	461a      	mov	r2, r3
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <StartTask02+0xf4>)
 80016e6:	f00a f9e3 	bl	800bab0 <memmove>

		for (int i = 128 - count; i < 128; i++) {
 80016ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ec:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80016f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016f2:	e01b      	b.n	800172c <StartTask02+0x8c>
			osMessageQueueGet(ValueQueueHandle, &data, NULL, 1);
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <StartTask02+0xf0>)
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	f107 010c 	add.w	r1, r7, #12
 80016fc:	2301      	movs	r3, #1
 80016fe:	2200      	movs	r2, #0
 8001700:	f004 fae6 	bl	8005cd0 <osMessageQueueGet>
			*((Har_InputTypeDef*) in_data + i) = data;
 8001704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	461a      	mov	r2, r3
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <StartTask02+0xf4>)
 8001712:	4413      	add	r3, r2
 8001714:	461d      	mov	r5, r3
 8001716:	f107 040c 	add.w	r4, r7, #12
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	602b      	str	r3, [r5, #0]
		for (int i = 128 - count; i < 128; i++) {
 8001726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001728:	3301      	adds	r3, #1
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800172c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172e:	2b7f      	cmp	r3, #127	; 0x7f
 8001730:	dde0      	ble.n	80016f4 <StartTask02+0x54>

		}
		osMessageQueueReset(ValueQueueHandle);
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <StartTask02+0xf0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f004 fb48 	bl	8005dcc <osMessageQueueReset>
		MutexRelease(&Neural_permitHandle);
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <StartTask02+0xec>)
 800173e:	f000 fa71 	bl	8001c24 <MutexRelease>

//		volatile float a[1000] = {0};
		nbatch = ai_har_run(har_model, &ai_input[0], &ai_output[0]); //block 100ms
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <StartTask02+0xf8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <StartTask02+0xfc>)
 8001748:	4915      	ldr	r1, [pc, #84]	; (80017a0 <StartTask02+0x100>)
 800174a:	4618      	mov	r0, r3
 800174c:	f007 fe52 	bl	80093f4 <ai_har_run>
 8001750:	6338      	str	r0, [r7, #48]	; 0x30
		if (nbatch != 1) {
 8001752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001754:	2b01      	cmp	r3, #1
 8001756:	d00e      	beq.n	8001776 <StartTask02+0xd6>
			buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001758:	4912      	ldr	r1, [pc, #72]	; (80017a4 <StartTask02+0x104>)
 800175a:	4813      	ldr	r0, [pc, #76]	; (80017a8 <StartTask02+0x108>)
 800175c:	f00a feee 	bl	800c53c <siprintf>
 8001760:	4603      	mov	r3, r0
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <StartTask02+0x10c>)
 8001764:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <StartTask02+0x10c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	490e      	ldr	r1, [pc, #56]	; (80017a8 <StartTask02+0x108>)
 8001770:	480f      	ldr	r0, [pc, #60]	; (80017b0 <StartTask02+0x110>)
 8001772:	f003 fc4e 	bl	8005012 <HAL_UART_Transmit>
		}
		y_val = ((float*) out_data);
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <StartTask02+0x114>)
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
		printresult(y_val);
 800177a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800177c:	f000 f96e 	bl	8001a5c <printresult>
		osDelay(500);
 8001780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001784:	f004 f81e 	bl	80057c4 <osDelay>
	for (;;) {
 8001788:	e793      	b.n	80016b2 <StartTask02+0x12>
 800178a:	bf00      	nop
 800178c:	20009130 	.word	0x20009130
 8001790:	200090b0 	.word	0x200090b0
 8001794:	20000e68 	.word	0x20000e68
 8001798:	20002068 	.word	0x20002068
 800179c:	20000020 	.word	0x20000020
 80017a0:	20000008 	.word	0x20000008
 80017a4:	0800eed4 	.word	0x0800eed4
 80017a8:	20009134 	.word	0x20009134
 80017ac:	20000e64 	.word	0x20000e64
 80017b0:	20009328 	.word	0x20009328
 80017b4:	2000936c 	.word	0x2000936c

080017b8 <StartTask03>:
 * @brief Function implementing the CountStep thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	int step_count = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
	double step_length = 0;
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (;;) {
		double max_mag = 0;
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double min_mag = 0;
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double sum = 0;
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (int i = 0; i < count_delay/(data_cycle); i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e065      	b.n	80018c6 <StartTask03+0x10e>
			window_data[i] = MPU_Mag(
					(MPU_DATA*) (&((Har_InputTypeDef*) in_data)[i]));
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	461a      	mov	r2, r3
			window_data[i] = MPU_Mag(
 8001806:	4b60      	ldr	r3, [pc, #384]	; (8001988 <StartTask03+0x1d0>)
 8001808:	4413      	add	r3, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fce8 	bl	80021e0 <MPU_Mag>
 8001810:	eef0 7a40 	vmov.f32	s15, s0
 8001814:	4a5d      	ldr	r2, [pc, #372]	; (800198c <StartTask03+0x1d4>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	edc3 7a00 	vstr	s15, [r3]
			sum += fabs((double) window_data[i]);
 8001820:	4a5a      	ldr	r2, [pc, #360]	; (800198c <StartTask03+0x1d4>)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	eef0 7ae7 	vabs.f32	s15, s15
 8001830:	ee17 0a90 	vmov	r0, s15
 8001834:	f7fe fe90 	bl	8000558 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001840:	f7fe fd2c 	bl	800029c <__adddf3>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	e9c7 2304 	strd	r2, r3, [r7, #16]
			if (max_mag < window_data[i])
 800184c:	4a4f      	ldr	r2, [pc, #316]	; (800198c <StartTask03+0x1d4>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe7e 	bl	8000558 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001864:	f7ff f942 	bl	8000aec <__aeabi_dcmplt>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <StartTask03+0xce>
				max_mag = window_data[i];
 800186e:	4a47      	ldr	r2, [pc, #284]	; (800198c <StartTask03+0x1d4>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe6d 	bl	8000558 <__aeabi_f2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if (min_mag > window_data[i])
 8001886:	4a41      	ldr	r2, [pc, #260]	; (800198c <StartTask03+0x1d4>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe61 	bl	8000558 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800189e:	f7ff f943 	bl	8000b28 <__aeabi_dcmpgt>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <StartTask03+0x108>
				min_mag = window_data[i];
 80018a8:	4a38      	ldr	r2, [pc, #224]	; (800198c <StartTask03+0x1d4>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe50 	bl	8000558 <__aeabi_f2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for (int i = 0; i < count_delay/(data_cycle); i++) {
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b1d      	cmp	r3, #29
 80018ca:	dd96      	ble.n	80017fa <StartTask03+0x42>
		}
		if (max_mag > MAG_THERSHOLD) {
 80018cc:	a32a      	add	r3, pc, #168	; (adr r3, 8001978 <StartTask03+0x1c0>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018d6:	f7ff f927 	bl	8000b28 <__aeabi_dcmpgt>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d045      	beq.n	800196c <StartTask03+0x1b4>
			step_count++;
 80018e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e2:	3301      	adds	r3, #1
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
			step_length += GM * K * (sum / WINDOW_SIZE - min_mag)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <StartTask03+0x1d8>)
 80018ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018f0:	f7fe ffb4 	bl	800085c <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001900:	f7fe fcca 	bl	8000298 <__aeabi_dsub>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	a31c      	add	r3, pc, #112	; (adr r3, 8001980 <StartTask03+0x1c8>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fe79 	bl	8000608 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4614      	mov	r4, r2
 800191c:	461d      	mov	r5, r3
					/ (max_mag - min_mag);
 800191e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001922:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001926:	f7fe fcb7 	bl	8000298 <__aeabi_dsub>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f7fe ff93 	bl	800085c <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
			step_length += GM * K * (sum / WINDOW_SIZE - min_mag)
 800193a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800193e:	f7fe fcad 	bl	800029c <__adddf3>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			buf_len = sprintf(buf, "step_length: %f\r\n", step_length);
 800194a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800194e:	4911      	ldr	r1, [pc, #68]	; (8001994 <StartTask03+0x1dc>)
 8001950:	4811      	ldr	r0, [pc, #68]	; (8001998 <StartTask03+0x1e0>)
 8001952:	f00a fdf3 	bl	800c53c <siprintf>
 8001956:	4603      	mov	r3, r0
 8001958:	4a10      	ldr	r2, [pc, #64]	; (800199c <StartTask03+0x1e4>)
 800195a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <StartTask03+0x1e4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	2364      	movs	r3, #100	; 0x64
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <StartTask03+0x1e0>)
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <StartTask03+0x1e8>)
 8001968:	f003 fb53 	bl	8005012 <HAL_UART_Transmit>
		}
		osDelay(count_delay);
 800196c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001970:	f003 ff28 	bl	80057c4 <osDelay>
	for (;;) {
 8001974:	e72c      	b.n	80017d0 <StartTask03+0x18>
 8001976:	bf00      	nop
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	3ff4cccc 	.word	0x3ff4cccc
 8001980:	d70a3d71 	.word	0xd70a3d71
 8001984:	401b70a3 	.word	0x401b70a3
 8001988:	20000e68 	.word	0x20000e68
 800198c:	200090b4 	.word	0x200090b4
 8001990:	403e0000 	.word	0x403e0000
 8001994:	0800eef8 	.word	0x0800eef8
 8001998:	20009134 	.word	0x20009134
 800199c:	20000e64 	.word	0x20000e64
 80019a0:	20009328 	.word	0x20009328

080019a4 <gravitystatic>:
	}
	/* USER CODE END StartTask03 */
}

float gravitystatic(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
	MPU_DATA *mpu_data = (MPU_DATA*) malloc(sizeof(MPU_DATA));
 80019aa:	2018      	movs	r0, #24
 80019ac:	f00a f862 	bl	800ba74 <malloc>
 80019b0:	4603      	mov	r3, r0
 80019b2:	607b      	str	r3, [r7, #4]
	buf_len = sprintf(buf, "Leave the device stationary, wait.\r\n");
 80019b4:	4924      	ldr	r1, [pc, #144]	; (8001a48 <gravitystatic+0xa4>)
 80019b6:	4825      	ldr	r0, [pc, #148]	; (8001a4c <gravitystatic+0xa8>)
 80019b8:	f00a fdc0 	bl	800c53c <siprintf>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <gravitystatic+0xac>)
 80019c0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <gravitystatic+0xac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	2364      	movs	r3, #100	; 0x64
 80019ca:	4920      	ldr	r1, [pc, #128]	; (8001a4c <gravitystatic+0xa8>)
 80019cc:	4821      	ldr	r0, [pc, #132]	; (8001a54 <gravitystatic+0xb0>)
 80019ce:	f003 fb20 	bl	8005012 <HAL_UART_Transmit>
	float x = 0;
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 20; i++) {
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	e011      	b.n	8001a02 <gravitystatic+0x5e>

		MPU_Read_Data(mpu_data);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f9aa 	bl	8001d38 <MPU_Read_Data>
		x += mpu_data->Accel_x;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f2:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_Delay(5);
 80019f6:	2005      	movs	r0, #5
 80019f8:	f001 f8c8 	bl	8002b8c <HAL_Delay>
	for (int i = 0; i < 20; i++) {
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b13      	cmp	r3, #19
 8001a06:	ddea      	ble.n	80019de <gravitystatic+0x3a>
	}
	buf_len = sprintf(buf, "Finished!\r\n");
 8001a08:	4913      	ldr	r1, [pc, #76]	; (8001a58 <gravitystatic+0xb4>)
 8001a0a:	4810      	ldr	r0, [pc, #64]	; (8001a4c <gravitystatic+0xa8>)
 8001a0c:	f00a fd96 	bl	800c53c <siprintf>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <gravitystatic+0xac>)
 8001a14:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <gravitystatic+0xac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	2364      	movs	r3, #100	; 0x64
 8001a1e:	490b      	ldr	r1, [pc, #44]	; (8001a4c <gravitystatic+0xa8>)
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <gravitystatic+0xb0>)
 8001a22:	f003 faf6 	bl	8005012 <HAL_UART_Transmit>
	free(mpu_data);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f00a f82c 	bl	800ba84 <free>
	return x / 20.0;
 8001a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a30:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001a34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a38:	eef0 7a66 	vmov.f32	s15, s13

}
 8001a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0800ef0c 	.word	0x0800ef0c
 8001a4c:	20009134 	.word	0x20009134
 8001a50:	20000e64 	.word	0x20000e64
 8001a54:	20009328 	.word	0x20009328
 8001a58:	0800ef34 	.word	0x0800ef34

08001a5c <printresult>:

void printresult(float *y_val) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	volatile int max_index = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
	static volatile int max_indexold = 0;
	for (int i = 0; i < 6; i++) {
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e015      	b.n	8001a9a <printresult+0x3e>
		if (y_val[max_index] < y_val[i])
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	ed93 7a00 	vldr	s14, [r3]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d501      	bpl.n	8001a94 <printresult+0x38>
			max_index = i;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 6; i++) {
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	dde6      	ble.n	8001a6e <printresult+0x12>
	}
	if (max_index == max_indexold)
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <printresult+0x140>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d073      	beq.n	8001b92 <printresult+0x136>
		return;

	buf_len = sprintf(buf, "Output: ");
 8001aaa:	493d      	ldr	r1, [pc, #244]	; (8001ba0 <printresult+0x144>)
 8001aac:	483d      	ldr	r0, [pc, #244]	; (8001ba4 <printresult+0x148>)
 8001aae:	f00a fd45 	bl	800c53c <siprintf>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <printresult+0x14c>)
 8001ab6:	6013      	str	r3, [r2, #0]
	SSD1306_Clear();
 8001ab8:	f000 fdf5 	bl	80026a6 <SSD1306_Clear>
	SSD1306_GotoXY(0, 0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 fd36 	bl	8002530 <SSD1306_GotoXY>
	SSD1306_Puts(buf, &Font_7x10, 1);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4939      	ldr	r1, [pc, #228]	; (8001bac <printresult+0x150>)
 8001ac8:	4836      	ldr	r0, [pc, #216]	; (8001ba4 <printresult+0x148>)
 8001aca:	f000 fdc7 	bl	800265c <SSD1306_Puts>
	switch (max_index) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d83f      	bhi.n	8001b54 <printresult+0xf8>
 8001ad4:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <printresult+0x80>)
 8001ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ada:	bf00      	nop
 8001adc:	08001af5 	.word	0x08001af5
 8001ae0:	08001b05 	.word	0x08001b05
 8001ae4:	08001b15 	.word	0x08001b15
 8001ae8:	08001b25 	.word	0x08001b25
 8001aec:	08001b35 	.word	0x08001b35
 8001af0:	08001b45 	.word	0x08001b45
	case 0:
		buf_len = sprintf(buf, "WALKING");
 8001af4:	492e      	ldr	r1, [pc, #184]	; (8001bb0 <printresult+0x154>)
 8001af6:	482b      	ldr	r0, [pc, #172]	; (8001ba4 <printresult+0x148>)
 8001af8:	f00a fd20 	bl	800c53c <siprintf>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <printresult+0x14c>)
 8001b00:	6013      	str	r3, [r2, #0]
		break;
 8001b02:	e027      	b.n	8001b54 <printresult+0xf8>
	case 1:
		buf_len = sprintf(buf, "WALKING_UPSTAIRS");
 8001b04:	492b      	ldr	r1, [pc, #172]	; (8001bb4 <printresult+0x158>)
 8001b06:	4827      	ldr	r0, [pc, #156]	; (8001ba4 <printresult+0x148>)
 8001b08:	f00a fd18 	bl	800c53c <siprintf>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <printresult+0x14c>)
 8001b10:	6013      	str	r3, [r2, #0]
		break;
 8001b12:	e01f      	b.n	8001b54 <printresult+0xf8>
	case 2:
		buf_len = sprintf(buf, "WALKING_DOWNSTAIRS");
 8001b14:	4928      	ldr	r1, [pc, #160]	; (8001bb8 <printresult+0x15c>)
 8001b16:	4823      	ldr	r0, [pc, #140]	; (8001ba4 <printresult+0x148>)
 8001b18:	f00a fd10 	bl	800c53c <siprintf>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <printresult+0x14c>)
 8001b20:	6013      	str	r3, [r2, #0]
		break;
 8001b22:	e017      	b.n	8001b54 <printresult+0xf8>
	case 3:
		buf_len = sprintf(buf, "SITTING");
 8001b24:	4925      	ldr	r1, [pc, #148]	; (8001bbc <printresult+0x160>)
 8001b26:	481f      	ldr	r0, [pc, #124]	; (8001ba4 <printresult+0x148>)
 8001b28:	f00a fd08 	bl	800c53c <siprintf>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <printresult+0x14c>)
 8001b30:	6013      	str	r3, [r2, #0]
		break;
 8001b32:	e00f      	b.n	8001b54 <printresult+0xf8>
	case 4:
		buf_len = sprintf(buf, "STANDING");
 8001b34:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <printresult+0x164>)
 8001b36:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <printresult+0x148>)
 8001b38:	f00a fd00 	bl	800c53c <siprintf>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ba8 <printresult+0x14c>)
 8001b40:	6013      	str	r3, [r2, #0]
		break;
 8001b42:	e007      	b.n	8001b54 <printresult+0xf8>
	case 5:
		buf_len = sprintf(buf, "LAYING");
 8001b44:	491f      	ldr	r1, [pc, #124]	; (8001bc4 <printresult+0x168>)
 8001b46:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <printresult+0x148>)
 8001b48:	f00a fcf8 	bl	800c53c <siprintf>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <printresult+0x14c>)
 8001b50:	6013      	str	r3, [r2, #0]
		break;
 8001b52:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <printresult+0x14c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	2364      	movs	r3, #100	; 0x64
 8001b5c:	4911      	ldr	r1, [pc, #68]	; (8001ba4 <printresult+0x148>)
 8001b5e:	481a      	ldr	r0, [pc, #104]	; (8001bc8 <printresult+0x16c>)
 8001b60:	f003 fa57 	bl	8005012 <HAL_UART_Transmit>
	char *newline = "\r\n";
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <printresult+0x170>)
 8001b66:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart2, newline, 2, 100);
 8001b68:	2364      	movs	r3, #100	; 0x64
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	4816      	ldr	r0, [pc, #88]	; (8001bc8 <printresult+0x16c>)
 8001b70:	f003 fa4f 	bl	8005012 <HAL_UART_Transmit>
	SSD1306_GotoXY(0, 12);
 8001b74:	210c      	movs	r1, #12
 8001b76:	2000      	movs	r0, #0
 8001b78:	f000 fcda 	bl	8002530 <SSD1306_GotoXY>
	SSD1306_Puts(buf, &Font_7x10, 1);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	490b      	ldr	r1, [pc, #44]	; (8001bac <printresult+0x150>)
 8001b80:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <printresult+0x148>)
 8001b82:	f000 fd6b 	bl	800265c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001b86:	f000 fc2d 	bl	80023e4 <SSD1306_UpdateScreen>
	max_indexold = max_index;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a03      	ldr	r2, [pc, #12]	; (8001b9c <printresult+0x140>)
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e000      	b.n	8001b94 <printresult+0x138>
		return;
 8001b92:	bf00      	nop
}
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000206c 	.word	0x2000206c
 8001ba0:	0800ef40 	.word	0x0800ef40
 8001ba4:	20009134 	.word	0x20009134
 8001ba8:	20000e64 	.word	0x20000e64
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	0800ef4c 	.word	0x0800ef4c
 8001bb4:	0800ef54 	.word	0x0800ef54
 8001bb8:	0800ef68 	.word	0x0800ef68
 8001bbc:	0800ef7c 	.word	0x0800ef7c
 8001bc0:	0800ef84 	.word	0x0800ef84
 8001bc4:	0800ef90 	.word	0x0800ef90
 8001bc8:	20009328 	.word	0x20009328
 8001bcc:	0800ef98 	.word	0x0800ef98

08001bd0 <MutexAcquire>:

void MutexAcquire(osMutexId_t *mutex) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	osStatus status = osMutexAcquire(*mutex, osWaitForever);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fe90 	bl	8005906 <osMutexAcquire>
 8001be6:	60f8      	str	r0, [r7, #12]
	if (status != osOK) {
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00e      	beq.n	8001c0c <MutexAcquire+0x3c>
		buf_len = sprintf(buf, "Mutex error in MutexAcquire function!");
 8001bee:	4909      	ldr	r1, [pc, #36]	; (8001c14 <MutexAcquire+0x44>)
 8001bf0:	4809      	ldr	r0, [pc, #36]	; (8001c18 <MutexAcquire+0x48>)
 8001bf2:	f00a fca3 	bl	800c53c <siprintf>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <MutexAcquire+0x4c>)
 8001bfa:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, buf, buf_len, 5);
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <MutexAcquire+0x4c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	2305      	movs	r3, #5
 8001c04:	4904      	ldr	r1, [pc, #16]	; (8001c18 <MutexAcquire+0x48>)
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <MutexAcquire+0x50>)
 8001c08:	f003 fa03 	bl	8005012 <HAL_UART_Transmit>
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0800ef9c 	.word	0x0800ef9c
 8001c18:	20009134 	.word	0x20009134
 8001c1c:	20000e64 	.word	0x20000e64
 8001c20:	20009328 	.word	0x20009328

08001c24 <MutexRelease>:

void MutexRelease(osMutexId_t *mutex) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	osStatus status = osMutexRelease(*mutex);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 feb3 	bl	800599c <osMutexRelease>
 8001c36:	60f8      	str	r0, [r7, #12]
	if (status != osOK) {
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00e      	beq.n	8001c5c <MutexRelease+0x38>
		buf_len = sprintf(buf, "Mutex error in MutexRelease function!");
 8001c3e:	4909      	ldr	r1, [pc, #36]	; (8001c64 <MutexRelease+0x40>)
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <MutexRelease+0x44>)
 8001c42:	f00a fc7b 	bl	800c53c <siprintf>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <MutexRelease+0x48>)
 8001c4a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, buf, buf_len, 5);
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <MutexRelease+0x48>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	2305      	movs	r3, #5
 8001c54:	4904      	ldr	r1, [pc, #16]	; (8001c68 <MutexRelease+0x44>)
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MutexRelease+0x4c>)
 8001c58:	f003 f9db 	bl	8005012 <HAL_UART_Transmit>
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	0800efc4 	.word	0x0800efc4
 8001c68:	20009134 	.word	0x20009134
 8001c6c:	20000e64 	.word	0x20000e64
 8001c70:	20009328 	.word	0x20009328

08001c74 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c7c:	e7fe      	b.n	8001c7c <Error_Handler+0x8>
	...

08001c80 <MPU_Init>:
#include "main.h"
#include <math.h>

static struct SimpleKalman myKalman = { 0 };

void MPU_Init(void) {
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af04      	add	r7, sp, #16
	uint8_t data_sent = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	77fb      	strb	r3, [r7, #31]
//	float mea_e[6] = { 0.05, 0.05, 0.05, 0.02, 0.02, 0.02};
//	float est_e[6] = { 0.01, 0.01, 0.01, 0.01, 0.01, 0.01 };
//	float q[6] = { 0.005, 0.005, 0.005, 0.002, 0.002, 0.002};
	myKalman = SimpleKalmanInit(1, 0.1, 1);
 8001c8a:	4c28      	ldr	r4, [pc, #160]	; (8001d2c <MPU_Init+0xac>)
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001c92:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001d30 <MPU_Init+0xb0>
 8001c96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f958 	bl	8000f50 <SimpleKalmanInit>
 8001ca0:	4625      	mov	r5, r4
 8001ca2:	463c      	mov	r4, r7
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cac:	e885 0003 	stmia.w	r5, {r0, r1}

	//HAL_StatusTypeDef error;
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR << 1, PWR_MGMT_1_REG,
 8001cb0:	2305      	movs	r3, #5
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	f107 031f 	add.w	r3, r7, #31
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	226b      	movs	r2, #107	; 0x6b
 8001cc2:	21d0      	movs	r1, #208	; 0xd0
 8001cc4:	481b      	ldr	r0, [pc, #108]	; (8001d34 <MPU_Init+0xb4>)
 8001cc6:	f001 fcb7 	bl	8003638 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, &data_sent, 1, 5);

//	char* send = "error";
//	if(error == HAL_BUSY) HAL_UART_Transmit(&huart2, send, 5, 100);
	data_sent = 0x07;
 8001cca:	2307      	movs	r3, #7
 8001ccc:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR << 1, SMPLRT_DIV_REG,
 8001cce:	2305      	movs	r3, #5
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	f107 031f 	add.w	r3, r7, #31
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	2219      	movs	r2, #25
 8001ce0:	21d0      	movs	r1, #208	; 0xd0
 8001ce2:	4814      	ldr	r0, [pc, #80]	; (8001d34 <MPU_Init+0xb4>)
 8001ce4:	f001 fca8 	bl	8003638 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, &data_sent, 1, 5);

	data_sent = 3 << 3;
 8001ce8:	2318      	movs	r3, #24
 8001cea:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR << 1, ACCEL_CONFIG_REG,
 8001cec:	2305      	movs	r3, #5
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	f107 031f 	add.w	r3, r7, #31
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	221c      	movs	r2, #28
 8001cfe:	21d0      	movs	r1, #208	; 0xd0
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MPU_Init+0xb4>)
 8001d02:	f001 fc99 	bl	8003638 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, &data_sent, 1, 5);

	data_sent = 1 << 3;
 8001d06:	2308      	movs	r3, #8
 8001d08:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR << 1, GYRO_CONFIG_REG,
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	9302      	str	r3, [sp, #8]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	f107 031f 	add.w	r3, r7, #31
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	221b      	movs	r2, #27
 8001d1c:	21d0      	movs	r1, #208	; 0xd0
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MPU_Init+0xb4>)
 8001d20:	f001 fc8a 	bl	8003638 <HAL_I2C_Mem_Write>
//	I2C_MEMADD_SIZE_8BIT, &data_sent, 1, 100);
//
//	data_sent = 1<<4;
//	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR << 1, INT_ENABLE,
//	I2C_MEMADD_SIZE_8BIT, &data_sent, 1, 1000);
}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2c:	20002070 	.word	0x20002070
 8001d30:	3dcccccd 	.word	0x3dcccccd
 8001d34:	20009044 	.word	0x20009044

08001d38 <MPU_Read_Data>:

void MPU_Read_Data(MPU_DATA *Mpu_data) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08e      	sub	sp, #56	; 0x38
 8001d3c:	af04      	add	r7, sp, #16
 8001d3e:	6078      	str	r0, [r7, #4]
	uint8_t Rec[14];
	static MPU_DATA last={0};
	//HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR << 1, INT_STATUS, I2C_MEMADD_SIZE_8BIT, Rec, 1, 50);
	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR << 1, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, Rec, 14, 5);
 8001d40:	2305      	movs	r3, #5
 8001d42:	9302      	str	r3, [sp, #8]
 8001d44:	230e      	movs	r3, #14
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	f107 0318 	add.w	r3, r7, #24
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	223b      	movs	r2, #59	; 0x3b
 8001d52:	21d0      	movs	r1, #208	; 0xd0
 8001d54:	48b6      	ldr	r0, [pc, #728]	; (8002030 <MPU_Read_Data+0x2f8>)
 8001d56:	f001 fd69 	bl	800382c <HAL_I2C_Mem_Read>

	int16_t volatile Accel_X_RAW = (int16_t) ((int16_t) Rec[0] << 8 | Rec[1]);
 8001d5a:	7e3b      	ldrb	r3, [r7, #24]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	7e7b      	ldrb	r3, [r7, #25]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	82fb      	strh	r3, [r7, #22]
	int16_t volatile Accel_Y_RAW = (int16_t) ((int16_t) Rec[2] << 8 | Rec[3]);
 8001d6a:	7ebb      	ldrb	r3, [r7, #26]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	7efb      	ldrb	r3, [r7, #27]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	82bb      	strh	r3, [r7, #20]
	int16_t volatile Accel_Z_RAW = (int16_t) ((int16_t) Rec[4] << 8 | Rec[5]);
 8001d7a:	7f3b      	ldrb	r3, [r7, #28]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	7f7b      	ldrb	r3, [r7, #29]
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	827b      	strh	r3, [r7, #18]

	int16_t volatile Gyro_X_RAW = (int16_t) ((int16_t) Rec[8] << 8 | Rec[9]);
 8001d8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	823b      	strh	r3, [r7, #16]
	int16_t volatile Gyro_Y_RAW = (int16_t) ((int16_t) Rec[10] << 8 | Rec[11]);
 8001d9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	81fb      	strh	r3, [r7, #14]
	int16_t volatile Gyro_Z_RAW = (int16_t) ((int16_t) Rec[12] << 8 | Rec[13]);
 8001db2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	81bb      	strh	r3, [r7, #12]

	Mpu_data->Accel_x = (Accel_X_RAW / 2048.0 > 3 || Accel_X_RAW / 2048.0 <  -3 ) ? last.Accel_x : Accel_X_RAW / 2048.0;
 8001dc6:	8afb      	ldrh	r3, [r7, #22]
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbb2 	bl	8000534 <__aeabi_i2d>
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b97      	ldr	r3, [pc, #604]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001dd6:	f7fe fd41 	bl	800085c <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b94      	ldr	r3, [pc, #592]	; (8002038 <MPU_Read_Data+0x300>)
 8001de8:	f7fe fe9e 	bl	8000b28 <__aeabi_dcmpgt>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <MPU_Read_Data+0xe6>
 8001df2:	8afb      	ldrh	r3, [r7, #22]
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb9c 	bl	8000534 <__aeabi_i2d>
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	4b8c      	ldr	r3, [pc, #560]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001e02:	f7fe fd2b 	bl	800085c <__aeabi_ddiv>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b8a      	ldr	r3, [pc, #552]	; (800203c <MPU_Read_Data+0x304>)
 8001e14:	f7fe fe6a 	bl	8000aec <__aeabi_dcmplt>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <MPU_Read_Data+0xec>
 8001e1e:	4b88      	ldr	r3, [pc, #544]	; (8002040 <MPU_Read_Data+0x308>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e010      	b.n	8001e46 <MPU_Read_Data+0x10e>
 8001e24:	8afb      	ldrh	r3, [r7, #22]
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb83 	bl	8000534 <__aeabi_i2d>
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	4b80      	ldr	r3, [pc, #512]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001e34:	f7fe fd12 	bl	800085c <__aeabi_ddiv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe feba 	bl	8000bb8 <__aeabi_d2f>
 8001e44:	4603      	mov	r3, r0
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
	Mpu_data->Accel_y = (Accel_Y_RAW / 2048.0 > 3 || Accel_Y_RAW / 2048.0 <  -3 ) ? last.Accel_y : Accel_Y_RAW / 2048.0;
 8001e4a:	8abb      	ldrh	r3, [r7, #20]
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb70 	bl	8000534 <__aeabi_i2d>
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b76      	ldr	r3, [pc, #472]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001e5a:	f7fe fcff 	bl	800085c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <MPU_Read_Data+0x300>)
 8001e6c:	f7fe fe5c 	bl	8000b28 <__aeabi_dcmpgt>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d115      	bne.n	8001ea2 <MPU_Read_Data+0x16a>
 8001e76:	8abb      	ldrh	r3, [r7, #20]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb5a 	bl	8000534 <__aeabi_i2d>
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001e86:	f7fe fce9 	bl	800085c <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b69      	ldr	r3, [pc, #420]	; (800203c <MPU_Read_Data+0x304>)
 8001e98:	f7fe fe28 	bl	8000aec <__aeabi_dcmplt>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <MPU_Read_Data+0x170>
 8001ea2:	4b67      	ldr	r3, [pc, #412]	; (8002040 <MPU_Read_Data+0x308>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	e010      	b.n	8001eca <MPU_Read_Data+0x192>
 8001ea8:	8abb      	ldrh	r3, [r7, #20]
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb41 	bl	8000534 <__aeabi_i2d>
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001eb8:	f7fe fcd0 	bl	800085c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe fe78 	bl	8000bb8 <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6053      	str	r3, [r2, #4]
	Mpu_data->Accel_z = (Accel_Z_RAW / 2048.0 > 3 || Accel_Z_RAW / 2048.0 <  -3 ) ? last.Accel_z : Accel_Z_RAW / 2048.0;
 8001ece:	8a7b      	ldrh	r3, [r7, #18]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb2e 	bl	8000534 <__aeabi_i2d>
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b55      	ldr	r3, [pc, #340]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001ede:	f7fe fcbd 	bl	800085c <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b52      	ldr	r3, [pc, #328]	; (8002038 <MPU_Read_Data+0x300>)
 8001ef0:	f7fe fe1a 	bl	8000b28 <__aeabi_dcmpgt>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d115      	bne.n	8001f26 <MPU_Read_Data+0x1ee>
 8001efa:	8a7b      	ldrh	r3, [r7, #18]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb18 	bl	8000534 <__aeabi_i2d>
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001f0a:	f7fe fca7 	bl	800085c <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b48      	ldr	r3, [pc, #288]	; (800203c <MPU_Read_Data+0x304>)
 8001f1c:	f7fe fde6 	bl	8000aec <__aeabi_dcmplt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <MPU_Read_Data+0x1f4>
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <MPU_Read_Data+0x308>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	e010      	b.n	8001f4e <MPU_Read_Data+0x216>
 8001f2c:	8a7b      	ldrh	r3, [r7, #18]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe faff 	bl	8000534 <__aeabi_i2d>
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <MPU_Read_Data+0x2fc>)
 8001f3c:	f7fe fc8e 	bl	800085c <__aeabi_ddiv>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fe36 	bl	8000bb8 <__aeabi_d2f>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6093      	str	r3, [r2, #8]

	Mpu_data->Gyro_x = (Gyro_X_RAW / gyro_prescaler) * degtopi;
 8001f52:	8a3b      	ldrh	r3, [r7, #16]
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe faec 	bl	8000534 <__aeabi_i2d>
 8001f5c:	a330      	add	r3, pc, #192	; (adr r3, 8002020 <MPU_Read_Data+0x2e8>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe fc7b 	bl	800085c <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	a32e      	add	r3, pc, #184	; (adr r3, 8002028 <MPU_Read_Data+0x2f0>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fb48 	bl	8000608 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe1a 	bl	8000bb8 <__aeabi_d2f>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60da      	str	r2, [r3, #12]
	Mpu_data->Gyro_y = (Gyro_Y_RAW / gyro_prescaler) * degtopi;
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fad0 	bl	8000534 <__aeabi_i2d>
 8001f94:	a322      	add	r3, pc, #136	; (adr r3, 8002020 <MPU_Read_Data+0x2e8>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fc5f 	bl	800085c <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	a320      	add	r3, pc, #128	; (adr r3, 8002028 <MPU_Read_Data+0x2f0>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fb2c 	bl	8000608 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fdfe 	bl	8000bb8 <__aeabi_d2f>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
	Mpu_data->Gyro_z = (Gyro_Z_RAW / gyro_prescaler) * degtopi;
 8001fc2:	89bb      	ldrh	r3, [r7, #12]
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fab4 	bl	8000534 <__aeabi_i2d>
 8001fcc:	a314      	add	r3, pc, #80	; (adr r3, 8002020 <MPU_Read_Data+0x2e8>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	f7fe fc43 	bl	800085c <__aeabi_ddiv>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	a312      	add	r3, pc, #72	; (adr r3, 8002028 <MPU_Read_Data+0x2f0>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fb10 	bl	8000608 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fde2 	bl	8000bb8 <__aeabi_d2f>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	615a      	str	r2, [r3, #20]

	last.Accel_x = Mpu_data->Accel_x;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a10      	ldr	r2, [pc, #64]	; (8002040 <MPU_Read_Data+0x308>)
 8002000:	6013      	str	r3, [r2, #0]
	last.Accel_y = Mpu_data->Accel_y;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <MPU_Read_Data+0x308>)
 8002008:	6053      	str	r3, [r2, #4]
	last.Accel_z = Mpu_data->Accel_z;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <MPU_Read_Data+0x308>)
 8002010:	6093      	str	r3, [r2, #8]

	return;
 8002012:	bf00      	nop
}
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	d2f1a9fc 	.word	0xd2f1a9fc
 8002024:	4050624d 	.word	0x4050624d
 8002028:	a2529d39 	.word	0xa2529d39
 800202c:	3f91df46 	.word	0x3f91df46
 8002030:	20009044 	.word	0x20009044
 8002034:	40a00000 	.word	0x40a00000
 8002038:	40080000 	.word	0x40080000
 800203c:	c0080000 	.word	0xc0080000
 8002040:	200020a0 	.word	0x200020a0
 8002044:	00000000 	.word	0x00000000

08002048 <MPU_Read_Data_forHAR>:
	MPU_Read_Data(Mpu_data);
	*Mpu_data = updateEstimateMPU(&myKalman, *Mpu_data);
	return;
}
static MPU_DATA data_temp;
void MPU_Read_Data_forHAR(Har_InputTypeDef *data){
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	MPU_Read_Data(&data_temp);
 8002050:	485f      	ldr	r0, [pc, #380]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 8002052:	f7ff fe71 	bl	8001d38 <MPU_Read_Data>
	static float x=0,y=0,z=0;
	x = (alpha)*x + (1-alpha)*data_temp.Accel_x;
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <MPU_Read_Data_forHAR+0x18c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa7c 	bl	8000558 <__aeabi_f2d>
 8002060:	a357      	add	r3, pc, #348	; (adr r3, 80021c0 <MPU_Read_Data_forHAR+0x178>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe facf 	bl	8000608 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4614      	mov	r4, r2
 8002070:	461d      	mov	r5, r3
 8002072:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa6e 	bl	8000558 <__aeabi_f2d>
 800207c:	a352      	add	r3, pc, #328	; (adr r3, 80021c8 <MPU_Read_Data_forHAR+0x180>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fac1 	bl	8000608 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f7fe f905 	bl	800029c <__adddf3>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd8d 	bl	8000bb8 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <MPU_Read_Data_forHAR+0x18c>)
 80020a2:	6013      	str	r3, [r2, #0]
	y = (alpha)*y + (1-alpha)*data_temp.Accel_y;
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <MPU_Read_Data_forHAR+0x190>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa55 	bl	8000558 <__aeabi_f2d>
 80020ae:	a344      	add	r3, pc, #272	; (adr r3, 80021c0 <MPU_Read_Data_forHAR+0x178>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f7fe faa8 	bl	8000608 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4614      	mov	r4, r2
 80020be:	461d      	mov	r5, r3
 80020c0:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa47 	bl	8000558 <__aeabi_f2d>
 80020ca:	a33f      	add	r3, pc, #252	; (adr r3, 80021c8 <MPU_Read_Data_forHAR+0x180>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	f7fe fa9a 	bl	8000608 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe f8de 	bl	800029c <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fd66 	bl	8000bb8 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a3a      	ldr	r2, [pc, #232]	; (80021d8 <MPU_Read_Data_forHAR+0x190>)
 80020f0:	6013      	str	r3, [r2, #0]
	z = (alpha)*z + (1-alpha)*data_temp.Accel_z;
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <MPU_Read_Data_forHAR+0x194>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fa2e 	bl	8000558 <__aeabi_f2d>
 80020fc:	a330      	add	r3, pc, #192	; (adr r3, 80021c0 <MPU_Read_Data_forHAR+0x178>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fa81 	bl	8000608 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4614      	mov	r4, r2
 800210c:	461d      	mov	r5, r3
 800210e:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa20 	bl	8000558 <__aeabi_f2d>
 8002118:	a32b      	add	r3, pc, #172	; (adr r3, 80021c8 <MPU_Read_Data_forHAR+0x180>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe fa73 	bl	8000608 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe f8b7 	bl	800029c <__adddf3>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fd3f 	bl	8000bb8 <__aeabi_d2f>
 800213a:	4603      	mov	r3, r0
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <MPU_Read_Data_forHAR+0x194>)
 800213e:	6013      	str	r3, [r2, #0]

	data->body_acc_x = data_temp.Accel_x - x;
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <MPU_Read_Data_forHAR+0x18c>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edc3 7a03 	vstr	s15, [r3, #12]
	data->body_acc_y = data_temp.Accel_y - y;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 8002158:	ed93 7a01 	vldr	s14, [r3, #4]
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MPU_Read_Data_forHAR+0x190>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	edc3 7a04 	vstr	s15, [r3, #16]
	data->body_acc_z = data_temp.Accel_z - z;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 800216e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <MPU_Read_Data_forHAR+0x194>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	edc3 7a05 	vstr	s15, [r3, #20]

	data->body_gyro_x = data_temp.Gyro_x;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
	data->body_gyro_y = data_temp.Gyro_y;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	61da      	str	r2, [r3, #28]
	data->body_gyro_z = data_temp.Gyro_z;
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	621a      	str	r2, [r3, #32]

	data->total_acc_x = data_temp.Accel_x;
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	601a      	str	r2, [r3, #0]
	data->total_acc_y = data_temp.Accel_y;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	605a      	str	r2, [r3, #4]
	data->total_acc_z = data_temp.Accel_z;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MPU_Read_Data_forHAR+0x188>)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w
 80021c0:	fe14afb9 	.word	0xfe14afb9
 80021c4:	3fec6d7b 	.word	0x3fec6d7b
 80021c8:	0f5a8238 	.word	0x0f5a8238
 80021cc:	3fbc9420 	.word	0x3fbc9420
 80021d0:	20002088 	.word	0x20002088
 80021d4:	200020b8 	.word	0x200020b8
 80021d8:	200020bc 	.word	0x200020bc
 80021dc:	200020c0 	.word	0x200020c0

080021e0 <MPU_Mag>:
float MPU_Mag(MPU_DATA *Mpu_data){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	volatile float temp = Mpu_data->Accel_x*Mpu_data->Accel_x + Mpu_data->Accel_y*Mpu_data->Accel_y + Mpu_data->Accel_z*Mpu_data->Accel_z;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	ed93 7a00 	vldr	s14, [r3]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	edd3 7a01 	vldr	s15, [r3, #4]
 8002204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edd3 7a02 	vldr	s15, [r3, #8]
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002220:	edc7 7a03 	vstr	s15, [r7, #12]
	volatile float temp2 = updateEstimate(&myKalman, sqrtf(temp));
 8002224:	edd7 7a03 	vldr	s15, [r7, #12]
 8002228:	eeb0 0a67 	vmov.f32	s0, s15
 800222c:	f00c fb5e 	bl	800e8ec <sqrtf>
 8002230:	eef0 7a40 	vmov.f32	s15, s0
 8002234:	eeb0 0a67 	vmov.f32	s0, s15
 8002238:	4807      	ldr	r0, [pc, #28]	; (8002258 <MPU_Mag+0x78>)
 800223a:	f7fe fea9 	bl	8000f90 <updateEstimate>
 800223e:	eef0 7a40 	vmov.f32	s15, s0
 8002242:	edc7 7a02 	vstr	s15, [r7, #8]
	return temp2;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	ee07 3a90 	vmov	s15, r3
}
 800224c:	eeb0 0a67 	vmov.f32	s0, s15
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20002070 	.word	0x20002070

0800225c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002262:	f000 fa29 	bl	80026b8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002266:	f644 6320 	movw	r3, #20000	; 0x4e20
 800226a:	2201      	movs	r2, #1
 800226c:	2178      	movs	r1, #120	; 0x78
 800226e:	485b      	ldr	r0, [pc, #364]	; (80023dc <SSD1306_Init+0x180>)
 8002270:	f001 fd02 	bl	8003c78 <HAL_I2C_IsDeviceReady>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800227a:	2300      	movs	r3, #0
 800227c:	e0a9      	b.n	80023d2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800227e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002282:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002284:	e002      	b.n	800228c <SSD1306_Init+0x30>
		p--;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3b01      	subs	r3, #1
 800228a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002292:	22ae      	movs	r2, #174	; 0xae
 8002294:	2100      	movs	r1, #0
 8002296:	2078      	movs	r0, #120	; 0x78
 8002298:	f000 fa6c 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800229c:	2220      	movs	r2, #32
 800229e:	2100      	movs	r1, #0
 80022a0:	2078      	movs	r0, #120	; 0x78
 80022a2:	f000 fa67 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80022a6:	2210      	movs	r2, #16
 80022a8:	2100      	movs	r1, #0
 80022aa:	2078      	movs	r0, #120	; 0x78
 80022ac:	f000 fa62 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022b0:	22b0      	movs	r2, #176	; 0xb0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2078      	movs	r0, #120	; 0x78
 80022b6:	f000 fa5d 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80022ba:	22c8      	movs	r2, #200	; 0xc8
 80022bc:	2100      	movs	r1, #0
 80022be:	2078      	movs	r0, #120	; 0x78
 80022c0:	f000 fa58 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80022c4:	2200      	movs	r2, #0
 80022c6:	2100      	movs	r1, #0
 80022c8:	2078      	movs	r0, #120	; 0x78
 80022ca:	f000 fa53 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80022ce:	2210      	movs	r2, #16
 80022d0:	2100      	movs	r1, #0
 80022d2:	2078      	movs	r0, #120	; 0x78
 80022d4:	f000 fa4e 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	2100      	movs	r1, #0
 80022dc:	2078      	movs	r0, #120	; 0x78
 80022de:	f000 fa49 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80022e2:	2281      	movs	r2, #129	; 0x81
 80022e4:	2100      	movs	r1, #0
 80022e6:	2078      	movs	r0, #120	; 0x78
 80022e8:	f000 fa44 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	2100      	movs	r1, #0
 80022f0:	2078      	movs	r0, #120	; 0x78
 80022f2:	f000 fa3f 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80022f6:	22a1      	movs	r2, #161	; 0xa1
 80022f8:	2100      	movs	r1, #0
 80022fa:	2078      	movs	r0, #120	; 0x78
 80022fc:	f000 fa3a 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002300:	22a6      	movs	r2, #166	; 0xa6
 8002302:	2100      	movs	r1, #0
 8002304:	2078      	movs	r0, #120	; 0x78
 8002306:	f000 fa35 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800230a:	22a8      	movs	r2, #168	; 0xa8
 800230c:	2100      	movs	r1, #0
 800230e:	2078      	movs	r0, #120	; 0x78
 8002310:	f000 fa30 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002314:	223f      	movs	r2, #63	; 0x3f
 8002316:	2100      	movs	r1, #0
 8002318:	2078      	movs	r0, #120	; 0x78
 800231a:	f000 fa2b 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800231e:	22a4      	movs	r2, #164	; 0xa4
 8002320:	2100      	movs	r1, #0
 8002322:	2078      	movs	r0, #120	; 0x78
 8002324:	f000 fa26 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002328:	22d3      	movs	r2, #211	; 0xd3
 800232a:	2100      	movs	r1, #0
 800232c:	2078      	movs	r0, #120	; 0x78
 800232e:	f000 fa21 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2078      	movs	r0, #120	; 0x78
 8002338:	f000 fa1c 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800233c:	22d5      	movs	r2, #213	; 0xd5
 800233e:	2100      	movs	r1, #0
 8002340:	2078      	movs	r0, #120	; 0x78
 8002342:	f000 fa17 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002346:	22f0      	movs	r2, #240	; 0xf0
 8002348:	2100      	movs	r1, #0
 800234a:	2078      	movs	r0, #120	; 0x78
 800234c:	f000 fa12 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002350:	22d9      	movs	r2, #217	; 0xd9
 8002352:	2100      	movs	r1, #0
 8002354:	2078      	movs	r0, #120	; 0x78
 8002356:	f000 fa0d 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800235a:	2222      	movs	r2, #34	; 0x22
 800235c:	2100      	movs	r1, #0
 800235e:	2078      	movs	r0, #120	; 0x78
 8002360:	f000 fa08 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002364:	22da      	movs	r2, #218	; 0xda
 8002366:	2100      	movs	r1, #0
 8002368:	2078      	movs	r0, #120	; 0x78
 800236a:	f000 fa03 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800236e:	2212      	movs	r2, #18
 8002370:	2100      	movs	r1, #0
 8002372:	2078      	movs	r0, #120	; 0x78
 8002374:	f000 f9fe 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002378:	22db      	movs	r2, #219	; 0xdb
 800237a:	2100      	movs	r1, #0
 800237c:	2078      	movs	r0, #120	; 0x78
 800237e:	f000 f9f9 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002382:	2220      	movs	r2, #32
 8002384:	2100      	movs	r1, #0
 8002386:	2078      	movs	r0, #120	; 0x78
 8002388:	f000 f9f4 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800238c:	228d      	movs	r2, #141	; 0x8d
 800238e:	2100      	movs	r1, #0
 8002390:	2078      	movs	r0, #120	; 0x78
 8002392:	f000 f9ef 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002396:	2214      	movs	r2, #20
 8002398:	2100      	movs	r1, #0
 800239a:	2078      	movs	r0, #120	; 0x78
 800239c:	f000 f9ea 	bl	8002774 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80023a0:	22af      	movs	r2, #175	; 0xaf
 80023a2:	2100      	movs	r1, #0
 80023a4:	2078      	movs	r0, #120	; 0x78
 80023a6:	f000 f9e5 	bl	8002774 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80023aa:	222e      	movs	r2, #46	; 0x2e
 80023ac:	2100      	movs	r1, #0
 80023ae:	2078      	movs	r0, #120	; 0x78
 80023b0:	f000 f9e0 	bl	8002774 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f000 f843 	bl	8002440 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80023ba:	f000 f813 	bl	80023e4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <SSD1306_Init+0x184>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <SSD1306_Init+0x184>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SSD1306_Init+0x184>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20009044 	.word	0x20009044
 80023e0:	200024c4 	.word	0x200024c4

080023e4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80023ea:	2300      	movs	r3, #0
 80023ec:	71fb      	strb	r3, [r7, #7]
 80023ee:	e01d      	b.n	800242c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	3b50      	subs	r3, #80	; 0x50
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	2100      	movs	r1, #0
 80023fa:	2078      	movs	r0, #120	; 0x78
 80023fc:	f000 f9ba 	bl	8002774 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	2078      	movs	r0, #120	; 0x78
 8002406:	f000 f9b5 	bl	8002774 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800240a:	2210      	movs	r2, #16
 800240c:	2100      	movs	r1, #0
 800240e:	2078      	movs	r0, #120	; 0x78
 8002410:	f000 f9b0 	bl	8002774 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	01db      	lsls	r3, r3, #7
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <SSD1306_UpdateScreen+0x58>)
 800241a:	441a      	add	r2, r3
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	2140      	movs	r1, #64	; 0x40
 8002420:	2078      	movs	r0, #120	; 0x78
 8002422:	f000 f95f 	bl	80026e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	3301      	adds	r3, #1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	2b07      	cmp	r3, #7
 8002430:	d9de      	bls.n	80023f0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200020c4 	.word	0x200020c4

08002440 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <SSD1306_Fill+0x14>
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <SSD1306_Fill+0x16>
 8002454:	23ff      	movs	r3, #255	; 0xff
 8002456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800245a:	4619      	mov	r1, r3
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <SSD1306_Fill+0x2c>)
 800245e:	f009 fb41 	bl	800bae4 <memset>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200020c4 	.word	0x200020c4

08002470 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
 800247a:	460b      	mov	r3, r1
 800247c:	80bb      	strh	r3, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	70fb      	strb	r3, [r7, #3]
	if (
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	2b7f      	cmp	r3, #127	; 0x7f
 8002486:	d848      	bhi.n	800251a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002488:	88bb      	ldrh	r3, [r7, #4]
 800248a:	2b3f      	cmp	r3, #63	; 0x3f
 800248c:	d845      	bhi.n	800251a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <SSD1306_DrawPixel+0xb8>)
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d11a      	bne.n	80024e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	88bb      	ldrh	r3, [r7, #4]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	b298      	uxth	r0, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	01db      	lsls	r3, r3, #7
 80024b6:	4413      	add	r3, r2
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <SSD1306_DrawPixel+0xbc>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	b25a      	sxtb	r2, r3
 80024be:	88bb      	ldrh	r3, [r7, #4]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b259      	sxtb	r1, r3
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	4603      	mov	r3, r0
 80024d4:	01db      	lsls	r3, r3, #7
 80024d6:	4413      	add	r3, r2
 80024d8:	b2c9      	uxtb	r1, r1
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <SSD1306_DrawPixel+0xbc>)
 80024dc:	54d1      	strb	r1, [r2, r3]
 80024de:	e01d      	b.n	800251c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	b298      	uxth	r0, r3
 80024e8:	4603      	mov	r3, r0
 80024ea:	01db      	lsls	r3, r3, #7
 80024ec:	4413      	add	r3, r2
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <SSD1306_DrawPixel+0xbc>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	88bb      	ldrh	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	b25b      	sxtb	r3, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	b25b      	sxtb	r3, r3
 8002506:	4013      	ands	r3, r2
 8002508:	b259      	sxtb	r1, r3
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	4603      	mov	r3, r0
 800250e:	01db      	lsls	r3, r3, #7
 8002510:	4413      	add	r3, r2
 8002512:	b2c9      	uxtb	r1, r1
 8002514:	4a05      	ldr	r2, [pc, #20]	; (800252c <SSD1306_DrawPixel+0xbc>)
 8002516:	54d1      	strb	r1, [r2, r3]
 8002518:	e000      	b.n	800251c <SSD1306_DrawPixel+0xac>
		return;
 800251a:	bf00      	nop
	}
}
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200024c4 	.word	0x200024c4
 800252c:	200020c4 	.word	0x200020c4

08002530 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	460a      	mov	r2, r1
 800253a:	80fb      	strh	r3, [r7, #6]
 800253c:	4613      	mov	r3, r2
 800253e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002540:	4a05      	ldr	r2, [pc, #20]	; (8002558 <SSD1306_GotoXY+0x28>)
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <SSD1306_GotoXY+0x28>)
 8002548:	88bb      	ldrh	r3, [r7, #4]
 800254a:	8053      	strh	r3, [r2, #2]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	200024c4 	.word	0x200024c4

0800255c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
 8002568:	4613      	mov	r3, r2
 800256a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800256c:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <SSD1306_Putc+0xfc>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4413      	add	r3, r2
	if (
 8002578:	2b7f      	cmp	r3, #127	; 0x7f
 800257a:	dc07      	bgt.n	800258c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800257c:	4b36      	ldr	r3, [pc, #216]	; (8002658 <SSD1306_Putc+0xfc>)
 800257e:	885b      	ldrh	r3, [r3, #2]
 8002580:	461a      	mov	r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002588:	2b3f      	cmp	r3, #63	; 0x3f
 800258a:	dd01      	ble.n	8002590 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800258c:	2300      	movs	r3, #0
 800258e:	e05e      	b.n	800264e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e04b      	b.n	800262e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	3b20      	subs	r3, #32
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	7849      	ldrb	r1, [r1, #1]
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	440b      	add	r3, r1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e030      	b.n	800261c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <SSD1306_Putc+0xfc>)
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	b298      	uxth	r0, r3
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <SSD1306_Putc+0xfc>)
 80025d8:	885a      	ldrh	r2, [r3, #2]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	4413      	add	r3, r2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	79ba      	ldrb	r2, [r7, #6]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7ff ff43 	bl	8002470 <SSD1306_DrawPixel>
 80025ea:	e014      	b.n	8002616 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <SSD1306_Putc+0xfc>)
 80025ee:	881a      	ldrh	r2, [r3, #0]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	b298      	uxth	r0, r3
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <SSD1306_Putc+0xfc>)
 80025fa:	885a      	ldrh	r2, [r3, #2]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4413      	add	r3, r2
 8002602:	b299      	uxth	r1, r3
 8002604:	79bb      	ldrb	r3, [r7, #6]
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	f7ff ff2d 	bl	8002470 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	3301      	adds	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4293      	cmp	r3, r2
 8002626:	d3c8      	bcc.n	80025ba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	461a      	mov	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	4293      	cmp	r3, r2
 8002638:	d3ad      	bcc.n	8002596 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <SSD1306_Putc+0xfc>)
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	4413      	add	r3, r2
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <SSD1306_Putc+0xfc>)
 800264a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800264c:	79fb      	ldrb	r3, [r7, #7]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200024c4 	.word	0x200024c4

0800265c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800266a:	e012      	b.n	8002692 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	79fa      	ldrb	r2, [r7, #7]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff71 	bl	800255c <SSD1306_Putc>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d002      	beq.n	800268c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	e008      	b.n	800269e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3301      	adds	r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e8      	bne.n	800266c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	781b      	ldrb	r3, [r3, #0]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7ff fec8 	bl	8002440 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80026b0:	f7ff fe98 	bl	80023e4 <SSD1306_UpdateScreen>
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <ssd1306_I2C_Init+0x28>)
 80026c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026c2:	e002      	b.n	80026ca <ssd1306_I2C_Init+0x12>
		p--;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	0003d090 	.word	0x0003d090

080026e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b0c7      	sub	sp, #284	; 0x11c
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	4604      	mov	r4, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	4639      	mov	r1, r7
 80026f0:	600a      	str	r2, [r1, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	1dfb      	adds	r3, r7, #7
 80026f6:	4622      	mov	r2, r4
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	1dbb      	adds	r3, r7, #6
 80026fc:	4602      	mov	r2, r0
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	460a      	mov	r2, r1
 8002704:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	1dba      	adds	r2, r7, #6
 800270c:	7812      	ldrb	r2, [r2, #0]
 800270e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002716:	e010      	b.n	800273a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002718:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800271c:	463a      	mov	r2, r7
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	441a      	add	r2, r3
 8002722:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002726:	3301      	adds	r3, #1
 8002728:	7811      	ldrb	r1, [r2, #0]
 800272a:	f107 020c 	add.w	r2, r7, #12
 800272e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002730:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002734:	3301      	adds	r3, #1
 8002736:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800273a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800273e:	b29b      	uxth	r3, r3
 8002740:	1d3a      	adds	r2, r7, #4
 8002742:	8812      	ldrh	r2, [r2, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d8e7      	bhi.n	8002718 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002748:	1dfb      	adds	r3, r7, #7
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b299      	uxth	r1, r3
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	b29b      	uxth	r3, r3
 8002756:	f107 020c 	add.w	r2, r7, #12
 800275a:	200a      	movs	r0, #10
 800275c:	9000      	str	r0, [sp, #0]
 800275e:	4804      	ldr	r0, [pc, #16]	; (8002770 <ssd1306_I2C_WriteMulti+0x8c>)
 8002760:	f000 fe6c 	bl	800343c <HAL_I2C_Master_Transmit>
}
 8002764:	bf00      	nop
 8002766:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	20009044 	.word	0x20009044

08002774 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	460b      	mov	r3, r1
 8002780:	71bb      	strb	r3, [r7, #6]
 8002782:	4613      	mov	r3, r2
 8002784:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800278a:	797b      	ldrb	r3, [r7, #5]
 800278c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	b299      	uxth	r1, r3
 8002792:	f107 020c 	add.w	r2, r7, #12
 8002796:	230a      	movs	r3, #10
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2302      	movs	r3, #2
 800279c:	4803      	ldr	r0, [pc, #12]	; (80027ac <ssd1306_I2C_Write+0x38>)
 800279e:	f000 fe4d 	bl	800343c <HAL_I2C_Master_Transmit>
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20009044 	.word	0x20009044

080027b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_MspInit+0x54>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_MspInit+0x54>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_MspInit+0x54>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_MspInit+0x54>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_MspInit+0x54>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_MspInit+0x54>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	210f      	movs	r1, #15
 80027f2:	f06f 0001 	mvn.w	r0, #1
 80027f6:	f000 fac8 	bl	8002d8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <HAL_CRC_MspInit+0x3c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10d      	bne.n	8002836 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_CRC_MspInit+0x40>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_CRC_MspInit+0x40>)
 8002824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_CRC_MspInit+0x40>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023000 	.word	0x40023000
 8002848:	40023800 	.word	0x40023800

0800284c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_I2C_MspInit+0x84>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d12b      	bne.n	80028c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_I2C_MspInit+0x88>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_I2C_MspInit+0x88>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_I2C_MspInit+0x88>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800288a:	23c0      	movs	r3, #192	; 0xc0
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288e:	2312      	movs	r3, #18
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800289a:	2304      	movs	r3, #4
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	480c      	ldr	r0, [pc, #48]	; (80028d8 <HAL_I2C_MspInit+0x8c>)
 80028a6:	f000 fac3 	bl	8002e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_I2C_MspInit+0x88>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_I2C_MspInit+0x88>)
 80028b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_I2C_MspInit+0x88>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028c6:	bf00      	nop
 80028c8:	3728      	adds	r7, #40	; 0x28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40005400 	.word	0x40005400
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40020400 	.word	0x40020400

080028dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a19      	ldr	r2, [pc, #100]	; (8002960 <HAL_UART_MspInit+0x84>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d12b      	bne.n	8002956 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <HAL_UART_MspInit+0x88>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_UART_MspInit+0x88>)
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_UART_MspInit+0x88>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_UART_MspInit+0x88>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <HAL_UART_MspInit+0x88>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_UART_MspInit+0x88>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002936:	230c      	movs	r3, #12
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002946:	2307      	movs	r3, #7
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <HAL_UART_MspInit+0x8c>)
 8002952:	f000 fa6d 	bl	8002e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002956:	bf00      	nop
 8002958:	3728      	adds	r7, #40	; 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40004400 	.word	0x40004400
 8002964:	40023800 	.word	0x40023800
 8002968:	40020000 	.word	0x40020000

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <NMI_Handler+0x4>

08002972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <HardFault_Handler+0x4>

08002978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800297c:	e7fe      	b.n	800297c <MemManage_Handler+0x4>

0800297e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <BusFault_Handler+0x4>

08002984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <UsageFault_Handler+0x4>

0800298a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299c:	f000 f8d6 	bl	8002b4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80029a0:	f005 f9c0 	bl	8007d24 <xTaskGetSchedulerState>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80029aa:	f006 f8a5 	bl	8008af8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80029b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029ba:	f000 fbd7 	bl	800316c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <_sbrk+0x5c>)
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <_sbrk+0x60>)
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <_sbrk+0x64>)
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <_sbrk+0x68>)
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d207      	bcs.n	8002a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f4:	f009 f814 	bl	800ba20 <__errno>
 80029f8:	4603      	mov	r3, r0
 80029fa:	220c      	movs	r2, #12
 80029fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e009      	b.n	8002a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <_sbrk+0x64>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <_sbrk+0x64>)
 8002a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20020000 	.word	0x20020000
 8002a24:	00000800 	.word	0x00000800
 8002a28:	200024cc 	.word	0x200024cc
 8002a2c:	200093d8 	.word	0x200093d8

08002a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <SystemInit+0x20>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <SystemInit+0x20>)
 8002a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a58:	480d      	ldr	r0, [pc, #52]	; (8002a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a5a:	490e      	ldr	r1, [pc, #56]	; (8002a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a5c:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a60:	e002      	b.n	8002a68 <LoopCopyDataInit>

08002a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a66:	3304      	adds	r3, #4

08002a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a6c:	d3f9      	bcc.n	8002a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a70:	4c0b      	ldr	r4, [pc, #44]	; (8002aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a74:	e001      	b.n	8002a7a <LoopFillZerobss>

08002a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a78:	3204      	adds	r2, #4

08002a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a7c:	d3fb      	bcc.n	8002a76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a7e:	f7ff ffd7 	bl	8002a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a82:	f008 ffd3 	bl	800ba2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a86:	f7fe fb07 	bl	8001098 <main>
  bx  lr    
 8002a8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a94:	20000e48 	.word	0x20000e48
  ldr r2, =_sidata
 8002a98:	08019d24 	.word	0x08019d24
  ldr r2, =_sbss
 8002a9c:	20000e48 	.word	0x20000e48
  ldr r4, =_ebss
 8002aa0:	200093d8 	.word	0x200093d8

08002aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa4:	e7fe      	b.n	8002aa4 <ADC_IRQHandler>
	...

08002aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_Init+0x40>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <HAL_Init+0x40>)
 8002ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_Init+0x40>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <HAL_Init+0x40>)
 8002abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_Init+0x40>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <HAL_Init+0x40>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f000 f94f 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad6:	200f      	movs	r0, #15
 8002ad8:	f000 f808 	bl	8002aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002adc:	f7ff fe68 	bl	80027b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00

08002aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_InitTick+0x54>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_InitTick+0x58>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	4619      	mov	r1, r3
 8002afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f967 	bl	8002dde <HAL_SYSTICK_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00e      	b.n	8002b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b0f      	cmp	r3, #15
 8002b1e:	d80a      	bhi.n	8002b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b20:	2200      	movs	r2, #0
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	f000 f92f 	bl	8002d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b2c:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <HAL_InitTick+0x5c>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e000      	b.n	8002b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000038 	.word	0x20000038
 8002b44:	20000040 	.word	0x20000040
 8002b48:	2000003c 	.word	0x2000003c

08002b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x20>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_IncTick+0x24>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <HAL_IncTick+0x24>)
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000040 	.word	0x20000040
 8002b70:	20009384 	.word	0x20009384

08002b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return uwTick;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_GetTick+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20009384 	.word	0x20009384

08002b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b94:	f7ff ffee 	bl	8002b74 <HAL_GetTick>
 8002b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d005      	beq.n	8002bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_Delay+0x44>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bb2:	bf00      	nop
 8002bb4:	f7ff ffde 	bl	8002b74 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d8f7      	bhi.n	8002bb4 <HAL_Delay+0x28>
  {
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000040 	.word	0x20000040

08002bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c06:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60d3      	str	r3, [r2, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <__NVIC_GetPriorityGrouping+0x18>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f003 0307 	and.w	r3, r3, #7
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4907      	ldr	r1, [pc, #28]	; (8002c70 <__NVIC_EnableIRQ+0x38>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	; (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
         );
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	; 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff29 	bl	8002bd4 <__NVIC_SetPriorityGrouping>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9c:	f7ff ff3e 	bl	8002c1c <__NVIC_GetPriorityGrouping>
 8002da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff8e 	bl	8002cc8 <NVIC_EncodePriority>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff5d 	bl	8002c74 <__NVIC_SetPriority>
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff31 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffa2 	bl	8002d30 <SysTick_Config>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e00e      	b.n	8002e26 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	795b      	ldrb	r3, [r3, #5]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fcf5 	bl	8002808 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e159      	b.n	8003100 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f040 8148 	bne.w	80030fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d005      	beq.n	8002e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d130      	bne.n	8002ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 0201 	and.w	r2, r3, #1
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d017      	beq.n	8002f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d123      	bne.n	8002f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	69b9      	ldr	r1, [r7, #24]
 8002f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	2203      	movs	r2, #3
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0203 	and.w	r2, r3, #3
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a2 	beq.w	80030fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b57      	ldr	r3, [pc, #348]	; (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	4a56      	ldr	r2, [pc, #344]	; (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc6:	4b54      	ldr	r3, [pc, #336]	; (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd2:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_GPIO_Init+0x2ec>)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a49      	ldr	r2, [pc, #292]	; (8003120 <HAL_GPIO_Init+0x2f0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x202>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a48      	ldr	r2, [pc, #288]	; (8003124 <HAL_GPIO_Init+0x2f4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x1fe>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a47      	ldr	r2, [pc, #284]	; (8003128 <HAL_GPIO_Init+0x2f8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x1fa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a46      	ldr	r2, [pc, #280]	; (800312c <HAL_GPIO_Init+0x2fc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x1f6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a45      	ldr	r2, [pc, #276]	; (8003130 <HAL_GPIO_Init+0x300>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x1f2>
 800301e:	2304      	movs	r3, #4
 8003020:	e008      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003022:	2307      	movs	r3, #7
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003026:	2303      	movs	r3, #3
 8003028:	e004      	b.n	8003034 <HAL_GPIO_Init+0x204>
 800302a:	2302      	movs	r3, #2
 800302c:	e002      	b.n	8003034 <HAL_GPIO_Init+0x204>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003032:	2300      	movs	r3, #0
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	f002 0203 	and.w	r2, r2, #3
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	4093      	lsls	r3, r2
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003044:	4935      	ldr	r1, [pc, #212]	; (800311c <HAL_GPIO_Init+0x2ec>)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003052:	4b38      	ldr	r3, [pc, #224]	; (8003134 <HAL_GPIO_Init+0x304>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003076:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <HAL_GPIO_Init+0x304>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_GPIO_Init+0x304>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030a0:	4a24      	ldr	r2, [pc, #144]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ca:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030f4:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3301      	adds	r3, #1
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b0f      	cmp	r3, #15
 8003104:	f67f aea2 	bls.w	8002e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	40013800 	.word	0x40013800
 8003120:	40020000 	.word	0x40020000
 8003124:	40020400 	.word	0x40020400
 8003128:	40020800 	.word	0x40020800
 800312c:	40020c00 	.word	0x40020c00
 8003130:	40021000 	.word	0x40021000
 8003134:	40013c00 	.word	0x40013c00

08003138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003148:	787b      	ldrb	r3, [r7, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003154:	e003      	b.n	800315e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	041a      	lsls	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f806 	bl	800319c <HAL_GPIO_EXTI_Callback>
  }
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013c00 	.word	0x40013c00

0800319c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e12b      	b.n	800341e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fb36 	bl	800284c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003218:	f001 fe86 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 800321c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a81      	ldr	r2, [pc, #516]	; (8003428 <HAL_I2C_Init+0x274>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d807      	bhi.n	8003238 <HAL_I2C_Init+0x84>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a80      	ldr	r2, [pc, #512]	; (800342c <HAL_I2C_Init+0x278>)
 800322c:	4293      	cmp	r3, r2
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e006      	b.n	8003246 <HAL_I2C_Init+0x92>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a7d      	ldr	r2, [pc, #500]	; (8003430 <HAL_I2C_Init+0x27c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0e7      	b.n	800341e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a78      	ldr	r2, [pc, #480]	; (8003434 <HAL_I2C_Init+0x280>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9b      	lsrs	r3, r3, #18
 8003258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a6a      	ldr	r2, [pc, #424]	; (8003428 <HAL_I2C_Init+0x274>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d802      	bhi.n	8003288 <HAL_I2C_Init+0xd4>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3301      	adds	r3, #1
 8003286:	e009      	b.n	800329c <HAL_I2C_Init+0xe8>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a69      	ldr	r2, [pc, #420]	; (8003438 <HAL_I2C_Init+0x284>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	3301      	adds	r3, #1
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	495c      	ldr	r1, [pc, #368]	; (8003428 <HAL_I2C_Init+0x274>)
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d819      	bhi.n	80032f0 <HAL_I2C_Init+0x13c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e59      	subs	r1, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032d0:	400b      	ands	r3, r1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_I2C_Init+0x138>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e59      	subs	r1, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ea:	e051      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e04f      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d111      	bne.n	800331c <HAL_I2C_Init+0x168>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e012      	b.n	8003342 <HAL_I2C_Init+0x18e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	0099      	lsls	r1, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Init+0x196>
 8003346:	2301      	movs	r3, #1
 8003348:	e022      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10e      	bne.n	8003370 <HAL_I2C_Init+0x1bc>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e58      	subs	r0, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	440b      	add	r3, r1
 8003360:	fbb0 f3f3 	udiv	r3, r0, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	0099      	lsls	r1, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6911      	ldr	r1, [r2, #16]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68d2      	ldr	r2, [r2, #12]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	000186a0 	.word	0x000186a0
 800342c:	001e847f 	.word	0x001e847f
 8003430:	003d08ff 	.word	0x003d08ff
 8003434:	431bde83 	.word	0x431bde83
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	460b      	mov	r3, r1
 800344a:	817b      	strh	r3, [r7, #10]
 800344c:	4613      	mov	r3, r2
 800344e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff fb90 	bl	8002b74 <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	f040 80e0 	bne.w	8003624 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2319      	movs	r3, #25
 800346a:	2201      	movs	r2, #1
 800346c:	4970      	ldr	r1, [pc, #448]	; (8003630 <HAL_I2C_Master_Transmit+0x1f4>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 ff30 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e0d3      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_I2C_Master_Transmit+0x50>
 8003488:	2302      	movs	r3, #2
 800348a:	e0cc      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d007      	beq.n	80034b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2221      	movs	r2, #33	; 0x21
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2210      	movs	r2, #16
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	893a      	ldrh	r2, [r7, #8]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a50      	ldr	r2, [pc, #320]	; (8003634 <HAL_I2C_Master_Transmit+0x1f8>)
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034f4:	8979      	ldrh	r1, [r7, #10]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fcea 	bl	8003ed4 <I2C_MasterRequestWrite>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e08d      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003520:	e066      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	6a39      	ldr	r1, [r7, #32]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 ffaa 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d107      	bne.n	800354a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e06b      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11b      	bne.n	80035c4 <HAL_I2C_Master_Transmit+0x188>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d017      	beq.n	80035c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	6a39      	ldr	r1, [r7, #32]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 ff9a 	bl	8004502 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d107      	bne.n	80035ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e01a      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d194      	bne.n	8003522 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	00100002 	.word	0x00100002
 8003634:	ffff0000 	.word	0xffff0000

08003638 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	4608      	mov	r0, r1
 8003642:	4611      	mov	r1, r2
 8003644:	461a      	mov	r2, r3
 8003646:	4603      	mov	r3, r0
 8003648:	817b      	strh	r3, [r7, #10]
 800364a:	460b      	mov	r3, r1
 800364c:	813b      	strh	r3, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003652:	f7ff fa8f 	bl	8002b74 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b20      	cmp	r3, #32
 8003662:	f040 80d9 	bne.w	8003818 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2319      	movs	r3, #25
 800366c:	2201      	movs	r2, #1
 800366e:	496d      	ldr	r1, [pc, #436]	; (8003824 <HAL_I2C_Mem_Write+0x1ec>)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fe2f 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
 800367e:	e0cc      	b.n	800381a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_I2C_Mem_Write+0x56>
 800368a:	2302      	movs	r3, #2
 800368c:	e0c5      	b.n	800381a <HAL_I2C_Mem_Write+0x1e2>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d007      	beq.n	80036b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2221      	movs	r2, #33	; 0x21
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a4d      	ldr	r2, [pc, #308]	; (8003828 <HAL_I2C_Mem_Write+0x1f0>)
 80036f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036f6:	88f8      	ldrh	r0, [r7, #6]
 80036f8:	893a      	ldrh	r2, [r7, #8]
 80036fa:	8979      	ldrh	r1, [r7, #10]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4603      	mov	r3, r0
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fc66 	bl	8003fd8 <I2C_RequestMemoryWrite>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d052      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e081      	b.n	800381a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 feb0 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b04      	cmp	r3, #4
 800372c:	d107      	bne.n	800373e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e06b      	b.n	800381a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d11b      	bne.n	80037b8 <HAL_I2C_Mem_Write+0x180>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d017      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1aa      	bne.n	8003716 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fe9c 	bl	8004502 <I2C_WaitOnBTFFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00d      	beq.n	80037ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d107      	bne.n	80037e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e016      	b.n	800381a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	00100002 	.word	0x00100002
 8003828:	ffff0000 	.word	0xffff0000

0800382c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08c      	sub	sp, #48	; 0x30
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	4608      	mov	r0, r1
 8003836:	4611      	mov	r1, r2
 8003838:	461a      	mov	r2, r3
 800383a:	4603      	mov	r3, r0
 800383c:	817b      	strh	r3, [r7, #10]
 800383e:	460b      	mov	r3, r1
 8003840:	813b      	strh	r3, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003846:	f7ff f995 	bl	8002b74 <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b20      	cmp	r3, #32
 8003856:	f040 8208 	bne.w	8003c6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2319      	movs	r3, #25
 8003860:	2201      	movs	r2, #1
 8003862:	497b      	ldr	r1, [pc, #492]	; (8003a50 <HAL_I2C_Mem_Read+0x224>)
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fd35 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
 8003872:	e1fb      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_I2C_Mem_Read+0x56>
 800387e:	2302      	movs	r3, #2
 8003880:	e1f4      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d007      	beq.n	80038a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2222      	movs	r2, #34	; 0x22
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a5b      	ldr	r2, [pc, #364]	; (8003a54 <HAL_I2C_Mem_Read+0x228>)
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ea:	88f8      	ldrh	r0, [r7, #6]
 80038ec:	893a      	ldrh	r2, [r7, #8]
 80038ee:	8979      	ldrh	r1, [r7, #10]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	4603      	mov	r3, r0
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fc02 	bl	8004104 <I2C_RequestMemoryRead>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e1b0      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d113      	bne.n	800393a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	623b      	str	r3, [r7, #32]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e184      	b.n	8003c44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	2b01      	cmp	r3, #1
 8003940:	d11b      	bne.n	800397a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e164      	b.n	8003c44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	2b02      	cmp	r3, #2
 8003980:	d11b      	bne.n	80039ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003990:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	e144      	b.n	8003c44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039d0:	e138      	b.n	8003c44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	f200 80f1 	bhi.w	8003bbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d123      	bne.n	8003a2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fdcb 	bl	8004584 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e139      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a2a:	e10b      	b.n	8003c44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d14e      	bne.n	8003ad2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	4906      	ldr	r1, [pc, #24]	; (8003a58 <HAL_I2C_Mem_Read+0x22c>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fc48 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e10e      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
 8003a4e:	bf00      	nop
 8003a50:	00100002 	.word	0x00100002
 8003a54:	ffff0000 	.word	0xffff0000
 8003a58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad0:	e0b8      	b.n	8003c44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4966      	ldr	r1, [pc, #408]	; (8003c74 <HAL_I2C_Mem_Read+0x448>)
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fbf9 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0bf      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	2200      	movs	r2, #0
 8003b36:	494f      	ldr	r1, [pc, #316]	; (8003c74 <HAL_I2C_Mem_Read+0x448>)
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fbcb 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e091      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bbc:	e042      	b.n	8003c44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fcde 	bl	8004584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e04c      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d118      	bne.n	8003c44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f47f aec2 	bne.w	80039d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
  }
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3728      	adds	r7, #40	; 0x28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	00010004 	.word	0x00010004

08003c78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	460b      	mov	r3, r1
 8003c86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c88:	f7fe ff74 	bl	8002b74 <HAL_GetTick>
 8003c8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	f040 8111 	bne.w	8003ec2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2319      	movs	r3, #25
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4988      	ldr	r1, [pc, #544]	; (8003ecc <HAL_I2C_IsDeviceReady+0x254>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fb12 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e104      	b.n	8003ec4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_I2C_IsDeviceReady+0x50>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e0fd      	b.n	8003ec4 <HAL_I2C_IsDeviceReady+0x24c>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d007      	beq.n	8003cee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2224      	movs	r2, #36	; 0x24
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a70      	ldr	r2, [pc, #448]	; (8003ed0 <HAL_I2C_IsDeviceReady+0x258>)
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fad0 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d48:	d103      	bne.n	8003d52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e0b6      	b.n	8003ec4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d66:	f7fe ff05 	bl	8002b74 <HAL_GetTick>
 8003d6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	bf0c      	ite	eq
 8003d7a:	2301      	moveq	r3, #1
 8003d7c:	2300      	movne	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d9a:	e025      	b.n	8003de8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7fe feea 	bl	8002b74 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <HAL_I2C_IsDeviceReady+0x13a>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	22a0      	movs	r2, #160	; 0xa0
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2ba0      	cmp	r3, #160	; 0xa0
 8003df2:	d005      	beq.n	8003e00 <HAL_I2C_IsDeviceReady+0x188>
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_I2C_IsDeviceReady+0x188>
 8003dfa:	7dbb      	ldrb	r3, [r7, #22]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0cd      	beq.n	8003d9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d129      	bne.n	8003e6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2319      	movs	r3, #25
 8003e42:	2201      	movs	r2, #1
 8003e44:	4921      	ldr	r1, [pc, #132]	; (8003ecc <HAL_I2C_IsDeviceReady+0x254>)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fa44 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e036      	b.n	8003ec4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e02c      	b.n	8003ec4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2319      	movs	r3, #25
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	490f      	ldr	r1, [pc, #60]	; (8003ecc <HAL_I2C_IsDeviceReady+0x254>)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fa20 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e012      	b.n	8003ec4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f4ff af32 	bcc.w	8003d12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	00100002 	.word	0x00100002
 8003ed0:	ffff0000 	.word	0xffff0000

08003ed4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d006      	beq.n	8003efe <I2C_MasterRequestWrite+0x2a>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d003      	beq.n	8003efe <I2C_MasterRequestWrite+0x2a>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003efc:	d108      	bne.n	8003f10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e00b      	b.n	8003f28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	2b12      	cmp	r3, #18
 8003f16:	d107      	bne.n	8003f28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f9cd 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d103      	bne.n	8003f58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e035      	b.n	8003fc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f64:	d108      	bne.n	8003f78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f74:	611a      	str	r2, [r3, #16]
 8003f76:	e01b      	b.n	8003fb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f78:	897b      	ldrh	r3, [r7, #10]
 8003f7a:	11db      	asrs	r3, r3, #7
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0306 	and.w	r3, r3, #6
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f063 030f 	orn	r3, r3, #15
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	490e      	ldr	r1, [pc, #56]	; (8003fd0 <I2C_MasterRequestWrite+0xfc>)
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f9f3 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e010      	b.n	8003fc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fa6:	897b      	ldrh	r3, [r7, #10]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4907      	ldr	r1, [pc, #28]	; (8003fd4 <I2C_MasterRequestWrite+0x100>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f9e3 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	00010008 	.word	0x00010008
 8003fd4:	00010002 	.word	0x00010002

08003fd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	817b      	strh	r3, [r7, #10]
 8003fea:	460b      	mov	r3, r1
 8003fec:	813b      	strh	r3, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004000:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	2200      	movs	r2, #0
 800400a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f960 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004028:	d103      	bne.n	8004032 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e05f      	b.n	80040f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004044:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	492d      	ldr	r1, [pc, #180]	; (8004100 <I2C_RequestMemoryWrite+0x128>)
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f998 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e04c      	b.n	80040f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004074:	6a39      	ldr	r1, [r7, #32]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fa02 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b04      	cmp	r3, #4
 8004088:	d107      	bne.n	800409a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004098:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e02b      	b.n	80040f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a4:	893b      	ldrh	r3, [r7, #8]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	e021      	b.n	80040f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040b0:	893b      	ldrh	r3, [r7, #8]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c0:	6a39      	ldr	r1, [r7, #32]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f9dc 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d107      	bne.n	80040e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e005      	b.n	80040f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ea:	893b      	ldrh	r3, [r7, #8]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	00010002 	.word	0x00010002

08004104 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	4608      	mov	r0, r1
 800410e:	4611      	mov	r1, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4603      	mov	r3, r0
 8004114:	817b      	strh	r3, [r7, #10]
 8004116:	460b      	mov	r3, r1
 8004118:	813b      	strh	r3, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2200      	movs	r2, #0
 8004146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8c2 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00d      	beq.n	8004172 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004164:	d103      	bne.n	800416e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0aa      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004172:	897b      	ldrh	r3, [r7, #10]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	4952      	ldr	r1, [pc, #328]	; (80042d0 <I2C_RequestMemoryRead+0x1cc>)
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f8fa 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e097      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	6a39      	ldr	r1, [r7, #32]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f964 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d107      	bne.n	80041d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e076      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041e0:	893b      	ldrh	r3, [r7, #8]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	e021      	b.n	8004230 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fc:	6a39      	ldr	r1, [r7, #32]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f93e 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2b04      	cmp	r3, #4
 8004210:	d107      	bne.n	8004222 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e050      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004226:	893b      	ldrh	r3, [r7, #8]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	6a39      	ldr	r1, [r7, #32]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f923 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	2b04      	cmp	r3, #4
 8004246:	d107      	bne.n	8004258 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e035      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2200      	movs	r2, #0
 8004274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f82b 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d103      	bne.n	800429c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e013      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042a0:	897b      	ldrh	r3, [r7, #10]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	6a3a      	ldr	r2, [r7, #32]
 80042b4:	4906      	ldr	r1, [pc, #24]	; (80042d0 <I2C_RequestMemoryRead+0x1cc>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f863 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00010002 	.word	0x00010002

080042d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e4:	e025      	b.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d021      	beq.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fe fc41 	bl	8002b74 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d116      	bne.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e023      	b.n	800437a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10d      	bne.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x84>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	e00c      	b.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0b6      	beq.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004390:	e051      	b.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a0:	d123      	bne.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e046      	b.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d021      	beq.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fe fbbf 	bl	8002b74 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d116      	bne.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f043 0220 	orr.w	r2, r3, #32
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e020      	b.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10c      	bne.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	43da      	mvns	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e00b      	b.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d18d      	bne.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800448c:	e02d      	b.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f8ce 	bl	8004630 <I2C_IsAcknowledgeFailed>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e02d      	b.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d021      	beq.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7fe fb65 	bl	8002b74 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d116      	bne.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e007      	b.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d1ca      	bne.n	800448e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800450e:	e02d      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f88d 	bl	8004630 <I2C_IsAcknowledgeFailed>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e02d      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d021      	beq.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004528:	f7fe fb24 	bl	8002b74 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d116      	bne.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b04      	cmp	r3, #4
 8004578:	d1ca      	bne.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004590:	e042      	b.n	8004618 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b10      	cmp	r3, #16
 800459e:	d119      	bne.n	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0210 	mvn.w	r2, #16
 80045a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e029      	b.n	8004628 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d4:	f7fe face 	bl	8002b74 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e007      	b.n	8004628 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d1b5      	bne.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004646:	d11b      	bne.n	8004680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f043 0204 	orr.w	r2, r3, #4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e264      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d075      	beq.n	800479a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ae:	4ba3      	ldr	r3, [pc, #652]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d00c      	beq.n	80046d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ba:	4ba0      	ldr	r3, [pc, #640]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d112      	bne.n	80046ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	4b9d      	ldr	r3, [pc, #628]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d2:	d10b      	bne.n	80046ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	4b99      	ldr	r3, [pc, #612]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05b      	beq.n	8004798 <HAL_RCC_OscConfig+0x108>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d157      	bne.n	8004798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e23f      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f4:	d106      	bne.n	8004704 <HAL_RCC_OscConfig+0x74>
 80046f6:	4b91      	ldr	r3, [pc, #580]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a90      	ldr	r2, [pc, #576]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e01d      	b.n	8004740 <HAL_RCC_OscConfig+0xb0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x98>
 800470e:	4b8b      	ldr	r3, [pc, #556]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a8a      	ldr	r2, [pc, #552]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b88      	ldr	r3, [pc, #544]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a87      	ldr	r2, [pc, #540]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0xb0>
 8004728:	4b84      	ldr	r3, [pc, #528]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a83      	ldr	r2, [pc, #524]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800472e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4b81      	ldr	r3, [pc, #516]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a80      	ldr	r2, [pc, #512]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800473a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d013      	beq.n	8004770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fe fa14 	bl	8002b74 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004750:	f7fe fa10 	bl	8002b74 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e204      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b76      	ldr	r3, [pc, #472]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0xc0>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fe fa00 	bl	8002b74 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004778:	f7fe f9fc 	bl	8002b74 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1f0      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	4b6c      	ldr	r3, [pc, #432]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0xe8>
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d063      	beq.n	800486e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047a6:	4b65      	ldr	r3, [pc, #404]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b2:	4b62      	ldr	r3, [pc, #392]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d11c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	4b5f      	ldr	r3, [pc, #380]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d116      	bne.n	80047f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_RCC_OscConfig+0x152>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e1c4      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e2:	4b56      	ldr	r3, [pc, #344]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4952      	ldr	r1, [pc, #328]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f6:	e03a      	b.n	800486e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d020      	beq.n	8004842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <HAL_RCC_OscConfig+0x2b0>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fe f9b5 	bl	8002b74 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480e:	f7fe f9b1 	bl	8002b74 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e1a5      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	4b46      	ldr	r3, [pc, #280]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4940      	ldr	r1, [pc, #256]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
 8004840:	e015      	b.n	800486e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004842:	4b3f      	ldr	r3, [pc, #252]	; (8004940 <HAL_RCC_OscConfig+0x2b0>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fe f994 	bl	8002b74 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004850:	f7fe f990 	bl	8002b74 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e184      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	4b36      	ldr	r3, [pc, #216]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d030      	beq.n	80048dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004882:	4b30      	ldr	r3, [pc, #192]	; (8004944 <HAL_RCC_OscConfig+0x2b4>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fe f974 	bl	8002b74 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004890:	f7fe f970 	bl	8002b74 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e164      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x200>
 80048ae:	e015      	b.n	80048dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b0:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_RCC_OscConfig+0x2b4>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b6:	f7fe f95d 	bl	8002b74 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048be:	f7fe f959 	bl	8002b74 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e14d      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	4b1a      	ldr	r3, [pc, #104]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80048d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a0 	beq.w	8004a2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	4a0e      	ldr	r2, [pc, #56]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	6413      	str	r3, [r2, #64]	; 0x40
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004916:	2301      	movs	r3, #1
 8004918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_OscConfig+0x2b8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d121      	bne.n	800496a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004926:	4b08      	ldr	r3, [pc, #32]	; (8004948 <HAL_RCC_OscConfig+0x2b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a07      	ldr	r2, [pc, #28]	; (8004948 <HAL_RCC_OscConfig+0x2b8>)
 800492c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004932:	f7fe f91f 	bl	8002b74 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	e011      	b.n	800495e <HAL_RCC_OscConfig+0x2ce>
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	42470000 	.word	0x42470000
 8004944:	42470e80 	.word	0x42470e80
 8004948:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494c:	f7fe f912 	bl	8002b74 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e106      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495e:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <HAL_RCC_OscConfig+0x4e4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x2f0>
 8004972:	4b81      	ldr	r3, [pc, #516]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	4a80      	ldr	r2, [pc, #512]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	6713      	str	r3, [r2, #112]	; 0x70
 800497e:	e01c      	b.n	80049ba <HAL_RCC_OscConfig+0x32a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b05      	cmp	r3, #5
 8004986:	d10c      	bne.n	80049a2 <HAL_RCC_OscConfig+0x312>
 8004988:	4b7b      	ldr	r3, [pc, #492]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	4a7a      	ldr	r2, [pc, #488]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 800498e:	f043 0304 	orr.w	r3, r3, #4
 8004992:	6713      	str	r3, [r2, #112]	; 0x70
 8004994:	4b78      	ldr	r3, [pc, #480]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	4a77      	ldr	r2, [pc, #476]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6713      	str	r3, [r2, #112]	; 0x70
 80049a0:	e00b      	b.n	80049ba <HAL_RCC_OscConfig+0x32a>
 80049a2:	4b75      	ldr	r3, [pc, #468]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a74      	ldr	r2, [pc, #464]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70
 80049ae:	4b72      	ldr	r3, [pc, #456]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a71      	ldr	r2, [pc, #452]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d015      	beq.n	80049ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fe f8d7 	bl	8002b74 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fe f8d3 	bl	8002b74 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0c5      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e0:	4b65      	ldr	r3, [pc, #404]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ee      	beq.n	80049ca <HAL_RCC_OscConfig+0x33a>
 80049ec:	e014      	b.n	8004a18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ee:	f7fe f8c1 	bl	8002b74 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f4:	e00a      	b.n	8004a0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fe f8bd 	bl	8002b74 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e0af      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0c:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ee      	bne.n	80049f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d105      	bne.n	8004a2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1e:	4b56      	ldr	r3, [pc, #344]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	4a55      	ldr	r2, [pc, #340]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 809b 	beq.w	8004b6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a34:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d05c      	beq.n	8004afa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d141      	bne.n	8004acc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a48:	4b4c      	ldr	r3, [pc, #304]	; (8004b7c <HAL_RCC_OscConfig+0x4ec>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fe f891 	bl	8002b74 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fe f88d 	bl	8002b74 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e081      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a68:	4b43      	ldr	r3, [pc, #268]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f0      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	019b      	lsls	r3, r3, #6
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	4937      	ldr	r1, [pc, #220]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9e:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <HAL_RCC_OscConfig+0x4ec>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe f866 	bl	8002b74 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fe f862 	bl	8002b74 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e056      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x41c>
 8004aca:	e04e      	b.n	8004b6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <HAL_RCC_OscConfig+0x4ec>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fe f84f 	bl	8002b74 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fe f84b 	bl	8002b74 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e03f      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aec:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x44a>
 8004af8:	e037      	b.n	8004b6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e032      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b06:	4b1c      	ldr	r3, [pc, #112]	; (8004b78 <HAL_RCC_OscConfig+0x4e8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d028      	beq.n	8004b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d121      	bne.n	8004b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d11a      	bne.n	8004b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b36:	4013      	ands	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d111      	bne.n	8004b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d107      	bne.n	8004b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40007000 	.word	0x40007000
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	42470060 	.word	0x42470060

08004b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0cc      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b94:	4b68      	ldr	r3, [pc, #416]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d90c      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b65      	ldr	r3, [pc, #404]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b63      	ldr	r3, [pc, #396]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0b8      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	4a58      	ldr	r2, [pc, #352]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bec:	4b53      	ldr	r3, [pc, #332]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a52      	ldr	r2, [pc, #328]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf8:	4b50      	ldr	r3, [pc, #320]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	494d      	ldr	r1, [pc, #308]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d044      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d119      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d003      	beq.n	8004c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e06f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e067      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f023 0203 	bic.w	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4934      	ldr	r1, [pc, #208]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c70:	f7fd ff80 	bl	8002b74 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c78:	f7fd ff7c 	bl	8002b74 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e04f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	4b2b      	ldr	r3, [pc, #172]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 020c 	and.w	r2, r3, #12
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1eb      	bne.n	8004c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d20c      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e032      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4916      	ldr	r1, [pc, #88]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	490e      	ldr	r1, [pc, #56]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d06:	f000 f821 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	490a      	ldr	r1, [pc, #40]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004d18:	5ccb      	ldrb	r3, [r1, r3]
 8004d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd fee0 	bl	8002aec <HAL_InitTick>

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40023c00 	.word	0x40023c00
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	0800f818 	.word	0x0800f818
 8004d44:	20000038 	.word	0x20000038
 8004d48:	2000003c 	.word	0x2000003c

08004d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d64:	4b67      	ldr	r3, [pc, #412]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d00d      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x40>
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	f200 80bd 	bhi.w	8004ef0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x34>
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d7e:	e0b7      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d80:	4b61      	ldr	r3, [pc, #388]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d82:	60bb      	str	r3, [r7, #8]
       break;
 8004d84:	e0b7      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d86:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d88:	60bb      	str	r3, [r7, #8]
      break;
 8004d8a:	e0b4      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d8c:	4b5d      	ldr	r3, [pc, #372]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d96:	4b5b      	ldr	r3, [pc, #364]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d04d      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da2:	4b58      	ldr	r3, [pc, #352]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	461a      	mov	r2, r3
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	ea02 0800 	and.w	r8, r2, r0
 8004dba:	ea03 0901 	and.w	r9, r3, r1
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	014b      	lsls	r3, r1, #5
 8004dcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd0:	0142      	lsls	r2, r0, #5
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	ebb0 0008 	subs.w	r0, r0, r8
 8004dda:	eb61 0109 	sbc.w	r1, r1, r9
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	018b      	lsls	r3, r1, #6
 8004de8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dec:	0182      	lsls	r2, r0, #6
 8004dee:	1a12      	subs	r2, r2, r0
 8004df0:	eb63 0301 	sbc.w	r3, r3, r1
 8004df4:	f04f 0000 	mov.w	r0, #0
 8004df8:	f04f 0100 	mov.w	r1, #0
 8004dfc:	00d9      	lsls	r1, r3, #3
 8004dfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e02:	00d0      	lsls	r0, r2, #3
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	eb12 0208 	adds.w	r2, r2, r8
 8004e0c:	eb43 0309 	adc.w	r3, r3, r9
 8004e10:	f04f 0000 	mov.w	r0, #0
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	0259      	lsls	r1, r3, #9
 8004e1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e1e:	0250      	lsls	r0, r2, #9
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	f7fb ff12 	bl	8000c58 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e04a      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3e:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	461a      	mov	r2, r3
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	ea02 0400 	and.w	r4, r2, r0
 8004e56:	ea03 0501 	and.w	r5, r3, r1
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	014b      	lsls	r3, r1, #5
 8004e68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e6c:	0142      	lsls	r2, r0, #5
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	1b00      	subs	r0, r0, r4
 8004e74:	eb61 0105 	sbc.w	r1, r1, r5
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	018b      	lsls	r3, r1, #6
 8004e82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e86:	0182      	lsls	r2, r0, #6
 8004e88:	1a12      	subs	r2, r2, r0
 8004e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e8e:	f04f 0000 	mov.w	r0, #0
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	00d9      	lsls	r1, r3, #3
 8004e98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e9c:	00d0      	lsls	r0, r2, #3
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	1912      	adds	r2, r2, r4
 8004ea4:	eb45 0303 	adc.w	r3, r5, r3
 8004ea8:	f04f 0000 	mov.w	r0, #0
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	0299      	lsls	r1, r3, #10
 8004eb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004eb6:	0290      	lsls	r0, r2, #10
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	f7fb fec6 	bl	8000c58 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	3301      	adds	r3, #1
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	60bb      	str	r3, [r7, #8]
      break;
 8004eee:	e002      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ef2:	60bb      	str	r3, [r7, #8]
      break;
 8004ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800
 8004f08:	00f42400 	.word	0x00f42400
 8004f0c:	007a1200 	.word	0x007a1200

08004f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f16:	681b      	ldr	r3, [r3, #0]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000038 	.word	0x20000038

08004f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f2c:	f7ff fff0 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f30:	4602      	mov	r2, r0
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	0a9b      	lsrs	r3, r3, #10
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	4903      	ldr	r1, [pc, #12]	; (8004f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f3e:	5ccb      	ldrb	r3, [r1, r3]
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	0800f828 	.word	0x0800f828

08004f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f54:	f7ff ffdc 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0b5b      	lsrs	r3, r3, #13
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4903      	ldr	r1, [pc, #12]	; (8004f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	0800f828 	.word	0x0800f828

08004f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e03f      	b.n	800500a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd fc9c 	bl	80028dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	; 0x24
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f929 	bl	8005214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695a      	ldr	r2, [r3, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b08a      	sub	sp, #40	; 0x28
 8005016:	af02      	add	r7, sp, #8
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	4613      	mov	r3, r2
 8005020:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b20      	cmp	r3, #32
 8005030:	d17c      	bne.n	800512c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_UART_Transmit+0x2c>
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e075      	b.n	800512e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_UART_Transmit+0x3e>
 800504c:	2302      	movs	r3, #2
 800504e:	e06e      	b.n	800512e <HAL_UART_Transmit+0x11c>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2221      	movs	r2, #33	; 0x21
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005066:	f7fd fd85 	bl	8002b74 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	88fa      	ldrh	r2, [r7, #6]
 8005076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005080:	d108      	bne.n	8005094 <HAL_UART_Transmit+0x82>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e003      	b.n	800509c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050a4:	e02a      	b.n	80050fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f840 	bl	8005136 <UART_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e036      	b.n	800512e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	3302      	adds	r3, #2
 80050da:	61bb      	str	r3, [r7, #24]
 80050dc:	e007      	b.n	80050ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	3301      	adds	r3, #1
 80050ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1cf      	bne.n	80050a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2200      	movs	r2, #0
 800510e:	2140      	movs	r1, #64	; 0x40
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f810 	bl	8005136 <UART_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e006      	b.n	800512e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b090      	sub	sp, #64	; 0x40
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4613      	mov	r3, r2
 8005144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005146:	e050      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d04c      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0x30>
 8005156:	f7fd fd0d 	bl	8002b74 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005162:	429a      	cmp	r2, r3
 8005164:	d241      	bcs.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800517c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005186:	637a      	str	r2, [r7, #52]	; 0x34
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800518c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	613b      	str	r3, [r7, #16]
   return(result);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ba:	623a      	str	r2, [r7, #32]
 80051bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	69f9      	ldr	r1, [r7, #28]
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e5      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e00f      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	bf0c      	ite	eq
 80051fa:	2301      	moveq	r3, #1
 80051fc:	2300      	movne	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	429a      	cmp	r2, r3
 8005206:	d09f      	beq.n	8005148 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3740      	adds	r7, #64	; 0x40
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	b09f      	sub	sp, #124	; 0x7c
 800521a:	af00      	add	r7, sp, #0
 800521c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	68d9      	ldr	r1, [r3, #12]
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	ea40 0301 	orr.w	r3, r0, r1
 8005234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	431a      	orrs	r2, r3
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	431a      	orrs	r2, r3
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4313      	orrs	r3, r2
 800524c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800524e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005258:	f021 010c 	bic.w	r1, r1, #12
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005262:	430b      	orrs	r3, r1
 8005264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	6999      	ldr	r1, [r3, #24]
 8005274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	ea40 0301 	orr.w	r3, r0, r1
 800527c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4bc5      	ldr	r3, [pc, #788]	; (8005598 <UART_SetConfig+0x384>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d004      	beq.n	8005292 <UART_SetConfig+0x7e>
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4bc3      	ldr	r3, [pc, #780]	; (800559c <UART_SetConfig+0x388>)
 800528e:	429a      	cmp	r2, r3
 8005290:	d103      	bne.n	800529a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005292:	f7ff fe5d 	bl	8004f50 <HAL_RCC_GetPCLK2Freq>
 8005296:	6778      	str	r0, [r7, #116]	; 0x74
 8005298:	e002      	b.n	80052a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529a:	f7ff fe45 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 800529e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	f040 80b6 	bne.w	8005418 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ae:	461c      	mov	r4, r3
 80052b0:	f04f 0500 	mov.w	r5, #0
 80052b4:	4622      	mov	r2, r4
 80052b6:	462b      	mov	r3, r5
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	6439      	str	r1, [r7, #64]	; 0x40
 80052bc:	415b      	adcs	r3, r3
 80052be:	647b      	str	r3, [r7, #68]	; 0x44
 80052c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052c4:	1912      	adds	r2, r2, r4
 80052c6:	eb45 0303 	adc.w	r3, r5, r3
 80052ca:	f04f 0000 	mov.w	r0, #0
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	00d9      	lsls	r1, r3, #3
 80052d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d8:	00d0      	lsls	r0, r2, #3
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	1911      	adds	r1, r2, r4
 80052e0:	6639      	str	r1, [r7, #96]	; 0x60
 80052e2:	416b      	adcs	r3, r5
 80052e4:	667b      	str	r3, [r7, #100]	; 0x64
 80052e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80052f4:	415b      	adcs	r3, r3
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005300:	f7fb fcaa 	bl	8000c58 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4ba5      	ldr	r3, [pc, #660]	; (80055a0 <UART_SetConfig+0x38c>)
 800530a:	fba3 2302 	umull	r2, r3, r3, r2
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	011e      	lsls	r6, r3, #4
 8005312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005314:	461c      	mov	r4, r3
 8005316:	f04f 0500 	mov.w	r5, #0
 800531a:	4622      	mov	r2, r4
 800531c:	462b      	mov	r3, r5
 800531e:	1891      	adds	r1, r2, r2
 8005320:	6339      	str	r1, [r7, #48]	; 0x30
 8005322:	415b      	adcs	r3, r3
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
 8005326:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800532a:	1912      	adds	r2, r2, r4
 800532c:	eb45 0303 	adc.w	r3, r5, r3
 8005330:	f04f 0000 	mov.w	r0, #0
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	00d9      	lsls	r1, r3, #3
 800533a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800533e:	00d0      	lsls	r0, r2, #3
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	1911      	adds	r1, r2, r4
 8005346:	65b9      	str	r1, [r7, #88]	; 0x58
 8005348:	416b      	adcs	r3, r5
 800534a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	461a      	mov	r2, r3
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	1891      	adds	r1, r2, r2
 8005358:	62b9      	str	r1, [r7, #40]	; 0x28
 800535a:	415b      	adcs	r3, r3
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005362:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005366:	f7fb fc77 	bl	8000c58 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b8c      	ldr	r3, [pc, #560]	; (80055a0 <UART_SetConfig+0x38c>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a87      	ldr	r2, [pc, #540]	; (80055a0 <UART_SetConfig+0x38c>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005390:	441e      	add	r6, r3
 8005392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005394:	4618      	mov	r0, r3
 8005396:	f04f 0100 	mov.w	r1, #0
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	1894      	adds	r4, r2, r2
 80053a0:	623c      	str	r4, [r7, #32]
 80053a2:	415b      	adcs	r3, r3
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
 80053a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053aa:	1812      	adds	r2, r2, r0
 80053ac:	eb41 0303 	adc.w	r3, r1, r3
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	f04f 0500 	mov.w	r5, #0
 80053b8:	00dd      	lsls	r5, r3, #3
 80053ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053be:	00d4      	lsls	r4, r2, #3
 80053c0:	4622      	mov	r2, r4
 80053c2:	462b      	mov	r3, r5
 80053c4:	1814      	adds	r4, r2, r0
 80053c6:	653c      	str	r4, [r7, #80]	; 0x50
 80053c8:	414b      	adcs	r3, r1
 80053ca:	657b      	str	r3, [r7, #84]	; 0x54
 80053cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	461a      	mov	r2, r3
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	61b9      	str	r1, [r7, #24]
 80053da:	415b      	adcs	r3, r3
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053e6:	f7fb fc37 	bl	8000c58 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b6c      	ldr	r3, [pc, #432]	; (80055a0 <UART_SetConfig+0x38c>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a67      	ldr	r2, [pc, #412]	; (80055a0 <UART_SetConfig+0x38c>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 0207 	and.w	r2, r3, #7
 800540e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4432      	add	r2, r6
 8005414:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005416:	e0b9      	b.n	800558c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800541a:	461c      	mov	r4, r3
 800541c:	f04f 0500 	mov.w	r5, #0
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	1891      	adds	r1, r2, r2
 8005426:	6139      	str	r1, [r7, #16]
 8005428:	415b      	adcs	r3, r3
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005430:	1912      	adds	r2, r2, r4
 8005432:	eb45 0303 	adc.w	r3, r5, r3
 8005436:	f04f 0000 	mov.w	r0, #0
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	00d9      	lsls	r1, r3, #3
 8005440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005444:	00d0      	lsls	r0, r2, #3
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	eb12 0804 	adds.w	r8, r2, r4
 800544e:	eb43 0905 	adc.w	r9, r3, r5
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	008b      	lsls	r3, r1, #2
 8005466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800546a:	0082      	lsls	r2, r0, #2
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fb fbf2 	bl	8000c58 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4b49      	ldr	r3, [pc, #292]	; (80055a0 <UART_SetConfig+0x38c>)
 800547a:	fba3 2302 	umull	r2, r3, r3, r2
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	011e      	lsls	r6, r3, #4
 8005482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005484:	4618      	mov	r0, r3
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	1894      	adds	r4, r2, r2
 8005490:	60bc      	str	r4, [r7, #8]
 8005492:	415b      	adcs	r3, r3
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800549a:	1812      	adds	r2, r2, r0
 800549c:	eb41 0303 	adc.w	r3, r1, r3
 80054a0:	f04f 0400 	mov.w	r4, #0
 80054a4:	f04f 0500 	mov.w	r5, #0
 80054a8:	00dd      	lsls	r5, r3, #3
 80054aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054ae:	00d4      	lsls	r4, r2, #3
 80054b0:	4622      	mov	r2, r4
 80054b2:	462b      	mov	r3, r5
 80054b4:	1814      	adds	r4, r2, r0
 80054b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80054b8:	414b      	adcs	r3, r1
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	008b      	lsls	r3, r1, #2
 80054d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054d4:	0082      	lsls	r2, r0, #2
 80054d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054da:	f7fb fbbd 	bl	8000c58 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4b2f      	ldr	r3, [pc, #188]	; (80055a0 <UART_SetConfig+0x38c>)
 80054e4:	fba3 1302 	umull	r1, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	2164      	movs	r1, #100	; 0x64
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	3332      	adds	r3, #50	; 0x32
 80054f6:	4a2a      	ldr	r2, [pc, #168]	; (80055a0 <UART_SetConfig+0x38c>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005502:	441e      	add	r6, r3
 8005504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005506:	4618      	mov	r0, r3
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	1894      	adds	r4, r2, r2
 8005512:	603c      	str	r4, [r7, #0]
 8005514:	415b      	adcs	r3, r3
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551c:	1812      	adds	r2, r2, r0
 800551e:	eb41 0303 	adc.w	r3, r1, r3
 8005522:	f04f 0400 	mov.w	r4, #0
 8005526:	f04f 0500 	mov.w	r5, #0
 800552a:	00dd      	lsls	r5, r3, #3
 800552c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005530:	00d4      	lsls	r4, r2, #3
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	eb12 0a00 	adds.w	sl, r2, r0
 800553a:	eb43 0b01 	adc.w	fp, r3, r1
 800553e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4618      	mov	r0, r3
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	008b      	lsls	r3, r1, #2
 8005552:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005556:	0082      	lsls	r2, r0, #2
 8005558:	4650      	mov	r0, sl
 800555a:	4659      	mov	r1, fp
 800555c:	f7fb fb7c 	bl	8000c58 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <UART_SetConfig+0x38c>)
 8005566:	fba3 1302 	umull	r1, r3, r3, r2
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2164      	movs	r1, #100	; 0x64
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	3332      	adds	r3, #50	; 0x32
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <UART_SetConfig+0x38c>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4432      	add	r2, r6
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	377c      	adds	r7, #124	; 0x7c
 8005590:	46bd      	mov	sp, r7
 8005592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005596:	bf00      	nop
 8005598:	40011000 	.word	0x40011000
 800559c:	40011400 	.word	0x40011400
 80055a0:	51eb851f 	.word	0x51eb851f

080055a4 <__NVIC_SetPriority>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db0a      	blt.n	80055ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	490c      	ldr	r1, [pc, #48]	; (80055f0 <__NVIC_SetPriority+0x4c>)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	0112      	lsls	r2, r2, #4
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	440b      	add	r3, r1
 80055c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055cc:	e00a      	b.n	80055e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4908      	ldr	r1, [pc, #32]	; (80055f4 <__NVIC_SetPriority+0x50>)
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	3b04      	subs	r3, #4
 80055dc:	0112      	lsls	r2, r2, #4
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	440b      	add	r3, r1
 80055e2:	761a      	strb	r2, [r3, #24]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000e100 	.word	0xe000e100
 80055f4:	e000ed00 	.word	0xe000ed00

080055f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055fc:	2100      	movs	r1, #0
 80055fe:	f06f 0004 	mvn.w	r0, #4
 8005602:	f7ff ffcf 	bl	80055a4 <__NVIC_SetPriority>
#endif
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005612:	f3ef 8305 	mrs	r3, IPSR
 8005616:	603b      	str	r3, [r7, #0]
  return(result);
 8005618:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800561e:	f06f 0305 	mvn.w	r3, #5
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	e00c      	b.n	8005640 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <osKernelInitialize+0x44>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <osKernelInitialize+0x44>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005634:	2300      	movs	r3, #0
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	e002      	b.n	8005640 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800563a:	f04f 33ff 	mov.w	r3, #4294967295
 800563e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005640:	687b      	ldr	r3, [r7, #4]
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	200024d0 	.word	0x200024d0

08005654 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800565a:	f3ef 8305 	mrs	r3, IPSR
 800565e:	603b      	str	r3, [r7, #0]
  return(result);
 8005660:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005666:	f06f 0305 	mvn.w	r3, #5
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	e010      	b.n	8005690 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <osKernelStart+0x48>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d109      	bne.n	800568a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005676:	f7ff ffbf 	bl	80055f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800567a:	4b08      	ldr	r3, [pc, #32]	; (800569c <osKernelStart+0x48>)
 800567c:	2202      	movs	r2, #2
 800567e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005680:	f001 fef8 	bl	8007474 <vTaskStartScheduler>
      stat = osOK;
 8005684:	2300      	movs	r3, #0
 8005686:	607b      	str	r3, [r7, #4]
 8005688:	e002      	b.n	8005690 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005690:	687b      	ldr	r3, [r7, #4]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200024d0 	.word	0x200024d0

080056a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af04      	add	r7, sp, #16
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b0:	f3ef 8305 	mrs	r3, IPSR
 80056b4:	617b      	str	r3, [r7, #20]
  return(result);
 80056b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d17e      	bne.n	80057ba <osThreadNew+0x11a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d07b      	beq.n	80057ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056c6:	2318      	movs	r3, #24
 80056c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d045      	beq.n	8005766 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <osThreadNew+0x48>
        name = attr->name;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <osThreadNew+0x6e>
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b38      	cmp	r3, #56	; 0x38
 8005700:	d805      	bhi.n	800570e <osThreadNew+0x6e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <osThreadNew+0x72>
        return (NULL);
 800570e:	2300      	movs	r3, #0
 8005710:	e054      	b.n	80057bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00e      	beq.n	8005748 <osThreadNew+0xa8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b5b      	cmp	r3, #91	; 0x5b
 8005730:	d90a      	bls.n	8005748 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <osThreadNew+0xa8>
        mem = 1;
 8005742:	2301      	movs	r3, #1
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	e010      	b.n	800576a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10c      	bne.n	800576a <osThreadNew+0xca>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d108      	bne.n	800576a <osThreadNew+0xca>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <osThreadNew+0xca>
          mem = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e001      	b.n	800576a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d110      	bne.n	8005792 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005778:	9202      	str	r2, [sp, #8]
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f001 fc9e 	bl	80070c8 <xTaskCreateStatic>
 800578c:	4603      	mov	r3, r0
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	e013      	b.n	80057ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d110      	bne.n	80057ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	b29a      	uxth	r2, r3
 800579c:	f107 0310 	add.w	r3, r7, #16
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f001 fce9 	bl	8007182 <xTaskCreate>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d001      	beq.n	80057ba <osThreadNew+0x11a>
            hTask = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057ba:	693b      	ldr	r3, [r7, #16]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3728      	adds	r7, #40	; 0x28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057cc:	f3ef 8305 	mrs	r3, IPSR
 80057d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80057d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <osDelay+0x1c>
    stat = osErrorISR;
 80057d8:	f06f 0305 	mvn.w	r3, #5
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e007      	b.n	80057f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fe0e 	bl	800740c <vTaskDelay>
    }
  }

  return (stat);
 80057f0:	68fb      	ldr	r3, [r7, #12]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b088      	sub	sp, #32
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005806:	f3ef 8305 	mrs	r3, IPSR
 800580a:	60bb      	str	r3, [r7, #8]
  return(result);
 800580c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800580e:	2b00      	cmp	r3, #0
 8005810:	d174      	bne.n	80058fc <osMutexNew+0x102>
    if (attr != NULL) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e001      	b.n	8005824 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <osMutexNew+0x3a>
      rmtx = 1U;
 800582e:	2301      	movs	r3, #1
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e001      	b.n	8005838 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d15c      	bne.n	80058fc <osMutexNew+0x102>
      mem = -1;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d015      	beq.n	800587a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <osMutexNew+0x6a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b4f      	cmp	r3, #79	; 0x4f
 800585c:	d902      	bls.n	8005864 <osMutexNew+0x6a>
          mem = 1;
 800585e:	2301      	movs	r3, #1
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	e00c      	b.n	800587e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d108      	bne.n	800587e <osMutexNew+0x84>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <osMutexNew+0x84>
            mem = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	e001      	b.n	800587e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d112      	bne.n	80058aa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4619      	mov	r1, r3
 8005890:	2004      	movs	r0, #4
 8005892:	f000 fd14 	bl	80062be <xQueueCreateMutexStatic>
 8005896:	61f8      	str	r0, [r7, #28]
 8005898:	e016      	b.n	80058c8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4619      	mov	r1, r3
 80058a0:	2001      	movs	r0, #1
 80058a2:	f000 fd0c 	bl	80062be <xQueueCreateMutexStatic>
 80058a6:	61f8      	str	r0, [r7, #28]
 80058a8:	e00e      	b.n	80058c8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80058b6:	2004      	movs	r0, #4
 80058b8:	f000 fce9 	bl	800628e <xQueueCreateMutex>
 80058bc:	61f8      	str	r0, [r7, #28]
 80058be:	e003      	b.n	80058c8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80058c0:	2001      	movs	r0, #1
 80058c2:	f000 fce4 	bl	800628e <xQueueCreateMutex>
 80058c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <osMutexNew+0xee>
        if (attr != NULL) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <osMutexNew+0xe2>
          name = attr->name;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e001      	b.n	80058e0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	69f8      	ldr	r0, [r7, #28]
 80058e4:	f001 fb68 	bl	8006fb8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d006      	beq.n	80058fc <osMutexNew+0x102>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80058fc:	69fb      	ldr	r3, [r7, #28]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005924:	f3ef 8305 	mrs	r3, IPSR
 8005928:	60bb      	str	r3, [r7, #8]
  return(result);
 800592a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005930:	f06f 0305 	mvn.w	r3, #5
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e02c      	b.n	8005992 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800593e:	f06f 0303 	mvn.w	r3, #3
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e025      	b.n	8005992 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6938      	ldr	r0, [r7, #16]
 8005950:	f000 fd04 	bl	800635c <xQueueTakeMutexRecursive>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d01b      	beq.n	8005992 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005960:	f06f 0301 	mvn.w	r3, #1
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	e014      	b.n	8005992 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005968:	f06f 0302 	mvn.w	r3, #2
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e010      	b.n	8005992 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6938      	ldr	r0, [r7, #16]
 8005974:	f001 f80c 	bl	8006990 <xQueueSemaphoreTake>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d009      	beq.n	8005992 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005984:	f06f 0301 	mvn.w	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e002      	b.n	8005992 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800598c:	f06f 0302 	mvn.w	r3, #2
 8005990:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005992:	697b      	ldr	r3, [r7, #20]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b8:	f3ef 8305 	mrs	r3, IPSR
 80059bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80059be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <osMutexRelease+0x30>
    stat = osErrorISR;
 80059c4:	f06f 0305 	mvn.w	r3, #5
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e01f      	b.n	8005a0c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80059d2:	f06f 0303 	mvn.w	r3, #3
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e018      	b.n	8005a0c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80059e0:	6938      	ldr	r0, [r7, #16]
 80059e2:	f000 fc87 	bl	80062f4 <xQueueGiveMutexRecursive>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d00f      	beq.n	8005a0c <osMutexRelease+0x70>
        stat = osErrorResource;
 80059ec:	f06f 0302 	mvn.w	r3, #2
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e00b      	b.n	8005a0c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80059f4:	2300      	movs	r3, #0
 80059f6:	2200      	movs	r2, #0
 80059f8:	2100      	movs	r1, #0
 80059fa:	6938      	ldr	r0, [r7, #16]
 80059fc:	f000 fd4e 	bl	800649c <xQueueGenericSend>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d002      	beq.n	8005a0c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a06:	f06f 0302 	mvn.w	r3, #2
 8005a0a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a0c:	697b      	ldr	r3, [r7, #20]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b08a      	sub	sp, #40	; 0x28
 8005a1a:	af02      	add	r7, sp, #8
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a26:	f3ef 8305 	mrs	r3, IPSR
 8005a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8005a2c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d175      	bne.n	8005b1e <osSemaphoreNew+0x108>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d072      	beq.n	8005b1e <osSemaphoreNew+0x108>
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d86e      	bhi.n	8005b1e <osSemaphoreNew+0x108>
    mem = -1;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <osSemaphoreNew+0x4c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b4f      	cmp	r3, #79	; 0x4f
 8005a5a:	d902      	bls.n	8005a62 <osSemaphoreNew+0x4c>
        mem = 1;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e00c      	b.n	8005a7c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d108      	bne.n	8005a7c <osSemaphoreNew+0x66>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <osSemaphoreNew+0x66>
          mem = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	e001      	b.n	8005a7c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d04c      	beq.n	8005b1e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d128      	bne.n	8005adc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d10a      	bne.n	8005aa6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2203      	movs	r2, #3
 8005a96:	9200      	str	r2, [sp, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f000 fb07 	bl	80060b0 <xQueueGenericCreateStatic>
 8005aa2:	61f8      	str	r0, [r7, #28]
 8005aa4:	e005      	b.n	8005ab2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	2001      	movs	r0, #1
 8005aac:	f000 fb78 	bl	80061a0 <xQueueGenericCreate>
 8005ab0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d022      	beq.n	8005afe <osSemaphoreNew+0xe8>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01f      	beq.n	8005afe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	69f8      	ldr	r0, [r7, #28]
 8005ac6:	f000 fce9 	bl	800649c <xQueueGenericSend>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d016      	beq.n	8005afe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005ad0:	69f8      	ldr	r0, [r7, #28]
 8005ad2:	f001 f925 	bl	8006d20 <vQueueDelete>
            hSemaphore = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	e010      	b.n	8005afe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d108      	bne.n	8005af4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fc6c 	bl	80063c8 <xQueueCreateCountingSemaphoreStatic>
 8005af0:	61f8      	str	r0, [r7, #28]
 8005af2:	e004      	b.n	8005afe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fc9d 	bl	8006436 <xQueueCreateCountingSemaphore>
 8005afc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	e001      	b.n	8005b16 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	69f8      	ldr	r0, [r7, #28]
 8005b1a:	f001 fa4d 	bl	8006fb8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b1e:	69fb      	ldr	r3, [r7, #28]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b38:	f3ef 8305 	mrs	r3, IPSR
 8005b3c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d15f      	bne.n	8005c04 <osMessageQueueNew+0xdc>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d05c      	beq.n	8005c04 <osMessageQueueNew+0xdc>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d059      	beq.n	8005c04 <osMessageQueueNew+0xdc>
    mem = -1;
 8005b50:	f04f 33ff 	mov.w	r3, #4294967295
 8005b54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d029      	beq.n	8005bb0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d012      	beq.n	8005b8a <osMessageQueueNew+0x62>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	2b4f      	cmp	r3, #79	; 0x4f
 8005b6a:	d90e      	bls.n	8005b8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00a      	beq.n	8005b8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <osMessageQueueNew+0x62>
        mem = 1;
 8005b84:	2301      	movs	r3, #1
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	e014      	b.n	8005bb4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d110      	bne.n	8005bb4 <osMessageQueueNew+0x8c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10c      	bne.n	8005bb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d108      	bne.n	8005bb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <osMessageQueueNew+0x8c>
          mem = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e001      	b.n	8005bb4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d10b      	bne.n	8005bd2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	9100      	str	r1, [sp, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 fa71 	bl	80060b0 <xQueueGenericCreateStatic>
 8005bce:	61f8      	str	r0, [r7, #28]
 8005bd0:	e008      	b.n	8005be4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d105      	bne.n	8005be4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fadf 	bl	80061a0 <xQueueGenericCreate>
 8005be2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00c      	beq.n	8005c04 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e001      	b.n	8005bfc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	69f8      	ldr	r0, [r7, #28]
 8005c00:	f001 f9da 	bl	8006fb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c04:	69fb      	ldr	r3, [r7, #28]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c28:	f3ef 8305 	mrs	r3, IPSR
 8005c2c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d028      	beq.n	8005c86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <osMessageQueuePut+0x36>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <osMessageQueuePut+0x36>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005c46:	f06f 0303 	mvn.w	r3, #3
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	e038      	b.n	8005cc0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005c52:	f107 0210 	add.w	r2, r7, #16
 8005c56:	2300      	movs	r3, #0
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	69b8      	ldr	r0, [r7, #24]
 8005c5c:	f000 fd1c 	bl	8006698 <xQueueGenericSendFromISR>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d003      	beq.n	8005c6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005c66:	f06f 0302 	mvn.w	r3, #2
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	e028      	b.n	8005cc0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d025      	beq.n	8005cc0 <osMessageQueuePut+0xb0>
 8005c74:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <osMessageQueuePut+0xbc>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	e01c      	b.n	8005cc0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <osMessageQueuePut+0x82>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005c92:	f06f 0303 	mvn.w	r3, #3
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	e012      	b.n	8005cc0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	69b8      	ldr	r0, [r7, #24]
 8005ca2:	f000 fbfb 	bl	800649c <xQueueGenericSend>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d009      	beq.n	8005cc0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005cb2:	f06f 0301 	mvn.w	r3, #1
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	e002      	b.n	8005cc0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005cba:	f06f 0302 	mvn.w	r3, #2
 8005cbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	e000ed04 	.word	0xe000ed04

08005cd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ce6:	f3ef 8305 	mrs	r3, IPSR
 8005cea:	617b      	str	r3, [r7, #20]
  return(result);
 8005cec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d028      	beq.n	8005d44 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <osMessageQueueGet+0x34>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <osMessageQueueGet+0x34>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005d04:	f06f 0303 	mvn.w	r3, #3
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e037      	b.n	8005d7c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005d10:	f107 0310 	add.w	r3, r7, #16
 8005d14:	461a      	mov	r2, r3
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	69b8      	ldr	r0, [r7, #24]
 8005d1a:	f000 ff45 	bl	8006ba8 <xQueueReceiveFromISR>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d003      	beq.n	8005d2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005d24:	f06f 0302 	mvn.w	r3, #2
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	e027      	b.n	8005d7c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d024      	beq.n	8005d7c <osMessageQueueGet+0xac>
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <osMessageQueueGet+0xb8>)
 8005d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	e01b      	b.n	8005d7c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <osMessageQueueGet+0x80>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d103      	bne.n	8005d58 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005d50:	f06f 0303 	mvn.w	r3, #3
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	e011      	b.n	8005d7c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	69b8      	ldr	r0, [r7, #24]
 8005d5e:	f000 fd37 	bl	80067d0 <xQueueReceive>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d009      	beq.n	8005d7c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005d6e:	f06f 0301 	mvn.w	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
 8005d74:	e002      	b.n	8005d7c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005d76:	f06f 0302 	mvn.w	r3, #2
 8005d7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d7c:	69fb      	ldr	r3, [r7, #28]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e00e      	b.n	8005dc2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da4:	f3ef 8305 	mrs	r3, IPSR
 8005da8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005daa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005db0:	6938      	ldr	r0, [r7, #16]
 8005db2:	f000 ff97 	bl	8006ce4 <uxQueueMessagesWaitingFromISR>
 8005db6:	6178      	str	r0, [r7, #20]
 8005db8:	e003      	b.n	8005dc2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005dba:	6938      	ldr	r0, [r7, #16]
 8005dbc:	f000 ff74 	bl	8006ca8 <uxQueueMessagesWaiting>
 8005dc0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005dc2:	697b      	ldr	r3, [r7, #20]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dd8:	f3ef 8305 	mrs	r3, IPSR
 8005ddc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dde:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8005de4:	f06f 0305 	mvn.w	r3, #5
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	e00c      	b.n	8005e06 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8005df2:	f06f 0303 	mvn.w	r3, #3
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e005      	b.n	8005e06 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6938      	ldr	r0, [r7, #16]
 8005e02:	f000 f8ed 	bl	8005fe0 <xQueueGenericReset>
  }

  return (stat);
 8005e06:	697b      	ldr	r3, [r7, #20]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a07      	ldr	r2, [pc, #28]	; (8005e3c <vApplicationGetIdleTaskMemory+0x2c>)
 8005e20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4a06      	ldr	r2, [pc, #24]	; (8005e40 <vApplicationGetIdleTaskMemory+0x30>)
 8005e26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2280      	movs	r2, #128	; 0x80
 8005e2c:	601a      	str	r2, [r3, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	200024d4 	.word	0x200024d4
 8005e40:	20002530 	.word	0x20002530

08005e44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	4a06      	ldr	r2, [pc, #24]	; (8005e74 <vApplicationGetTimerTaskMemory+0x30>)
 8005e5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	20002730 	.word	0x20002730
 8005e74:	2000278c 	.word	0x2000278c

08005e78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f103 0208 	add.w	r2, r3, #8
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f103 0208 	add.w	r2, r3, #8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f103 0208 	add.w	r2, r3, #8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d103      	bne.n	8005f3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e00c      	b.n	8005f54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e002      	b.n	8005f48 <vListInsert+0x2e>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d2f6      	bcs.n	8005f42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	601a      	str	r2, [r3, #0]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6892      	ldr	r2, [r2, #8]
 8005fa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6852      	ldr	r2, [r2, #4]
 8005fac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d103      	bne.n	8005fc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800600a:	f002 fce3 	bl	80089d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	441a      	add	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	3b01      	subs	r3, #1
 800603c:	68f9      	ldr	r1, [r7, #12]
 800603e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	441a      	add	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22ff      	movs	r2, #255	; 0xff
 800604e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	22ff      	movs	r2, #255	; 0xff
 8006056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d114      	bne.n	800608a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01a      	beq.n	800609e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3310      	adds	r3, #16
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fc8b 	bl	8007988 <xTaskRemoveFromEventList>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d012      	beq.n	800609e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006078:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <xQueueGenericReset+0xcc>)
 800607a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	e009      	b.n	800609e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3310      	adds	r3, #16
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fef2 	bl	8005e78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff feed 	bl	8005e78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800609e:	f002 fcc9 	bl	8008a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060a2:	2301      	movs	r3, #1
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	e000ed04 	.word	0xe000ed04

080060b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08e      	sub	sp, #56	; 0x38
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <xQueueGenericCreateStatic+0x52>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <xQueueGenericCreateStatic+0x56>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <xQueueGenericCreateStatic+0x58>
 8006106:	2300      	movs	r3, #0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	623b      	str	r3, [r7, #32]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <xQueueGenericCreateStatic+0x7e>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <xQueueGenericCreateStatic+0x82>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueGenericCreateStatic+0x84>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	61fb      	str	r3, [r7, #28]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800614e:	2350      	movs	r3, #80	; 0x50
 8006150:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b50      	cmp	r3, #80	; 0x50
 8006156:	d00a      	beq.n	800616e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	61bb      	str	r3, [r7, #24]
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800616e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006182:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f83f 	bl	8006214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	; 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	; 0x28
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	613b      	str	r3, [r7, #16]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
 80061d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3350      	adds	r3, #80	; 0x50
 80061d8:	4618      	mov	r0, r3
 80061da:	f002 fd1d 	bl	8008c18 <pvPortMalloc>
 80061de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d011      	beq.n	800620a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	3350      	adds	r3, #80	; 0x50
 80061ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061f8:	79fa      	ldrb	r2, [r7, #7]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	4613      	mov	r3, r2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f805 	bl	8006214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800620a:	69bb      	ldr	r3, [r7, #24]
	}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e002      	b.n	8006236 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006242:	2101      	movs	r1, #1
 8006244:	69b8      	ldr	r0, [r7, #24]
 8006246:	f7ff fecb 	bl	8005fe0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800627a:	2300      	movs	r3, #0
 800627c:	2200      	movs	r2, #0
 800627e:	2100      	movs	r1, #0
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f90b 	bl	800649c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800628e:	b580      	push	{r7, lr}
 8006290:	b086      	sub	sp, #24
 8006292:	af00      	add	r7, sp, #0
 8006294:	4603      	mov	r3, r0
 8006296:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	461a      	mov	r2, r3
 80062a4:	6939      	ldr	r1, [r7, #16]
 80062a6:	6978      	ldr	r0, [r7, #20]
 80062a8:	f7ff ff7a 	bl	80061a0 <xQueueGenericCreate>
 80062ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff ffd3 	bl	800625a <prvInitialiseMutex>

		return xNewQueue;
 80062b4:	68fb      	ldr	r3, [r7, #12]
	}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b088      	sub	sp, #32
 80062c2:	af02      	add	r7, sp, #8
 80062c4:	4603      	mov	r3, r0
 80062c6:	6039      	str	r1, [r7, #0]
 80062c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062ca:	2301      	movs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2200      	movs	r2, #0
 80062da:	6939      	ldr	r1, [r7, #16]
 80062dc:	6978      	ldr	r0, [r7, #20]
 80062de:	f7ff fee7 	bl	80060b0 <xQueueGenericCreateStatic>
 80062e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff ffb8 	bl	800625a <prvInitialiseMutex>

		return xNewQueue;
 80062ea:	68fb      	ldr	r3, [r7, #12]
	}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60fb      	str	r3, [r7, #12]
}
 8006318:	bf00      	nop
 800631a:	e7fe      	b.n	800631a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	689c      	ldr	r4, [r3, #8]
 8006320:	f001 fcf0 	bl	8007d04 <xTaskGetCurrentTaskHandle>
 8006324:	4603      	mov	r3, r0
 8006326:	429c      	cmp	r4, r3
 8006328:	d111      	bne.n	800634e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	1e5a      	subs	r2, r3, #1
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800633c:	2300      	movs	r3, #0
 800633e:	2200      	movs	r2, #0
 8006340:	2100      	movs	r1, #0
 8006342:	6938      	ldr	r0, [r7, #16]
 8006344:	f000 f8aa 	bl	800649c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006348:	2301      	movs	r3, #1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e001      	b.n	8006352 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006352:	697b      	ldr	r3, [r7, #20]
	}
 8006354:	4618      	mov	r0, r3
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd90      	pop	{r4, r7, pc}

0800635c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800635c:	b590      	push	{r4, r7, lr}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	689c      	ldr	r4, [r3, #8]
 800638a:	f001 fcbb 	bl	8007d04 <xTaskGetCurrentTaskHandle>
 800638e:	4603      	mov	r3, r0
 8006390:	429c      	cmp	r4, r3
 8006392:	d107      	bne.n	80063a4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800639e:	2301      	movs	r3, #1
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e00c      	b.n	80063be <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6938      	ldr	r0, [r7, #16]
 80063a8:	f000 faf2 	bl	8006990 <xQueueSemaphoreTake>
 80063ac:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d004      	beq.n	80063be <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80063be:	697b      	ldr	r3, [r7, #20]
	}
 80063c0:	4618      	mov	r0, r3
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd90      	pop	{r4, r7, pc}

080063c8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	61bb      	str	r3, [r7, #24]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d90a      	bls.n	800640e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	617b      	str	r3, [r7, #20]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800640e:	2302      	movs	r3, #2
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	2100      	movs	r1, #0
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff fe49 	bl	80060b0 <xQueueGenericCreateStatic>
 800641e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800642c:	69fb      	ldr	r3, [r7, #28]
	}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006436:	b580      	push	{r7, lr}
 8006438:	b086      	sub	sp, #24
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	613b      	str	r3, [r7, #16]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d90a      	bls.n	800647a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800647a:	2202      	movs	r2, #2
 800647c:	2100      	movs	r1, #0
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff fe8e 	bl	80061a0 <xQueueGenericCreate>
 8006484:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006492:	697b      	ldr	r3, [r7, #20]
	}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	; 0x38
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064aa:	2300      	movs	r3, #0
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xQueueGenericSend+0x32>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <xQueueGenericSend+0x40>
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <xQueueGenericSend+0x44>
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <xQueueGenericSend+0x46>
 80064e0:	2300      	movs	r3, #0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <xQueueGenericSend+0x60>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d103      	bne.n	800650a <xQueueGenericSend+0x6e>
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <xQueueGenericSend+0x72>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <xQueueGenericSend+0x74>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <xQueueGenericSend+0x8e>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	623b      	str	r3, [r7, #32]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800652a:	f001 fbfb 	bl	8007d24 <xTaskGetSchedulerState>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <xQueueGenericSend+0x9e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <xQueueGenericSend+0xa2>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <xQueueGenericSend+0xa4>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <xQueueGenericSend+0xbe>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	61fb      	str	r3, [r7, #28]
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800655a:	f002 fa3b 	bl	80089d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <xQueueGenericSend+0xd4>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d129      	bne.n	80065c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	68b9      	ldr	r1, [r7, #8]
 8006574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006576:	f000 fc0e 	bl	8006d96 <prvCopyDataToQueue>
 800657a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	d010      	beq.n	80065a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	3324      	adds	r3, #36	; 0x24
 8006588:	4618      	mov	r0, r3
 800658a:	f001 f9fd 	bl	8007988 <xTaskRemoveFromEventList>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006594:	4b3f      	ldr	r3, [pc, #252]	; (8006694 <xQueueGenericSend+0x1f8>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	e00a      	b.n	80065bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065ac:	4b39      	ldr	r3, [pc, #228]	; (8006694 <xQueueGenericSend+0x1f8>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065bc:	f002 fa3a 	bl	8008a34 <vPortExitCritical>
				return pdPASS;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e063      	b.n	800668c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065ca:	f002 fa33 	bl	8008a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e05c      	b.n	800668c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065d8:	f107 0314 	add.w	r3, r7, #20
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fa37 	bl	8007a50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065e2:	2301      	movs	r3, #1
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065e6:	f002 fa25 	bl	8008a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ea:	f000 ffa9 	bl	8007540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ee:	f002 f9f1 	bl	80089d4 <vPortEnterCritical>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d103      	bne.n	8006608 <xQueueGenericSend+0x16c>
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800660e:	b25b      	sxtb	r3, r3
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d103      	bne.n	800661e <xQueueGenericSend+0x182>
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800661e:	f002 fa09 	bl	8008a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006622:	1d3a      	adds	r2, r7, #4
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f001 fa26 	bl	8007a7c <xTaskCheckForTimeOut>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d124      	bne.n	8006680 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006638:	f000 fca5 	bl	8006f86 <prvIsQueueFull>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d018      	beq.n	8006674 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	3310      	adds	r3, #16
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	4611      	mov	r1, r2
 800664a:	4618      	mov	r0, r3
 800664c:	f001 f94c 	bl	80078e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006652:	f000 fc30 	bl	8006eb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006656:	f000 ff81 	bl	800755c <xTaskResumeAll>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	f47f af7c 	bne.w	800655a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006662:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <xQueueGenericSend+0x1f8>)
 8006664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	e772      	b.n	800655a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006676:	f000 fc1e 	bl	8006eb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800667a:	f000 ff6f 	bl	800755c <xTaskResumeAll>
 800667e:	e76c      	b.n	800655a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006682:	f000 fc18 	bl	8006eb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006686:	f000 ff69 	bl	800755c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800668a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800668c:	4618      	mov	r0, r3
 800668e:	3738      	adds	r7, #56	; 0x38
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b090      	sub	sp, #64	; 0x40
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <xQueueGenericSendFromISR+0x3c>
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <xQueueGenericSendFromISR+0x40>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <xQueueGenericSendFromISR+0x42>
 80066d8:	2300      	movs	r3, #0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSendFromISR+0x6a>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <xQueueGenericSendFromISR+0x6e>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueGenericSendFromISR+0x70>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	623b      	str	r3, [r7, #32]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006722:	f002 fa39 	bl	8008b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006726:	f3ef 8211 	mrs	r2, BASEPRI
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	61fa      	str	r2, [r7, #28]
 800673c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800673e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <xQueueGenericSendFromISR+0xbc>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d12f      	bne.n	80067b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800676a:	f000 fb14 	bl	8006d96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800676e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d112      	bne.n	800679e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	3324      	adds	r3, #36	; 0x24
 8006784:	4618      	mov	r0, r3
 8006786:	f001 f8ff 	bl	8007988 <xTaskRemoveFromEventList>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00e      	beq.n	80067ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	e007      	b.n	80067ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800679e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067a2:	3301      	adds	r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	b25a      	sxtb	r2, r3
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067ae:	2301      	movs	r3, #1
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80067b2:	e001      	b.n	80067b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3740      	adds	r7, #64	; 0x40
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08c      	sub	sp, #48	; 0x30
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067dc:	2300      	movs	r3, #0
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <xQueueReceive+0x30>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	623b      	str	r3, [r7, #32]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d103      	bne.n	800680e <xQueueReceive+0x3e>
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <xQueueReceive+0x42>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <xQueueReceive+0x44>
 8006812:	2300      	movs	r3, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xQueueReceive+0x5e>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	61fb      	str	r3, [r7, #28]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800682e:	f001 fa79 	bl	8007d24 <xTaskGetSchedulerState>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <xQueueReceive+0x6e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <xQueueReceive+0x72>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <xQueueReceive+0x74>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xQueueReceive+0x8e>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	61bb      	str	r3, [r7, #24]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800685e:	f002 f8b9 	bl	80089d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d01f      	beq.n	80068ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006872:	f000 fafa 	bl	8006e6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	1e5a      	subs	r2, r3, #1
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	3310      	adds	r3, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f87c 	bl	8007988 <xTaskRemoveFromEventList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006896:	4b3d      	ldr	r3, [pc, #244]	; (800698c <xQueueReceive+0x1bc>)
 8006898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068a6:	f002 f8c5 	bl	8008a34 <vPortExitCritical>
				return pdPASS;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e069      	b.n	8006982 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068b4:	f002 f8be 	bl	8008a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e062      	b.n	8006982 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068c2:	f107 0310 	add.w	r3, r7, #16
 80068c6:	4618      	mov	r0, r3
 80068c8:	f001 f8c2 	bl	8007a50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068d0:	f002 f8b0 	bl	8008a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068d4:	f000 fe34 	bl	8007540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068d8:	f002 f87c 	bl	80089d4 <vPortEnterCritical>
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d103      	bne.n	80068f2 <xQueueReceive+0x122>
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068f8:	b25b      	sxtb	r3, r3
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	d103      	bne.n	8006908 <xQueueReceive+0x138>
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006908:	f002 f894 	bl	8008a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800690c:	1d3a      	adds	r2, r7, #4
 800690e:	f107 0310 	add.w	r3, r7, #16
 8006912:	4611      	mov	r1, r2
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f8b1 	bl	8007a7c <xTaskCheckForTimeOut>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d123      	bne.n	8006968 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006922:	f000 fb1a 	bl	8006f5a <prvIsQueueEmpty>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d017      	beq.n	800695c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	3324      	adds	r3, #36	; 0x24
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f000 ffd7 	bl	80078e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800693a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800693c:	f000 fabb 	bl	8006eb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006940:	f000 fe0c 	bl	800755c <xTaskResumeAll>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d189      	bne.n	800685e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <xQueueReceive+0x1bc>)
 800694c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	e780      	b.n	800685e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800695c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800695e:	f000 faaa 	bl	8006eb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006962:	f000 fdfb 	bl	800755c <xTaskResumeAll>
 8006966:	e77a      	b.n	800685e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696a:	f000 faa4 	bl	8006eb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800696e:	f000 fdf5 	bl	800755c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006974:	f000 faf1 	bl	8006f5a <prvIsQueueEmpty>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f43f af6f 	beq.w	800685e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006980:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006982:	4618      	mov	r0, r3
 8006984:	3730      	adds	r7, #48	; 0x30
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08e      	sub	sp, #56	; 0x38
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	61fb      	str	r3, [r7, #28]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e0:	f001 f9a0 	bl	8007d24 <xTaskGetSchedulerState>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <xQueueSemaphoreTake+0x60>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <xQueueSemaphoreTake+0x64>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <xQueueSemaphoreTake+0x66>
 80069f4:	2300      	movs	r3, #0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	61bb      	str	r3, [r7, #24]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a10:	f001 ffe0 	bl	80089d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d024      	beq.n	8006a6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	1e5a      	subs	r2, r3, #1
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a30:	f001 faee 	bl	8008010 <pvTaskIncrementMutexHeldCount>
 8006a34:	4602      	mov	r2, r0
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00f      	beq.n	8006a62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	3310      	adds	r3, #16
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 ff9e 	bl	8007988 <xTaskRemoveFromEventList>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a52:	4b54      	ldr	r3, [pc, #336]	; (8006ba4 <xQueueSemaphoreTake+0x214>)
 8006a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a62:	f001 ffe7 	bl	8008a34 <vPortExitCritical>
				return pdPASS;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e097      	b.n	8006b9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d111      	bne.n	8006a94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	617b      	str	r3, [r7, #20]
}
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a8c:	f001 ffd2 	bl	8008a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a90:	2300      	movs	r3, #0
 8006a92:	e082      	b.n	8006b9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a9a:	f107 030c 	add.w	r3, r7, #12
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 ffd6 	bl	8007a50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aa8:	f001 ffc4 	bl	8008a34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aac:	f000 fd48 	bl	8007540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ab0:	f001 ff90 	bl	80089d4 <vPortEnterCritical>
 8006ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aba:	b25b      	sxtb	r3, r3
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d103      	bne.n	8006aca <xQueueSemaphoreTake+0x13a>
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d103      	bne.n	8006ae0 <xQueueSemaphoreTake+0x150>
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae0:	f001 ffa8 	bl	8008a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ae4:	463a      	mov	r2, r7
 8006ae6:	f107 030c 	add.w	r3, r7, #12
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 ffc5 	bl	8007a7c <xTaskCheckForTimeOut>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d132      	bne.n	8006b5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006af8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006afa:	f000 fa2e 	bl	8006f5a <prvIsQueueEmpty>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d026      	beq.n	8006b52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006b0c:	f001 ff62 	bl	80089d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 f923 	bl	8007d60 <xTaskPriorityInherit>
 8006b1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006b1c:	f001 ff8a 	bl	8008a34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	3324      	adds	r3, #36	; 0x24
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	4611      	mov	r1, r2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fedd 	bl	80078e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b30:	f000 f9c1 	bl	8006eb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b34:	f000 fd12 	bl	800755c <xTaskResumeAll>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f47f af68 	bne.w	8006a10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006b40:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <xQueueSemaphoreTake+0x214>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	e75e      	b.n	8006a10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b54:	f000 f9af 	bl	8006eb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b58:	f000 fd00 	bl	800755c <xTaskResumeAll>
 8006b5c:	e758      	b.n	8006a10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b60:	f000 f9a9 	bl	8006eb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b64:	f000 fcfa 	bl	800755c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b6a:	f000 f9f6 	bl	8006f5a <prvIsQueueEmpty>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f43f af4d 	beq.w	8006a10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00d      	beq.n	8006b98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006b7c:	f001 ff2a 	bl	80089d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b82:	f000 f8f0 	bl	8006d66 <prvGetDisinheritPriorityAfterTimeout>
 8006b86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 f9bc 	bl	8007f0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b94:	f001 ff4e 	bl	8008a34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3738      	adds	r7, #56	; 0x38
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	; 0x38
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	623b      	str	r3, [r7, #32]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d103      	bne.n	8006be2 <xQueueReceiveFromISR+0x3a>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <xQueueReceiveFromISR+0x3e>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueReceiveFromISR+0x40>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	61fb      	str	r3, [r7, #28]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c02:	f001 ffc9 	bl	8008b98 <vPortValidateInterruptPriority>
	__asm volatile
 8006c06:	f3ef 8211 	mrs	r2, BASEPRI
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	61ba      	str	r2, [r7, #24]
 8006c1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d02f      	beq.n	8006c8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c3c:	f000 f915 	bl	8006e6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	1e5a      	subs	r2, r3, #1
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d112      	bne.n	8006c78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d016      	beq.n	8006c88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	3310      	adds	r3, #16
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fe92 	bl	8007988 <xTaskRemoveFromEventList>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e007      	b.n	8006c88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	b25a      	sxtb	r2, r3
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c8c:	e001      	b.n	8006c92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f383 8811 	msr	BASEPRI, r3
}
 8006c9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3738      	adds	r7, #56	; 0x38
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60bb      	str	r3, [r7, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006ccc:	f001 fe82 	bl	80089d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006cd6:	f001 fead 	bl	8008a34 <vPortExitCritical>

	return uxReturn;
 8006cda:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006d12:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d14:	4618      	mov	r0, r3
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <vQueueDelete+0x28>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60bb      	str	r3, [r7, #8]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f95f 	bl	800700c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f002 f829 	bl	8008db0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	e001      	b.n	8006d88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d88:	68fb      	ldr	r3, [r7, #12]
	}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10d      	bne.n	8006dd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d14d      	bne.n	8006e58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 f835 	bl	8007e30 <xTaskPriorityDisinherit>
 8006dc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	609a      	str	r2, [r3, #8]
 8006dce:	e043      	b.n	8006e58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d119      	bne.n	8006e0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6858      	ldr	r0, [r3, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	461a      	mov	r2, r3
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	f004 fe57 	bl	800ba94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	441a      	add	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d32b      	bcc.n	8006e58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	605a      	str	r2, [r3, #4]
 8006e08:	e026      	b.n	8006e58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	68d8      	ldr	r0, [r3, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	461a      	mov	r2, r3
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	f004 fe3d 	bl	800ba94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	425b      	negs	r3, r3
 8006e24:	441a      	add	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d207      	bcs.n	8006e46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	425b      	negs	r3, r3
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d105      	bne.n	8006e58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e60:	697b      	ldr	r3, [r7, #20]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d018      	beq.n	8006eae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d303      	bcc.n	8006e9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68d9      	ldr	r1, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6838      	ldr	r0, [r7, #0]
 8006eaa:	f004 fdf3 	bl	800ba94 <memcpy>
	}
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ebe:	f001 fd89 	bl	80089d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ec8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006eca:	e011      	b.n	8006ef0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d012      	beq.n	8006efa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3324      	adds	r3, #36	; 0x24
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fd55 	bl	8007988 <xTaskRemoveFromEventList>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ee4:	f000 fe2c 	bl	8007b40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dce9      	bgt.n	8006ecc <prvUnlockQueue+0x16>
 8006ef8:	e000      	b.n	8006efc <prvUnlockQueue+0x46>
					break;
 8006efa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	22ff      	movs	r2, #255	; 0xff
 8006f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f04:	f001 fd96 	bl	8008a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f08:	f001 fd64 	bl	80089d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f14:	e011      	b.n	8006f3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d012      	beq.n	8006f44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3310      	adds	r3, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fd30 	bl	8007988 <xTaskRemoveFromEventList>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f2e:	f000 fe07 	bl	8007b40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	dce9      	bgt.n	8006f16 <prvUnlockQueue+0x60>
 8006f42:	e000      	b.n	8006f46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	22ff      	movs	r2, #255	; 0xff
 8006f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f4e:	f001 fd71 	bl	8008a34 <vPortExitCritical>
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f62:	f001 fd37 	bl	80089d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	e001      	b.n	8006f78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f78:	f001 fd5c 	bl	8008a34 <vPortExitCritical>

	return xReturn;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f8e:	f001 fd21 	bl	80089d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d102      	bne.n	8006fa4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	e001      	b.n	8006fa8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fa8:	f001 fd44 	bl	8008a34 <vPortExitCritical>

	return xReturn;
 8006fac:	68fb      	ldr	r3, [r7, #12]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	e014      	b.n	8006ff2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fc8:	4a0f      	ldr	r2, [pc, #60]	; (8007008 <vQueueAddToRegistry+0x50>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10b      	bne.n	8006fec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fd4:	490c      	ldr	r1, [pc, #48]	; (8007008 <vQueueAddToRegistry+0x50>)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fde:	4a0a      	ldr	r2, [pc, #40]	; (8007008 <vQueueAddToRegistry+0x50>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fea:	e006      	b.n	8006ffa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b07      	cmp	r3, #7
 8006ff6:	d9e7      	bls.n	8006fc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20009388 	.word	0x20009388

0800700c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e016      	b.n	8007048 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800701a:	4a10      	ldr	r2, [pc, #64]	; (800705c <vQueueUnregisterQueue+0x50>)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	4413      	add	r3, r2
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	429a      	cmp	r2, r3
 8007028:	d10b      	bne.n	8007042 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800702a:	4a0c      	ldr	r2, [pc, #48]	; (800705c <vQueueUnregisterQueue+0x50>)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2100      	movs	r1, #0
 8007030:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007034:	4a09      	ldr	r2, [pc, #36]	; (800705c <vQueueUnregisterQueue+0x50>)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4413      	add	r3, r2
 800703c:	2200      	movs	r2, #0
 800703e:	605a      	str	r2, [r3, #4]
				break;
 8007040:	e006      	b.n	8007050 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b07      	cmp	r3, #7
 800704c:	d9e5      	bls.n	800701a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20009388 	.word	0x20009388

08007060 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007070:	f001 fcb0 	bl	80089d4 <vPortEnterCritical>
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800707a:	b25b      	sxtb	r3, r3
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d103      	bne.n	800708a <vQueueWaitForMessageRestricted+0x2a>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007090:	b25b      	sxtb	r3, r3
 8007092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007096:	d103      	bne.n	80070a0 <vQueueWaitForMessageRestricted+0x40>
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070a0:	f001 fcc8 	bl	8008a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	3324      	adds	r3, #36	; 0x24
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fc3b 	bl	8007930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070ba:	6978      	ldr	r0, [r7, #20]
 80070bc:	f7ff fefb 	bl	8006eb6 <prvUnlockQueue>
	}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	623b      	str	r3, [r7, #32]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <xTaskCreateStatic+0x46>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	61fb      	str	r3, [r7, #28]
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800710e:	235c      	movs	r3, #92	; 0x5c
 8007110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b5c      	cmp	r3, #92	; 0x5c
 8007116:	d00a      	beq.n	800712e <xTaskCreateStatic+0x66>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	61bb      	str	r3, [r7, #24]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800712e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d01e      	beq.n	8007174 <xTaskCreateStatic+0xac>
 8007136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01b      	beq.n	8007174 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007144:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	2202      	movs	r2, #2
 800714a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800714e:	2300      	movs	r3, #0
 8007150:	9303      	str	r3, [sp, #12]
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	9302      	str	r3, [sp, #8]
 8007156:	f107 0314 	add.w	r3, r7, #20
 800715a:	9301      	str	r3, [sp, #4]
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f850 	bl	800720c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800716c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800716e:	f000 f8dd 	bl	800732c <prvAddNewTaskToReadyList>
 8007172:	e001      	b.n	8007178 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007178:	697b      	ldr	r3, [r7, #20]
	}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007182:	b580      	push	{r7, lr}
 8007184:	b08c      	sub	sp, #48	; 0x30
 8007186:	af04      	add	r7, sp, #16
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	603b      	str	r3, [r7, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4618      	mov	r0, r3
 8007198:	f001 fd3e 	bl	8008c18 <pvPortMalloc>
 800719c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00e      	beq.n	80071c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071a4:	205c      	movs	r0, #92	; 0x5c
 80071a6:	f001 fd37 	bl	8008c18 <pvPortMalloc>
 80071aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
 80071b8:	e005      	b.n	80071c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071ba:	6978      	ldr	r0, [r7, #20]
 80071bc:	f001 fdf8 	bl	8008db0 <vPortFree>
 80071c0:	e001      	b.n	80071c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d017      	beq.n	80071fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071d4:	88fa      	ldrh	r2, [r7, #6]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9303      	str	r3, [sp, #12]
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	9302      	str	r3, [sp, #8]
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f80e 	bl	800720c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071f0:	69f8      	ldr	r0, [r7, #28]
 80071f2:	f000 f89b 	bl	800732c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071f6:	2301      	movs	r3, #1
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	e002      	b.n	8007202 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007200:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007202:	69bb      	ldr	r3, [r7, #24]
	}
 8007204:	4618      	mov	r0, r3
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	461a      	mov	r2, r3
 8007224:	21a5      	movs	r1, #165	; 0xa5
 8007226:	f004 fc5d 	bl	800bae4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007234:	3b01      	subs	r3, #1
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	f023 0307 	bic.w	r3, r3, #7
 8007242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <prvInitialiseNewTask+0x58>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	617b      	str	r3, [r7, #20]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d01f      	beq.n	80072aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	e012      	b.n	8007296 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	7819      	ldrb	r1, [r3, #0]
 8007278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	3334      	adds	r3, #52	; 0x34
 8007280:	460a      	mov	r2, r1
 8007282:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d006      	beq.n	800729e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	3301      	adds	r3, #1
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	2b0f      	cmp	r3, #15
 800729a:	d9e9      	bls.n	8007270 <prvInitialiseNewTask+0x64>
 800729c:	e000      	b.n	80072a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800729e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072a8:	e003      	b.n	80072b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	2b37      	cmp	r3, #55	; 0x37
 80072b6:	d901      	bls.n	80072bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072b8:	2337      	movs	r3, #55	; 0x37
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	2200      	movs	r2, #0
 80072cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	3304      	adds	r3, #4
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fdf0 	bl	8005eb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	3318      	adds	r3, #24
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe fdeb 	bl	8005eb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	2200      	movs	r2, #0
 80072fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	68f9      	ldr	r1, [r7, #12]
 800730a:	69b8      	ldr	r0, [r7, #24]
 800730c:	f001 fa36 	bl	800877c <pxPortInitialiseStack>
 8007310:	4602      	mov	r2, r0
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007322:	bf00      	nop
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007334:	f001 fb4e 	bl	80089d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007338:	4b2d      	ldr	r3, [pc, #180]	; (80073f0 <prvAddNewTaskToReadyList+0xc4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	4a2c      	ldr	r2, [pc, #176]	; (80073f0 <prvAddNewTaskToReadyList+0xc4>)
 8007340:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007342:	4b2c      	ldr	r3, [pc, #176]	; (80073f4 <prvAddNewTaskToReadyList+0xc8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800734a:	4a2a      	ldr	r2, [pc, #168]	; (80073f4 <prvAddNewTaskToReadyList+0xc8>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007350:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <prvAddNewTaskToReadyList+0xc4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d110      	bne.n	800737a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007358:	f000 fc16 	bl	8007b88 <prvInitialiseTaskLists>
 800735c:	e00d      	b.n	800737a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800735e:	4b26      	ldr	r3, [pc, #152]	; (80073f8 <prvAddNewTaskToReadyList+0xcc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007366:	4b23      	ldr	r3, [pc, #140]	; (80073f4 <prvAddNewTaskToReadyList+0xc8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	429a      	cmp	r2, r3
 8007372:	d802      	bhi.n	800737a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007374:	4a1f      	ldr	r2, [pc, #124]	; (80073f4 <prvAddNewTaskToReadyList+0xc8>)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800737a:	4b20      	ldr	r3, [pc, #128]	; (80073fc <prvAddNewTaskToReadyList+0xd0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3301      	adds	r3, #1
 8007380:	4a1e      	ldr	r2, [pc, #120]	; (80073fc <prvAddNewTaskToReadyList+0xd0>)
 8007382:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007384:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <prvAddNewTaskToReadyList+0xd0>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007390:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <prvAddNewTaskToReadyList+0xd4>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d903      	bls.n	80073a0 <prvAddNewTaskToReadyList+0x74>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a18      	ldr	r2, [pc, #96]	; (8007400 <prvAddNewTaskToReadyList+0xd4>)
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4a15      	ldr	r2, [pc, #84]	; (8007404 <prvAddNewTaskToReadyList+0xd8>)
 80073ae:	441a      	add	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7fe fd8b 	bl	8005ed2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073bc:	f001 fb3a 	bl	8008a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <prvAddNewTaskToReadyList+0xcc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00e      	beq.n	80073e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073c8:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <prvAddNewTaskToReadyList+0xc8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d207      	bcs.n	80073e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <prvAddNewTaskToReadyList+0xdc>)
 80073d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20003060 	.word	0x20003060
 80073f4:	20002b8c 	.word	0x20002b8c
 80073f8:	2000306c 	.word	0x2000306c
 80073fc:	2000307c 	.word	0x2000307c
 8007400:	20003068 	.word	0x20003068
 8007404:	20002b90 	.word	0x20002b90
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d017      	beq.n	800744e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <vTaskDelay+0x60>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <vTaskDelay+0x30>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	60bb      	str	r3, [r7, #8]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800743c:	f000 f880 	bl	8007540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007440:	2100      	movs	r1, #0
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fdf8 	bl	8008038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007448:	f000 f888 	bl	800755c <xTaskResumeAll>
 800744c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d107      	bne.n	8007464 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007454:	4b06      	ldr	r3, [pc, #24]	; (8007470 <vTaskDelay+0x64>)
 8007456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20003088 	.word	0x20003088
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007482:	463a      	mov	r2, r7
 8007484:	1d39      	adds	r1, r7, #4
 8007486:	f107 0308 	add.w	r3, r7, #8
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fcc0 	bl	8005e10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	2300      	movs	r3, #0
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	2300      	movs	r3, #0
 80074a0:	460a      	mov	r2, r1
 80074a2:	4921      	ldr	r1, [pc, #132]	; (8007528 <vTaskStartScheduler+0xb4>)
 80074a4:	4821      	ldr	r0, [pc, #132]	; (800752c <vTaskStartScheduler+0xb8>)
 80074a6:	f7ff fe0f 	bl	80070c8 <xTaskCreateStatic>
 80074aa:	4603      	mov	r3, r0
 80074ac:	4a20      	ldr	r2, [pc, #128]	; (8007530 <vTaskStartScheduler+0xbc>)
 80074ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074b0:	4b1f      	ldr	r3, [pc, #124]	; (8007530 <vTaskStartScheduler+0xbc>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074b8:	2301      	movs	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e001      	b.n	80074c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d102      	bne.n	80074ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074c8:	f000 fe0a 	bl	80080e0 <xTimerCreateTimerTask>
 80074cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d116      	bne.n	8007502 <vTaskStartScheduler+0x8e>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	613b      	str	r3, [r7, #16]
}
 80074e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074e8:	4b12      	ldr	r3, [pc, #72]	; (8007534 <vTaskStartScheduler+0xc0>)
 80074ea:	f04f 32ff 	mov.w	r2, #4294967295
 80074ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074f0:	4b11      	ldr	r3, [pc, #68]	; (8007538 <vTaskStartScheduler+0xc4>)
 80074f2:	2201      	movs	r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074f6:	4b11      	ldr	r3, [pc, #68]	; (800753c <vTaskStartScheduler+0xc8>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074fc:	f001 f9c8 	bl	8008890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007500:	e00e      	b.n	8007520 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d10a      	bne.n	8007520 <vTaskStartScheduler+0xac>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	60fb      	str	r3, [r7, #12]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <vTaskStartScheduler+0xaa>
}
 8007520:	bf00      	nop
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	0800efec 	.word	0x0800efec
 800752c:	08007b59 	.word	0x08007b59
 8007530:	20003084 	.word	0x20003084
 8007534:	20003080 	.word	0x20003080
 8007538:	2000306c 	.word	0x2000306c
 800753c:	20003064 	.word	0x20003064

08007540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007544:	4b04      	ldr	r3, [pc, #16]	; (8007558 <vTaskSuspendAll+0x18>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	4a03      	ldr	r2, [pc, #12]	; (8007558 <vTaskSuspendAll+0x18>)
 800754c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800754e:	bf00      	nop
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	20003088 	.word	0x20003088

0800755c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007566:	2300      	movs	r3, #0
 8007568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800756a:	4b42      	ldr	r3, [pc, #264]	; (8007674 <xTaskResumeAll+0x118>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <xTaskResumeAll+0x2c>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	603b      	str	r3, [r7, #0]
}
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007588:	f001 fa24 	bl	80089d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800758c:	4b39      	ldr	r3, [pc, #228]	; (8007674 <xTaskResumeAll+0x118>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3b01      	subs	r3, #1
 8007592:	4a38      	ldr	r2, [pc, #224]	; (8007674 <xTaskResumeAll+0x118>)
 8007594:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <xTaskResumeAll+0x118>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d162      	bne.n	8007664 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800759e:	4b36      	ldr	r3, [pc, #216]	; (8007678 <xTaskResumeAll+0x11c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d05e      	beq.n	8007664 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075a6:	e02f      	b.n	8007608 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a8:	4b34      	ldr	r3, [pc, #208]	; (800767c <xTaskResumeAll+0x120>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3318      	adds	r3, #24
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fce9 	bl	8005f8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3304      	adds	r3, #4
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fce4 	bl	8005f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c8:	4b2d      	ldr	r3, [pc, #180]	; (8007680 <xTaskResumeAll+0x124>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d903      	bls.n	80075d8 <xTaskResumeAll+0x7c>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	4a2a      	ldr	r2, [pc, #168]	; (8007680 <xTaskResumeAll+0x124>)
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4a27      	ldr	r2, [pc, #156]	; (8007684 <xTaskResumeAll+0x128>)
 80075e6:	441a      	add	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f7fe fc6f 	bl	8005ed2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f8:	4b23      	ldr	r3, [pc, #140]	; (8007688 <xTaskResumeAll+0x12c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007602:	4b22      	ldr	r3, [pc, #136]	; (800768c <xTaskResumeAll+0x130>)
 8007604:	2201      	movs	r2, #1
 8007606:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007608:	4b1c      	ldr	r3, [pc, #112]	; (800767c <xTaskResumeAll+0x120>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1cb      	bne.n	80075a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007616:	f000 fb55 	bl	8007cc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800761a:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <xTaskResumeAll+0x134>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d010      	beq.n	8007648 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007626:	f000 f847 	bl	80076b8 <xTaskIncrementTick>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007630:	4b16      	ldr	r3, [pc, #88]	; (800768c <xTaskResumeAll+0x130>)
 8007632:	2201      	movs	r2, #1
 8007634:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3b01      	subs	r3, #1
 800763a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f1      	bne.n	8007626 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007642:	4b13      	ldr	r3, [pc, #76]	; (8007690 <xTaskResumeAll+0x134>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007648:	4b10      	ldr	r3, [pc, #64]	; (800768c <xTaskResumeAll+0x130>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007654:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <xTaskResumeAll+0x138>)
 8007656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007664:	f001 f9e6 	bl	8008a34 <vPortExitCritical>

	return xAlreadyYielded;
 8007668:	68bb      	ldr	r3, [r7, #8]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20003088 	.word	0x20003088
 8007678:	20003060 	.word	0x20003060
 800767c:	20003020 	.word	0x20003020
 8007680:	20003068 	.word	0x20003068
 8007684:	20002b90 	.word	0x20002b90
 8007688:	20002b8c 	.word	0x20002b8c
 800768c:	20003074 	.word	0x20003074
 8007690:	20003070 	.word	0x20003070
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800769e:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <xTaskGetTickCount+0x1c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076a4:	687b      	ldr	r3, [r7, #4]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20003064 	.word	0x20003064

080076b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c2:	4b4f      	ldr	r3, [pc, #316]	; (8007800 <xTaskIncrementTick+0x148>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f040 808f 	bne.w	80077ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076cc:	4b4d      	ldr	r3, [pc, #308]	; (8007804 <xTaskIncrementTick+0x14c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076d4:	4a4b      	ldr	r2, [pc, #300]	; (8007804 <xTaskIncrementTick+0x14c>)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d120      	bne.n	8007722 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076e0:	4b49      	ldr	r3, [pc, #292]	; (8007808 <xTaskIncrementTick+0x150>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <xTaskIncrementTick+0x48>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	603b      	str	r3, [r7, #0]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <xTaskIncrementTick+0x46>
 8007700:	4b41      	ldr	r3, [pc, #260]	; (8007808 <xTaskIncrementTick+0x150>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	4b41      	ldr	r3, [pc, #260]	; (800780c <xTaskIncrementTick+0x154>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3f      	ldr	r2, [pc, #252]	; (8007808 <xTaskIncrementTick+0x150>)
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	4a3f      	ldr	r2, [pc, #252]	; (800780c <xTaskIncrementTick+0x154>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <xTaskIncrementTick+0x158>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	4a3d      	ldr	r2, [pc, #244]	; (8007810 <xTaskIncrementTick+0x158>)
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	f000 fad1 	bl	8007cc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007722:	4b3c      	ldr	r3, [pc, #240]	; (8007814 <xTaskIncrementTick+0x15c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	429a      	cmp	r2, r3
 800772a:	d349      	bcc.n	80077c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800772c:	4b36      	ldr	r3, [pc, #216]	; (8007808 <xTaskIncrementTick+0x150>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007736:	4b37      	ldr	r3, [pc, #220]	; (8007814 <xTaskIncrementTick+0x15c>)
 8007738:	f04f 32ff 	mov.w	r2, #4294967295
 800773c:	601a      	str	r2, [r3, #0]
					break;
 800773e:	e03f      	b.n	80077c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007740:	4b31      	ldr	r3, [pc, #196]	; (8007808 <xTaskIncrementTick+0x150>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d203      	bcs.n	8007760 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007758:	4a2e      	ldr	r2, [pc, #184]	; (8007814 <xTaskIncrementTick+0x15c>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800775e:	e02f      	b.n	80077c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	3304      	adds	r3, #4
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fc11 	bl	8005f8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d004      	beq.n	800777c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	3318      	adds	r3, #24
 8007776:	4618      	mov	r0, r3
 8007778:	f7fe fc08 	bl	8005f8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	4b25      	ldr	r3, [pc, #148]	; (8007818 <xTaskIncrementTick+0x160>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d903      	bls.n	8007790 <xTaskIncrementTick+0xd8>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	4a22      	ldr	r2, [pc, #136]	; (8007818 <xTaskIncrementTick+0x160>)
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4a1f      	ldr	r2, [pc, #124]	; (800781c <xTaskIncrementTick+0x164>)
 800779e:	441a      	add	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe fb93 	bl	8005ed2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b0:	4b1b      	ldr	r3, [pc, #108]	; (8007820 <xTaskIncrementTick+0x168>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d3b8      	bcc.n	800772c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077ba:	2301      	movs	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077be:	e7b5      	b.n	800772c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077c0:	4b17      	ldr	r3, [pc, #92]	; (8007820 <xTaskIncrementTick+0x168>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c6:	4915      	ldr	r1, [pc, #84]	; (800781c <xTaskIncrementTick+0x164>)
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d901      	bls.n	80077dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077dc:	4b11      	ldr	r3, [pc, #68]	; (8007824 <xTaskIncrementTick+0x16c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d007      	beq.n	80077f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e004      	b.n	80077f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <xTaskIncrementTick+0x170>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	4a0d      	ldr	r2, [pc, #52]	; (8007828 <xTaskIncrementTick+0x170>)
 80077f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077f4:	697b      	ldr	r3, [r7, #20]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20003088 	.word	0x20003088
 8007804:	20003064 	.word	0x20003064
 8007808:	20003018 	.word	0x20003018
 800780c:	2000301c 	.word	0x2000301c
 8007810:	20003078 	.word	0x20003078
 8007814:	20003080 	.word	0x20003080
 8007818:	20003068 	.word	0x20003068
 800781c:	20002b90 	.word	0x20002b90
 8007820:	20002b8c 	.word	0x20002b8c
 8007824:	20003074 	.word	0x20003074
 8007828:	20003070 	.word	0x20003070

0800782c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007832:	4b28      	ldr	r3, [pc, #160]	; (80078d4 <vTaskSwitchContext+0xa8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800783a:	4b27      	ldr	r3, [pc, #156]	; (80078d8 <vTaskSwitchContext+0xac>)
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007840:	e041      	b.n	80078c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007842:	4b25      	ldr	r3, [pc, #148]	; (80078d8 <vTaskSwitchContext+0xac>)
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	4b24      	ldr	r3, [pc, #144]	; (80078dc <vTaskSwitchContext+0xb0>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e010      	b.n	8007872 <vTaskSwitchContext+0x46>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <vTaskSwitchContext+0x40>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	607b      	str	r3, [r7, #4]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <vTaskSwitchContext+0x3e>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3b01      	subs	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	491b      	ldr	r1, [pc, #108]	; (80078e0 <vTaskSwitchContext+0xb4>)
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0e4      	beq.n	8007850 <vTaskSwitchContext+0x24>
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4a13      	ldr	r2, [pc, #76]	; (80078e0 <vTaskSwitchContext+0xb4>)
 8007892:	4413      	add	r3, r2
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3308      	adds	r3, #8
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d104      	bne.n	80078b6 <vTaskSwitchContext+0x8a>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	605a      	str	r2, [r3, #4]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <vTaskSwitchContext+0xb8>)
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	4a06      	ldr	r2, [pc, #24]	; (80078dc <vTaskSwitchContext+0xb0>)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6013      	str	r3, [r2, #0]
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20003088 	.word	0x20003088
 80078d8:	20003074 	.word	0x20003074
 80078dc:	20003068 	.word	0x20003068
 80078e0:	20002b90 	.word	0x20002b90
 80078e4:	20002b8c 	.word	0x20002b8c

080078e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60fb      	str	r3, [r7, #12]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800790e:	4b07      	ldr	r3, [pc, #28]	; (800792c <vTaskPlaceOnEventList+0x44>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3318      	adds	r3, #24
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fe faff 	bl	8005f1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800791c:	2101      	movs	r1, #1
 800791e:	6838      	ldr	r0, [r7, #0]
 8007920:	f000 fb8a 	bl	8008038 <prvAddCurrentTaskToDelayedList>
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20002b8c 	.word	0x20002b8c

08007930 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	617b      	str	r3, [r7, #20]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <vTaskPlaceOnEventListRestricted+0x54>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3318      	adds	r3, #24
 800795e:	4619      	mov	r1, r3
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7fe fab6 	bl	8005ed2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800796c:	f04f 33ff 	mov.w	r3, #4294967295
 8007970:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	68b8      	ldr	r0, [r7, #8]
 8007976:	f000 fb5f 	bl	8008038 <prvAddCurrentTaskToDelayedList>
	}
 800797a:	bf00      	nop
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20002b8c 	.word	0x20002b8c

08007988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60fb      	str	r3, [r7, #12]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	3318      	adds	r3, #24
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fae7 	bl	8005f8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079be:	4b1e      	ldr	r3, [pc, #120]	; (8007a38 <xTaskRemoveFromEventList+0xb0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d11d      	bne.n	8007a02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fade 	bl	8005f8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <xTaskRemoveFromEventList+0xb4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d903      	bls.n	80079e4 <xTaskRemoveFromEventList+0x5c>
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <xTaskRemoveFromEventList+0xb4>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4a13      	ldr	r2, [pc, #76]	; (8007a40 <xTaskRemoveFromEventList+0xb8>)
 80079f2:	441a      	add	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7fe fa69 	bl	8005ed2 <vListInsertEnd>
 8007a00:	e005      	b.n	8007a0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3318      	adds	r3, #24
 8007a06:	4619      	mov	r1, r3
 8007a08:	480e      	ldr	r0, [pc, #56]	; (8007a44 <xTaskRemoveFromEventList+0xbc>)
 8007a0a:	f7fe fa62 	bl	8005ed2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <xTaskRemoveFromEventList+0xc0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d905      	bls.n	8007a28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a20:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <xTaskRemoveFromEventList+0xc4>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	e001      	b.n	8007a2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a2c:	697b      	ldr	r3, [r7, #20]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20003088 	.word	0x20003088
 8007a3c:	20003068 	.word	0x20003068
 8007a40:	20002b90 	.word	0x20002b90
 8007a44:	20003020 	.word	0x20003020
 8007a48:	20002b8c 	.word	0x20002b8c
 8007a4c:	20003074 	.word	0x20003074

08007a50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <vTaskInternalSetTimeOutState+0x24>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <vTaskInternalSetTimeOutState+0x28>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	605a      	str	r2, [r3, #4]
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	20003078 	.word	0x20003078
 8007a78:	20003064 	.word	0x20003064

08007a7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	613b      	str	r3, [r7, #16]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007abe:	f000 ff89 	bl	80089d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <xTaskCheckForTimeOut+0xbc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d102      	bne.n	8007ae2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	61fb      	str	r3, [r7, #28]
 8007ae0:	e023      	b.n	8007b2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b15      	ldr	r3, [pc, #84]	; (8007b3c <xTaskCheckForTimeOut+0xc0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d007      	beq.n	8007afe <xTaskCheckForTimeOut+0x82>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d302      	bcc.n	8007afe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007af8:	2301      	movs	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	e015      	b.n	8007b2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d20b      	bcs.n	8007b20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff ff9b 	bl	8007a50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	e004      	b.n	8007b2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b26:	2301      	movs	r3, #1
 8007b28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b2a:	f000 ff83 	bl	8008a34 <vPortExitCritical>

	return xReturn;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20003064 	.word	0x20003064
 8007b3c:	20003078 	.word	0x20003078

08007b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <vTaskMissedYield+0x14>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	20003074 	.word	0x20003074

08007b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b60:	f000 f852 	bl	8007c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <prvIdleTask+0x28>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d9f9      	bls.n	8007b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <prvIdleTask+0x2c>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b7c:	e7f0      	b.n	8007b60 <prvIdleTask+0x8>
 8007b7e:	bf00      	nop
 8007b80:	20002b90 	.word	0x20002b90
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	e00c      	b.n	8007bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <prvInitialiseTaskLists+0x60>)
 8007ba0:	4413      	add	r3, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe f968 	bl	8005e78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3301      	adds	r3, #1
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b37      	cmp	r3, #55	; 0x37
 8007bb2:	d9ef      	bls.n	8007b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bb4:	480d      	ldr	r0, [pc, #52]	; (8007bec <prvInitialiseTaskLists+0x64>)
 8007bb6:	f7fe f95f 	bl	8005e78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bba:	480d      	ldr	r0, [pc, #52]	; (8007bf0 <prvInitialiseTaskLists+0x68>)
 8007bbc:	f7fe f95c 	bl	8005e78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bc0:	480c      	ldr	r0, [pc, #48]	; (8007bf4 <prvInitialiseTaskLists+0x6c>)
 8007bc2:	f7fe f959 	bl	8005e78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bc6:	480c      	ldr	r0, [pc, #48]	; (8007bf8 <prvInitialiseTaskLists+0x70>)
 8007bc8:	f7fe f956 	bl	8005e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bcc:	480b      	ldr	r0, [pc, #44]	; (8007bfc <prvInitialiseTaskLists+0x74>)
 8007bce:	f7fe f953 	bl	8005e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <prvInitialiseTaskLists+0x78>)
 8007bd4:	4a05      	ldr	r2, [pc, #20]	; (8007bec <prvInitialiseTaskLists+0x64>)
 8007bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <prvInitialiseTaskLists+0x7c>)
 8007bda:	4a05      	ldr	r2, [pc, #20]	; (8007bf0 <prvInitialiseTaskLists+0x68>)
 8007bdc:	601a      	str	r2, [r3, #0]
}
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20002b90 	.word	0x20002b90
 8007bec:	20002ff0 	.word	0x20002ff0
 8007bf0:	20003004 	.word	0x20003004
 8007bf4:	20003020 	.word	0x20003020
 8007bf8:	20003034 	.word	0x20003034
 8007bfc:	2000304c 	.word	0x2000304c
 8007c00:	20003018 	.word	0x20003018
 8007c04:	2000301c 	.word	0x2000301c

08007c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c0e:	e019      	b.n	8007c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c10:	f000 fee0 	bl	80089d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c14:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <prvCheckTasksWaitingTermination+0x50>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fe f9b3 	bl	8005f8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c26:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <prvCheckTasksWaitingTermination+0x54>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	4a0b      	ldr	r2, [pc, #44]	; (8007c5c <prvCheckTasksWaitingTermination+0x54>)
 8007c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c30:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <prvCheckTasksWaitingTermination+0x58>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	4a0a      	ldr	r2, [pc, #40]	; (8007c60 <prvCheckTasksWaitingTermination+0x58>)
 8007c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c3a:	f000 fefb 	bl	8008a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f810 	bl	8007c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <prvCheckTasksWaitingTermination+0x58>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e1      	bne.n	8007c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20003034 	.word	0x20003034
 8007c5c:	20003060 	.word	0x20003060
 8007c60:	20003048 	.word	0x20003048

08007c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d108      	bne.n	8007c88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f898 	bl	8008db0 <vPortFree>
				vPortFree( pxTCB );
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 f895 	bl	8008db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c86:	e018      	b.n	8007cba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d103      	bne.n	8007c9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 f88c 	bl	8008db0 <vPortFree>
	}
 8007c98:	e00f      	b.n	8007cba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d00a      	beq.n	8007cba <prvDeleteTCB+0x56>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	60fb      	str	r3, [r7, #12]
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <prvDeleteTCB+0x54>
	}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cca:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <prvResetNextTaskUnblockTime+0x38>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <prvResetNextTaskUnblockTime+0x3c>)
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cdc:	e008      	b.n	8007cf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cde:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <prvResetNextTaskUnblockTime+0x38>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	4a04      	ldr	r2, [pc, #16]	; (8007d00 <prvResetNextTaskUnblockTime+0x3c>)
 8007cee:	6013      	str	r3, [r2, #0]
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20003018 	.word	0x20003018
 8007d00:	20003080 	.word	0x20003080

08007d04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007d0a:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <xTaskGetCurrentTaskHandle+0x1c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007d10:	687b      	ldr	r3, [r7, #4]
	}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20002b8c 	.word	0x20002b8c

08007d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <xTaskGetSchedulerState+0x34>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d32:	2301      	movs	r3, #1
 8007d34:	607b      	str	r3, [r7, #4]
 8007d36:	e008      	b.n	8007d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d38:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <xTaskGetSchedulerState+0x38>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d40:	2302      	movs	r3, #2
 8007d42:	607b      	str	r3, [r7, #4]
 8007d44:	e001      	b.n	8007d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d4a:	687b      	ldr	r3, [r7, #4]
	}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	2000306c 	.word	0x2000306c
 8007d5c:	20003088 	.word	0x20003088

08007d60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d051      	beq.n	8007e1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7a:	4b2a      	ldr	r3, [pc, #168]	; (8007e24 <xTaskPriorityInherit+0xc4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d241      	bcs.n	8007e08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	db06      	blt.n	8007d9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d8c:	4b25      	ldr	r3, [pc, #148]	; (8007e24 <xTaskPriorityInherit+0xc4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6959      	ldr	r1, [r3, #20]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <xTaskPriorityInherit+0xc8>)
 8007dac:	4413      	add	r3, r2
 8007dae:	4299      	cmp	r1, r3
 8007db0:	d122      	bne.n	8007df8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe f8e8 	bl	8005f8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dbc:	4b19      	ldr	r3, [pc, #100]	; (8007e24 <xTaskPriorityInherit+0xc4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dca:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <xTaskPriorityInherit+0xcc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d903      	bls.n	8007dda <xTaskPriorityInherit+0x7a>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	4a15      	ldr	r2, [pc, #84]	; (8007e2c <xTaskPriorityInherit+0xcc>)
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <xTaskPriorityInherit+0xc8>)
 8007de8:	441a      	add	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	3304      	adds	r3, #4
 8007dee:	4619      	mov	r1, r3
 8007df0:	4610      	mov	r0, r2
 8007df2:	f7fe f86e 	bl	8005ed2 <vListInsertEnd>
 8007df6:	e004      	b.n	8007e02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <xTaskPriorityInherit+0xc4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	e008      	b.n	8007e1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <xTaskPriorityInherit+0xc4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d201      	bcs.n	8007e1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
	}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20002b8c 	.word	0x20002b8c
 8007e28:	20002b90 	.word	0x20002b90
 8007e2c:	20003068 	.word	0x20003068

08007e30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d056      	beq.n	8007ef4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e46:	4b2e      	ldr	r3, [pc, #184]	; (8007f00 <xTaskPriorityDisinherit+0xd0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d00a      	beq.n	8007e66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60fb      	str	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60bb      	str	r3, [r7, #8]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e88:	1e5a      	subs	r2, r3, #1
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d02c      	beq.n	8007ef4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d128      	bne.n	8007ef4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe f870 	bl	8005f8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec4:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <xTaskPriorityDisinherit+0xd4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d903      	bls.n	8007ed4 <xTaskPriorityDisinherit+0xa4>
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	4a0c      	ldr	r2, [pc, #48]	; (8007f04 <xTaskPriorityDisinherit+0xd4>)
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4a09      	ldr	r2, [pc, #36]	; (8007f08 <xTaskPriorityDisinherit+0xd8>)
 8007ee2:	441a      	add	r2, r3
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f7fd fff1 	bl	8005ed2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ef4:	697b      	ldr	r3, [r7, #20]
	}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20002b8c 	.word	0x20002b8c
 8007f04:	20003068 	.word	0x20003068
 8007f08:	20002b90 	.word	0x20002b90

08007f0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d06a      	beq.n	8007ffa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	60fb      	str	r3, [r7, #12]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d902      	bls.n	8007f52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e002      	b.n	8007f58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d04b      	beq.n	8007ffa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d146      	bne.n	8007ffa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f6c:	4b25      	ldr	r3, [pc, #148]	; (8008004 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d10a      	bne.n	8007f8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60bb      	str	r3, [r7, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	e7fe      	b.n	8007f8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	db04      	blt.n	8007faa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	6959      	ldr	r1, [r3, #20]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4a13      	ldr	r2, [pc, #76]	; (8008008 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007fba:	4413      	add	r3, r2
 8007fbc:	4299      	cmp	r1, r3
 8007fbe:	d11c      	bne.n	8007ffa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fd ffe1 	bl	8005f8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d903      	bls.n	8007fde <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	4a0c      	ldr	r2, [pc, #48]	; (800800c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4a07      	ldr	r2, [pc, #28]	; (8008008 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007fec:	441a      	add	r2, r3
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f7fd ff6c 	bl	8005ed2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ffa:	bf00      	nop
 8007ffc:	3720      	adds	r7, #32
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20002b8c 	.word	0x20002b8c
 8008008:	20002b90 	.word	0x20002b90
 800800c:	20003068 	.word	0x20003068

08008010 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008014:	4b07      	ldr	r3, [pc, #28]	; (8008034 <pvTaskIncrementMutexHeldCount+0x24>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d004      	beq.n	8008026 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <pvTaskIncrementMutexHeldCount+0x24>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008022:	3201      	adds	r2, #1
 8008024:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <pvTaskIncrementMutexHeldCount+0x24>)
 8008028:	681b      	ldr	r3, [r3, #0]
	}
 800802a:	4618      	mov	r0, r3
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	20002b8c 	.word	0x20002b8c

08008038 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008042:	4b21      	ldr	r3, [pc, #132]	; (80080c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008048:	4b20      	ldr	r3, [pc, #128]	; (80080cc <prvAddCurrentTaskToDelayedList+0x94>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3304      	adds	r3, #4
 800804e:	4618      	mov	r0, r3
 8008050:	f7fd ff9c 	bl	8005f8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805a:	d10a      	bne.n	8008072 <prvAddCurrentTaskToDelayedList+0x3a>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008062:	4b1a      	ldr	r3, [pc, #104]	; (80080cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4819      	ldr	r0, [pc, #100]	; (80080d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800806c:	f7fd ff31 	bl	8005ed2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008070:	e026      	b.n	80080c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800807a:	4b14      	ldr	r3, [pc, #80]	; (80080cc <prvAddCurrentTaskToDelayedList+0x94>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	429a      	cmp	r2, r3
 8008088:	d209      	bcs.n	800809e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800808a:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3304      	adds	r3, #4
 8008094:	4619      	mov	r1, r3
 8008096:	4610      	mov	r0, r2
 8008098:	f7fd ff3f 	bl	8005f1a <vListInsert>
}
 800809c:	e010      	b.n	80080c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800809e:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <prvAddCurrentTaskToDelayedList+0x94>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f7fd ff35 	bl	8005f1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080b0:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d202      	bcs.n	80080c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080ba:	4a08      	ldr	r2, [pc, #32]	; (80080dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	6013      	str	r3, [r2, #0]
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20003064 	.word	0x20003064
 80080cc:	20002b8c 	.word	0x20002b8c
 80080d0:	2000304c 	.word	0x2000304c
 80080d4:	2000301c 	.word	0x2000301c
 80080d8:	20003018 	.word	0x20003018
 80080dc:	20003080 	.word	0x20003080

080080e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	; 0x28
 80080e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080ea:	f000 fb07 	bl	80086fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080ee:	4b1c      	ldr	r3, [pc, #112]	; (8008160 <xTimerCreateTimerTask+0x80>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d021      	beq.n	800813a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080fe:	1d3a      	adds	r2, r7, #4
 8008100:	f107 0108 	add.w	r1, r7, #8
 8008104:	f107 030c 	add.w	r3, r7, #12
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd fe9b 	bl	8005e44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	9202      	str	r2, [sp, #8]
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	2302      	movs	r3, #2
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2300      	movs	r3, #0
 800811e:	460a      	mov	r2, r1
 8008120:	4910      	ldr	r1, [pc, #64]	; (8008164 <xTimerCreateTimerTask+0x84>)
 8008122:	4811      	ldr	r0, [pc, #68]	; (8008168 <xTimerCreateTimerTask+0x88>)
 8008124:	f7fe ffd0 	bl	80070c8 <xTaskCreateStatic>
 8008128:	4603      	mov	r3, r0
 800812a:	4a10      	ldr	r2, [pc, #64]	; (800816c <xTimerCreateTimerTask+0x8c>)
 800812c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800812e:	4b0f      	ldr	r3, [pc, #60]	; (800816c <xTimerCreateTimerTask+0x8c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008136:	2301      	movs	r3, #1
 8008138:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	613b      	str	r3, [r7, #16]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008156:	697b      	ldr	r3, [r7, #20]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200030bc 	.word	0x200030bc
 8008164:	0800eff4 	.word	0x0800eff4
 8008168:	080082a5 	.word	0x080082a5
 800816c:	200030c0 	.word	0x200030c0

08008170 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	; 0x28
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800817e:	2300      	movs	r3, #0
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	623b      	str	r3, [r7, #32]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800819e:	4b1a      	ldr	r3, [pc, #104]	; (8008208 <xTimerGenericCommand+0x98>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d02a      	beq.n	80081fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b05      	cmp	r3, #5
 80081b6:	dc18      	bgt.n	80081ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081b8:	f7ff fdb4 	bl	8007d24 <xTaskGetSchedulerState>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d109      	bne.n	80081d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081c2:	4b11      	ldr	r3, [pc, #68]	; (8008208 <xTimerGenericCommand+0x98>)
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f107 0110 	add.w	r1, r7, #16
 80081ca:	2300      	movs	r3, #0
 80081cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ce:	f7fe f965 	bl	800649c <xQueueGenericSend>
 80081d2:	6278      	str	r0, [r7, #36]	; 0x24
 80081d4:	e012      	b.n	80081fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <xTimerGenericCommand+0x98>)
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	f107 0110 	add.w	r1, r7, #16
 80081de:	2300      	movs	r3, #0
 80081e0:	2200      	movs	r2, #0
 80081e2:	f7fe f95b 	bl	800649c <xQueueGenericSend>
 80081e6:	6278      	str	r0, [r7, #36]	; 0x24
 80081e8:	e008      	b.n	80081fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081ea:	4b07      	ldr	r3, [pc, #28]	; (8008208 <xTimerGenericCommand+0x98>)
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f107 0110 	add.w	r1, r7, #16
 80081f2:	2300      	movs	r3, #0
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	f7fe fa4f 	bl	8006698 <xQueueGenericSendFromISR>
 80081fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3728      	adds	r7, #40	; 0x28
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	200030bc 	.word	0x200030bc

0800820c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008216:	4b22      	ldr	r3, [pc, #136]	; (80082a0 <prvProcessExpiredTimer+0x94>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	3304      	adds	r3, #4
 8008224:	4618      	mov	r0, r3
 8008226:	f7fd feb1 	bl	8005f8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b00      	cmp	r3, #0
 8008236:	d022      	beq.n	800827e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	699a      	ldr	r2, [r3, #24]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	18d1      	adds	r1, r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	6978      	ldr	r0, [r7, #20]
 8008246:	f000 f8d1 	bl	80083ec <prvInsertTimerInActiveList>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d01f      	beq.n	8008290 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008250:	2300      	movs	r3, #0
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	2100      	movs	r1, #0
 800825a:	6978      	ldr	r0, [r7, #20]
 800825c:	f7ff ff88 	bl	8008170 <xTimerGenericCommand>
 8008260:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d113      	bne.n	8008290 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	60fb      	str	r3, [r7, #12]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008284:	f023 0301 	bic.w	r3, r3, #1
 8008288:	b2da      	uxtb	r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	6978      	ldr	r0, [r7, #20]
 8008296:	4798      	blx	r3
}
 8008298:	bf00      	nop
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	200030b4 	.word	0x200030b4

080082a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082ac:	f107 0308 	add.w	r3, r7, #8
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f857 	bl	8008364 <prvGetNextExpireTime>
 80082b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4619      	mov	r1, r3
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f803 	bl	80082c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082c2:	f000 f8d5 	bl	8008470 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082c6:	e7f1      	b.n	80082ac <prvTimerTask+0x8>

080082c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082d2:	f7ff f935 	bl	8007540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f866 	bl	80083ac <prvSampleTimeNow>
 80082e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d130      	bne.n	800834a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <prvProcessTimerOrBlockTask+0x3c>
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d806      	bhi.n	8008304 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082f6:	f7ff f931 	bl	800755c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff ff85 	bl	800820c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008302:	e024      	b.n	800834e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800830a:	4b13      	ldr	r3, [pc, #76]	; (8008358 <prvProcessTimerOrBlockTask+0x90>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <prvProcessTimerOrBlockTask+0x50>
 8008314:	2301      	movs	r3, #1
 8008316:	e000      	b.n	800831a <prvProcessTimerOrBlockTask+0x52>
 8008318:	2300      	movs	r3, #0
 800831a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800831c:	4b0f      	ldr	r3, [pc, #60]	; (800835c <prvProcessTimerOrBlockTask+0x94>)
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4619      	mov	r1, r3
 800832a:	f7fe fe99 	bl	8007060 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800832e:	f7ff f915 	bl	800755c <xTaskResumeAll>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008338:	4b09      	ldr	r3, [pc, #36]	; (8008360 <prvProcessTimerOrBlockTask+0x98>)
 800833a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
}
 8008348:	e001      	b.n	800834e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800834a:	f7ff f907 	bl	800755c <xTaskResumeAll>
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200030b8 	.word	0x200030b8
 800835c:	200030bc 	.word	0x200030bc
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800836c:	4b0e      	ldr	r3, [pc, #56]	; (80083a8 <prvGetNextExpireTime+0x44>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <prvGetNextExpireTime+0x16>
 8008376:	2201      	movs	r2, #1
 8008378:	e000      	b.n	800837c <prvGetNextExpireTime+0x18>
 800837a:	2200      	movs	r2, #0
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008388:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <prvGetNextExpireTime+0x44>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e001      	b.n	8008398 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008398:	68fb      	ldr	r3, [r7, #12]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	200030b4 	.word	0x200030b4

080083ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083b4:	f7ff f970 	bl	8007698 <xTaskGetTickCount>
 80083b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <prvSampleTimeNow+0x3c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d205      	bcs.n	80083d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083c4:	f000 f936 	bl	8008634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	e002      	b.n	80083d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083d6:	4a04      	ldr	r2, [pc, #16]	; (80083e8 <prvSampleTimeNow+0x3c>)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083dc:	68fb      	ldr	r3, [r7, #12]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200030c4 	.word	0x200030c4

080083ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083fa:	2300      	movs	r3, #0
 80083fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	429a      	cmp	r2, r3
 8008410:	d812      	bhi.n	8008438 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	1ad2      	subs	r2, r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	429a      	cmp	r2, r3
 800841e:	d302      	bcc.n	8008426 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008420:	2301      	movs	r3, #1
 8008422:	617b      	str	r3, [r7, #20]
 8008424:	e01b      	b.n	800845e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <prvInsertTimerInActiveList+0x7c>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3304      	adds	r3, #4
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f7fd fd72 	bl	8005f1a <vListInsert>
 8008436:	e012      	b.n	800845e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d206      	bcs.n	800844e <prvInsertTimerInActiveList+0x62>
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	429a      	cmp	r2, r3
 8008446:	d302      	bcc.n	800844e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008448:	2301      	movs	r3, #1
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	e007      	b.n	800845e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800844e:	4b07      	ldr	r3, [pc, #28]	; (800846c <prvInsertTimerInActiveList+0x80>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3304      	adds	r3, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7fd fd5e 	bl	8005f1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800845e:	697b      	ldr	r3, [r7, #20]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200030b8 	.word	0x200030b8
 800846c:	200030b4 	.word	0x200030b4

08008470 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08e      	sub	sp, #56	; 0x38
 8008474:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008476:	e0ca      	b.n	800860e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	da18      	bge.n	80084b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800847e:	1d3b      	adds	r3, r7, #4
 8008480:	3304      	adds	r3, #4
 8008482:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	61fb      	str	r3, [r7, #28]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a6:	6850      	ldr	r0, [r2, #4]
 80084a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084aa:	6892      	ldr	r2, [r2, #8]
 80084ac:	4611      	mov	r1, r2
 80084ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f2c0 80aa 	blt.w	800860c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d004      	beq.n	80084ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	3304      	adds	r3, #4
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fd fd5f 	bl	8005f8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ce:	463b      	mov	r3, r7
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff ff6b 	bl	80083ac <prvSampleTimeNow>
 80084d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b09      	cmp	r3, #9
 80084dc:	f200 8097 	bhi.w	800860e <prvProcessReceivedCommands+0x19e>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <prvProcessReceivedCommands+0x78>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	08008511 	.word	0x08008511
 80084ec:	08008511 	.word	0x08008511
 80084f0:	08008511 	.word	0x08008511
 80084f4:	08008585 	.word	0x08008585
 80084f8:	08008599 	.word	0x08008599
 80084fc:	080085e3 	.word	0x080085e3
 8008500:	08008511 	.word	0x08008511
 8008504:	08008511 	.word	0x08008511
 8008508:	08008585 	.word	0x08008585
 800850c:	08008599 	.word	0x08008599
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008516:	f043 0301 	orr.w	r3, r3, #1
 800851a:	b2da      	uxtb	r2, r3
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	18d1      	adds	r1, r2, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008530:	f7ff ff5c 	bl	80083ec <prvInsertTimerInActiveList>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d069      	beq.n	800860e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008540:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d05e      	beq.n	800860e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	441a      	add	r2, r3
 8008558:	2300      	movs	r3, #0
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	2300      	movs	r3, #0
 800855e:	2100      	movs	r1, #0
 8008560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008562:	f7ff fe05 	bl	8008170 <xTimerGenericCommand>
 8008566:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d14f      	bne.n	800860e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	61bb      	str	r3, [r7, #24]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800858a:	f023 0301 	bic.w	r3, r3, #1
 800858e:	b2da      	uxtb	r2, r3
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008596:	e03a      	b.n	800860e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800859e:	f043 0301 	orr.w	r3, r3, #1
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10a      	bne.n	80085ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	617b      	str	r3, [r7, #20]
}
 80085ca:	bf00      	nop
 80085cc:	e7fe      	b.n	80085cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	699a      	ldr	r2, [r3, #24]
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	18d1      	adds	r1, r2, r3
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085dc:	f7ff ff06 	bl	80083ec <prvInsertTimerInActiveList>
					break;
 80085e0:	e015      	b.n	800860e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d103      	bne.n	80085f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80085f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f2:	f000 fbdd 	bl	8008db0 <vPortFree>
 80085f6:	e00a      	b.n	800860e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085fe:	f023 0301 	bic.w	r3, r3, #1
 8008602:	b2da      	uxtb	r2, r3
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800860a:	e000      	b.n	800860e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800860c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800860e:	4b08      	ldr	r3, [pc, #32]	; (8008630 <prvProcessReceivedCommands+0x1c0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	1d39      	adds	r1, r7, #4
 8008614:	2200      	movs	r2, #0
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe f8da 	bl	80067d0 <xQueueReceive>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	f47f af2a 	bne.w	8008478 <prvProcessReceivedCommands+0x8>
	}
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	3730      	adds	r7, #48	; 0x30
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	200030bc 	.word	0x200030bc

08008634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800863a:	e048      	b.n	80086ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800863c:	4b2d      	ldr	r3, [pc, #180]	; (80086f4 <prvSwitchTimerLists+0xc0>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008646:	4b2b      	ldr	r3, [pc, #172]	; (80086f4 <prvSwitchTimerLists+0xc0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3304      	adds	r3, #4
 8008654:	4618      	mov	r0, r3
 8008656:	f7fd fc99 	bl	8005f8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d02e      	beq.n	80086ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4413      	add	r3, r2
 8008678:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	429a      	cmp	r2, r3
 8008680:	d90e      	bls.n	80086a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800868e:	4b19      	ldr	r3, [pc, #100]	; (80086f4 <prvSwitchTimerLists+0xc0>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3304      	adds	r3, #4
 8008696:	4619      	mov	r1, r3
 8008698:	4610      	mov	r0, r2
 800869a:	f7fd fc3e 	bl	8005f1a <vListInsert>
 800869e:	e016      	b.n	80086ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086a0:	2300      	movs	r3, #0
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	2100      	movs	r1, #0
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff fd60 	bl	8008170 <xTimerGenericCommand>
 80086b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	603b      	str	r3, [r7, #0]
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <prvSwitchTimerLists+0xc0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1b1      	bne.n	800863c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086d8:	4b06      	ldr	r3, [pc, #24]	; (80086f4 <prvSwitchTimerLists+0xc0>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086de:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <prvSwitchTimerLists+0xc4>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a04      	ldr	r2, [pc, #16]	; (80086f4 <prvSwitchTimerLists+0xc0>)
 80086e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086e6:	4a04      	ldr	r2, [pc, #16]	; (80086f8 <prvSwitchTimerLists+0xc4>)
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	6013      	str	r3, [r2, #0]
}
 80086ec:	bf00      	nop
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	200030b4 	.word	0x200030b4
 80086f8:	200030b8 	.word	0x200030b8

080086fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008702:	f000 f967 	bl	80089d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008706:	4b15      	ldr	r3, [pc, #84]	; (800875c <prvCheckForValidListAndQueue+0x60>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d120      	bne.n	8008750 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800870e:	4814      	ldr	r0, [pc, #80]	; (8008760 <prvCheckForValidListAndQueue+0x64>)
 8008710:	f7fd fbb2 	bl	8005e78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008714:	4813      	ldr	r0, [pc, #76]	; (8008764 <prvCheckForValidListAndQueue+0x68>)
 8008716:	f7fd fbaf 	bl	8005e78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800871a:	4b13      	ldr	r3, [pc, #76]	; (8008768 <prvCheckForValidListAndQueue+0x6c>)
 800871c:	4a10      	ldr	r2, [pc, #64]	; (8008760 <prvCheckForValidListAndQueue+0x64>)
 800871e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008720:	4b12      	ldr	r3, [pc, #72]	; (800876c <prvCheckForValidListAndQueue+0x70>)
 8008722:	4a10      	ldr	r2, [pc, #64]	; (8008764 <prvCheckForValidListAndQueue+0x68>)
 8008724:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008726:	2300      	movs	r3, #0
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	4b11      	ldr	r3, [pc, #68]	; (8008770 <prvCheckForValidListAndQueue+0x74>)
 800872c:	4a11      	ldr	r2, [pc, #68]	; (8008774 <prvCheckForValidListAndQueue+0x78>)
 800872e:	2110      	movs	r1, #16
 8008730:	200a      	movs	r0, #10
 8008732:	f7fd fcbd 	bl	80060b0 <xQueueGenericCreateStatic>
 8008736:	4603      	mov	r3, r0
 8008738:	4a08      	ldr	r2, [pc, #32]	; (800875c <prvCheckForValidListAndQueue+0x60>)
 800873a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800873c:	4b07      	ldr	r3, [pc, #28]	; (800875c <prvCheckForValidListAndQueue+0x60>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <prvCheckForValidListAndQueue+0x60>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	490b      	ldr	r1, [pc, #44]	; (8008778 <prvCheckForValidListAndQueue+0x7c>)
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe fc34 	bl	8006fb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008750:	f000 f970 	bl	8008a34 <vPortExitCritical>
}
 8008754:	bf00      	nop
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200030bc 	.word	0x200030bc
 8008760:	2000308c 	.word	0x2000308c
 8008764:	200030a0 	.word	0x200030a0
 8008768:	200030b4 	.word	0x200030b4
 800876c:	200030b8 	.word	0x200030b8
 8008770:	20003168 	.word	0x20003168
 8008774:	200030c8 	.word	0x200030c8
 8008778:	0800effc 	.word	0x0800effc

0800877c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3b04      	subs	r3, #4
 800878c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3b04      	subs	r3, #4
 800879a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f023 0201 	bic.w	r2, r3, #1
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3b04      	subs	r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087ac:	4a0c      	ldr	r2, [pc, #48]	; (80087e0 <pxPortInitialiseStack+0x64>)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3b14      	subs	r3, #20
 80087b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3b04      	subs	r3, #4
 80087c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f06f 0202 	mvn.w	r2, #2
 80087ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3b20      	subs	r3, #32
 80087d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087d2:	68fb      	ldr	r3, [r7, #12]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	080087e5 	.word	0x080087e5

080087e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087ee:	4b12      	ldr	r3, [pc, #72]	; (8008838 <prvTaskExitError+0x54>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d00a      	beq.n	800880e <prvTaskExitError+0x2a>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	60fb      	str	r3, [r7, #12]
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <prvTaskExitError+0x28>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	60bb      	str	r3, [r7, #8]
}
 8008820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008822:	bf00      	nop
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0fc      	beq.n	8008824 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800882a:	bf00      	nop
 800882c:	bf00      	nop
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	20000044 	.word	0x20000044
 800883c:	00000000 	.word	0x00000000

08008840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008840:	4b07      	ldr	r3, [pc, #28]	; (8008860 <pxCurrentTCBConst2>)
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	6808      	ldr	r0, [r1, #0]
 8008846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	f380 8809 	msr	PSP, r0
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f04f 0000 	mov.w	r0, #0
 8008856:	f380 8811 	msr	BASEPRI, r0
 800885a:	4770      	bx	lr
 800885c:	f3af 8000 	nop.w

08008860 <pxCurrentTCBConst2>:
 8008860:	20002b8c 	.word	0x20002b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008868:	4808      	ldr	r0, [pc, #32]	; (800888c <prvPortStartFirstTask+0x24>)
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	6800      	ldr	r0, [r0, #0]
 800886e:	f380 8808 	msr	MSP, r0
 8008872:	f04f 0000 	mov.w	r0, #0
 8008876:	f380 8814 	msr	CONTROL, r0
 800887a:	b662      	cpsie	i
 800887c:	b661      	cpsie	f
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	df00      	svc	0
 8008888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800888a:	bf00      	nop
 800888c:	e000ed08 	.word	0xe000ed08

08008890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008896:	4b46      	ldr	r3, [pc, #280]	; (80089b0 <xPortStartScheduler+0x120>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a46      	ldr	r2, [pc, #280]	; (80089b4 <xPortStartScheduler+0x124>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d10a      	bne.n	80088b6 <xPortStartScheduler+0x26>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088b6:	4b3e      	ldr	r3, [pc, #248]	; (80089b0 <xPortStartScheduler+0x120>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a3f      	ldr	r2, [pc, #252]	; (80089b8 <xPortStartScheduler+0x128>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d10a      	bne.n	80088d6 <xPortStartScheduler+0x46>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	60fb      	str	r3, [r7, #12]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088d6:	4b39      	ldr	r3, [pc, #228]	; (80089bc <xPortStartScheduler+0x12c>)
 80088d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	22ff      	movs	r2, #255	; 0xff
 80088e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	4b31      	ldr	r3, [pc, #196]	; (80089c0 <xPortStartScheduler+0x130>)
 80088fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088fe:	4b31      	ldr	r3, [pc, #196]	; (80089c4 <xPortStartScheduler+0x134>)
 8008900:	2207      	movs	r2, #7
 8008902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008904:	e009      	b.n	800891a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008906:	4b2f      	ldr	r3, [pc, #188]	; (80089c4 <xPortStartScheduler+0x134>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3b01      	subs	r3, #1
 800890c:	4a2d      	ldr	r2, [pc, #180]	; (80089c4 <xPortStartScheduler+0x134>)
 800890e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	005b      	lsls	r3, r3, #1
 8008916:	b2db      	uxtb	r3, r3
 8008918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	2b80      	cmp	r3, #128	; 0x80
 8008924:	d0ef      	beq.n	8008906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008926:	4b27      	ldr	r3, [pc, #156]	; (80089c4 <xPortStartScheduler+0x134>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f1c3 0307 	rsb	r3, r3, #7
 800892e:	2b04      	cmp	r3, #4
 8008930:	d00a      	beq.n	8008948 <xPortStartScheduler+0xb8>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60bb      	str	r3, [r7, #8]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008948:	4b1e      	ldr	r3, [pc, #120]	; (80089c4 <xPortStartScheduler+0x134>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	4a1d      	ldr	r2, [pc, #116]	; (80089c4 <xPortStartScheduler+0x134>)
 8008950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008952:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <xPortStartScheduler+0x134>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800895a:	4a1a      	ldr	r2, [pc, #104]	; (80089c4 <xPortStartScheduler+0x134>)
 800895c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	b2da      	uxtb	r2, r3
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008966:	4b18      	ldr	r3, [pc, #96]	; (80089c8 <xPortStartScheduler+0x138>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a17      	ldr	r2, [pc, #92]	; (80089c8 <xPortStartScheduler+0x138>)
 800896c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008972:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <xPortStartScheduler+0x138>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a14      	ldr	r2, [pc, #80]	; (80089c8 <xPortStartScheduler+0x138>)
 8008978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800897c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800897e:	f000 f8dd 	bl	8008b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008982:	4b12      	ldr	r3, [pc, #72]	; (80089cc <xPortStartScheduler+0x13c>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008988:	f000 f8fc 	bl	8008b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800898c:	4b10      	ldr	r3, [pc, #64]	; (80089d0 <xPortStartScheduler+0x140>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a0f      	ldr	r2, [pc, #60]	; (80089d0 <xPortStartScheduler+0x140>)
 8008992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008998:	f7ff ff66 	bl	8008868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800899c:	f7fe ff46 	bl	800782c <vTaskSwitchContext>
	prvTaskExitError();
 80089a0:	f7ff ff20 	bl	80087e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	e000ed00 	.word	0xe000ed00
 80089b4:	410fc271 	.word	0x410fc271
 80089b8:	410fc270 	.word	0x410fc270
 80089bc:	e000e400 	.word	0xe000e400
 80089c0:	200031b8 	.word	0x200031b8
 80089c4:	200031bc 	.word	0x200031bc
 80089c8:	e000ed20 	.word	0xe000ed20
 80089cc:	20000044 	.word	0x20000044
 80089d0:	e000ef34 	.word	0xe000ef34

080089d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	607b      	str	r3, [r7, #4]
}
 80089ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089ee:	4b0f      	ldr	r3, [pc, #60]	; (8008a2c <vPortEnterCritical+0x58>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3301      	adds	r3, #1
 80089f4:	4a0d      	ldr	r2, [pc, #52]	; (8008a2c <vPortEnterCritical+0x58>)
 80089f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089f8:	4b0c      	ldr	r3, [pc, #48]	; (8008a2c <vPortEnterCritical+0x58>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d10f      	bne.n	8008a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <vPortEnterCritical+0x5c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	603b      	str	r3, [r7, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <vPortEnterCritical+0x4a>
	}
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	20000044 	.word	0x20000044
 8008a30:	e000ed04 	.word	0xe000ed04

08008a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a3a:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <vPortExitCritical+0x50>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <vPortExitCritical+0x24>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	607b      	str	r3, [r7, #4]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a58:	4b0a      	ldr	r3, [pc, #40]	; (8008a84 <vPortExitCritical+0x50>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <vPortExitCritical+0x50>)
 8008a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a62:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <vPortExitCritical+0x50>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d105      	bne.n	8008a76 <vPortExitCritical+0x42>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	f383 8811 	msr	BASEPRI, r3
}
 8008a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20000044 	.word	0x20000044
	...

08008a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a90:	f3ef 8009 	mrs	r0, PSP
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <pxCurrentTCBConst>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	f01e 0f10 	tst.w	lr, #16
 8008aa0:	bf08      	it	eq
 8008aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aaa:	6010      	str	r0, [r2, #0]
 8008aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ab4:	f380 8811 	msr	BASEPRI, r0
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f7fe feb4 	bl	800782c <vTaskSwitchContext>
 8008ac4:	f04f 0000 	mov.w	r0, #0
 8008ac8:	f380 8811 	msr	BASEPRI, r0
 8008acc:	bc09      	pop	{r0, r3}
 8008ace:	6819      	ldr	r1, [r3, #0]
 8008ad0:	6808      	ldr	r0, [r1, #0]
 8008ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad6:	f01e 0f10 	tst.w	lr, #16
 8008ada:	bf08      	it	eq
 8008adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ae0:	f380 8809 	msr	PSP, r0
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w

08008af0 <pxCurrentTCBConst>:
 8008af0:	20002b8c 	.word	0x20002b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop

08008af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	607b      	str	r3, [r7, #4]
}
 8008b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b12:	f7fe fdd1 	bl	80076b8 <xTaskIncrementTick>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b1c:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <xPortSysTickHandler+0x40>)
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	2300      	movs	r3, #0
 8008b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f383 8811 	msr	BASEPRI, r3
}
 8008b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b30:	bf00      	nop
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <vPortSetupTimerInterrupt+0x34>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b46:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <vPortSetupTimerInterrupt+0x38>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <vPortSetupTimerInterrupt+0x3c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a0a      	ldr	r2, [pc, #40]	; (8008b7c <vPortSetupTimerInterrupt+0x40>)
 8008b52:	fba2 2303 	umull	r2, r3, r2, r3
 8008b56:	099b      	lsrs	r3, r3, #6
 8008b58:	4a09      	ldr	r2, [pc, #36]	; (8008b80 <vPortSetupTimerInterrupt+0x44>)
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b5e:	4b04      	ldr	r3, [pc, #16]	; (8008b70 <vPortSetupTimerInterrupt+0x34>)
 8008b60:	2207      	movs	r2, #7
 8008b62:	601a      	str	r2, [r3, #0]
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	e000e010 	.word	0xe000e010
 8008b74:	e000e018 	.word	0xe000e018
 8008b78:	20000038 	.word	0x20000038
 8008b7c:	10624dd3 	.word	0x10624dd3
 8008b80:	e000e014 	.word	0xe000e014

08008b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b94 <vPortEnableVFP+0x10>
 8008b88:	6801      	ldr	r1, [r0, #0]
 8008b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b8e:	6001      	str	r1, [r0, #0]
 8008b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b92:	bf00      	nop
 8008b94:	e000ed88 	.word	0xe000ed88

08008b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b9e:	f3ef 8305 	mrs	r3, IPSR
 8008ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b0f      	cmp	r3, #15
 8008ba8:	d914      	bls.n	8008bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008baa:	4a17      	ldr	r2, [pc, #92]	; (8008c08 <vPortValidateInterruptPriority+0x70>)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bb4:	4b15      	ldr	r3, [pc, #84]	; (8008c0c <vPortValidateInterruptPriority+0x74>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	7afa      	ldrb	r2, [r7, #11]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d20a      	bcs.n	8008bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	607b      	str	r3, [r7, #4]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bd4:	4b0e      	ldr	r3, [pc, #56]	; (8008c10 <vPortValidateInterruptPriority+0x78>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bdc:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <vPortValidateInterruptPriority+0x7c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d90a      	bls.n	8008bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	603b      	str	r3, [r7, #0]
}
 8008bf6:	bf00      	nop
 8008bf8:	e7fe      	b.n	8008bf8 <vPortValidateInterruptPriority+0x60>
	}
 8008bfa:	bf00      	nop
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	e000e3f0 	.word	0xe000e3f0
 8008c0c:	200031b8 	.word	0x200031b8
 8008c10:	e000ed0c 	.word	0xe000ed0c
 8008c14:	200031bc 	.word	0x200031bc

08008c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08a      	sub	sp, #40	; 0x28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c24:	f7fe fc8c 	bl	8007540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c28:	4b5b      	ldr	r3, [pc, #364]	; (8008d98 <pvPortMalloc+0x180>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c30:	f000 f920 	bl	8008e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c34:	4b59      	ldr	r3, [pc, #356]	; (8008d9c <pvPortMalloc+0x184>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f040 8093 	bne.w	8008d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01d      	beq.n	8008c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c48:	2208      	movs	r2, #8
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d014      	beq.n	8008c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f023 0307 	bic.w	r3, r3, #7
 8008c60:	3308      	adds	r3, #8
 8008c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <pvPortMalloc+0x6c>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	617b      	str	r3, [r7, #20]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d06e      	beq.n	8008d68 <pvPortMalloc+0x150>
 8008c8a:	4b45      	ldr	r3, [pc, #276]	; (8008da0 <pvPortMalloc+0x188>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d869      	bhi.n	8008d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c94:	4b43      	ldr	r3, [pc, #268]	; (8008da4 <pvPortMalloc+0x18c>)
 8008c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c98:	4b42      	ldr	r3, [pc, #264]	; (8008da4 <pvPortMalloc+0x18c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c9e:	e004      	b.n	8008caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d903      	bls.n	8008cbc <pvPortMalloc+0xa4>
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1f1      	bne.n	8008ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cbc:	4b36      	ldr	r3, [pc, #216]	; (8008d98 <pvPortMalloc+0x180>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d050      	beq.n	8008d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2208      	movs	r2, #8
 8008ccc:	4413      	add	r3, r2
 8008cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d91f      	bls.n	8008d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4413      	add	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <pvPortMalloc+0xf8>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	613b      	str	r3, [r7, #16]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	1ad2      	subs	r2, r2, r3
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d22:	69b8      	ldr	r0, [r7, #24]
 8008d24:	f000 f908 	bl	8008f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d28:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <pvPortMalloc+0x188>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	4a1b      	ldr	r2, [pc, #108]	; (8008da0 <pvPortMalloc+0x188>)
 8008d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d36:	4b1a      	ldr	r3, [pc, #104]	; (8008da0 <pvPortMalloc+0x188>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <pvPortMalloc+0x190>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d203      	bcs.n	8008d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d42:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <pvPortMalloc+0x188>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a18      	ldr	r2, [pc, #96]	; (8008da8 <pvPortMalloc+0x190>)
 8008d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <pvPortMalloc+0x184>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <pvPortMalloc+0x194>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3301      	adds	r3, #1
 8008d64:	4a11      	ldr	r2, [pc, #68]	; (8008dac <pvPortMalloc+0x194>)
 8008d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d68:	f7fe fbf8 	bl	800755c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <pvPortMalloc+0x174>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	60fb      	str	r3, [r7, #12]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <pvPortMalloc+0x172>
	return pvReturn;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3728      	adds	r7, #40	; 0x28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20008f88 	.word	0x20008f88
 8008d9c:	20008f9c 	.word	0x20008f9c
 8008da0:	20008f8c 	.word	0x20008f8c
 8008da4:	20008f80 	.word	0x20008f80
 8008da8:	20008f90 	.word	0x20008f90
 8008dac:	20008f94 	.word	0x20008f94

08008db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d04d      	beq.n	8008e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dc2:	2308      	movs	r3, #8
 8008dc4:	425b      	negs	r3, r3
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4413      	add	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	4b24      	ldr	r3, [pc, #144]	; (8008e68 <vPortFree+0xb8>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <vPortFree+0x44>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	60fb      	str	r3, [r7, #12]
}
 8008df0:	bf00      	nop
 8008df2:	e7fe      	b.n	8008df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <vPortFree+0x62>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	60bb      	str	r3, [r7, #8]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <vPortFree+0xb8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01e      	beq.n	8008e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d11a      	bne.n	8008e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <vPortFree+0xb8>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	43db      	mvns	r3, r3
 8008e32:	401a      	ands	r2, r3
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e38:	f7fe fb82 	bl	8007540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <vPortFree+0xbc>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4413      	add	r3, r2
 8008e46:	4a09      	ldr	r2, [pc, #36]	; (8008e6c <vPortFree+0xbc>)
 8008e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e4a:	6938      	ldr	r0, [r7, #16]
 8008e4c:	f000 f874 	bl	8008f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <vPortFree+0xc0>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3301      	adds	r3, #1
 8008e56:	4a06      	ldr	r2, [pc, #24]	; (8008e70 <vPortFree+0xc0>)
 8008e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e5a:	f7fe fb7f 	bl	800755c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e5e:	bf00      	nop
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20008f9c 	.word	0x20008f9c
 8008e6c:	20008f8c 	.word	0x20008f8c
 8008e70:	20008f98 	.word	0x20008f98

08008e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e7a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8008e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e80:	4b27      	ldr	r3, [pc, #156]	; (8008f20 <prvHeapInit+0xac>)
 8008e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00c      	beq.n	8008ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3307      	adds	r3, #7
 8008e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0307 	bic.w	r3, r3, #7
 8008e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	4a1f      	ldr	r2, [pc, #124]	; (8008f20 <prvHeapInit+0xac>)
 8008ea4:	4413      	add	r3, r2
 8008ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008eac:	4a1d      	ldr	r2, [pc, #116]	; (8008f24 <prvHeapInit+0xb0>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008eb2:	4b1c      	ldr	r3, [pc, #112]	; (8008f24 <prvHeapInit+0xb0>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ec0:	2208      	movs	r2, #8
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1a9b      	subs	r3, r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 0307 	bic.w	r3, r3, #7
 8008ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <prvHeapInit+0xb4>)
 8008ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <prvHeapInit+0xb4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2200      	movs	r2, #0
 8008edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ede:	4b12      	ldr	r3, [pc, #72]	; (8008f28 <prvHeapInit+0xb4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <prvHeapInit+0xb4>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	4a0a      	ldr	r2, [pc, #40]	; (8008f2c <prvHeapInit+0xb8>)
 8008f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	4a09      	ldr	r2, [pc, #36]	; (8008f30 <prvHeapInit+0xbc>)
 8008f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f0c:	4b09      	ldr	r3, [pc, #36]	; (8008f34 <prvHeapInit+0xc0>)
 8008f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f12:	601a      	str	r2, [r3, #0]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	200031c0 	.word	0x200031c0
 8008f24:	20008f80 	.word	0x20008f80
 8008f28:	20008f88 	.word	0x20008f88
 8008f2c:	20008f90 	.word	0x20008f90
 8008f30:	20008f8c 	.word	0x20008f8c
 8008f34:	20008f9c 	.word	0x20008f9c

08008f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f40:	4b28      	ldr	r3, [pc, #160]	; (8008fe4 <prvInsertBlockIntoFreeList+0xac>)
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	e002      	b.n	8008f4c <prvInsertBlockIntoFreeList+0x14>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d8f7      	bhi.n	8008f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d108      	bne.n	8008f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	441a      	add	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	441a      	add	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d118      	bne.n	8008fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d00d      	beq.n	8008fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	441a      	add	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e008      	b.n	8008fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fb6:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	e003      	b.n	8008fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d002      	beq.n	8008fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fd6:	bf00      	nop
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20008f80 	.word	0x20008f80
 8008fe8:	20008f88 	.word	0x20008f88

08008fec <har_configure_activations>:


AI_DECLARE_STATIC
ai_bool har_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8008ffa:	f107 030c 	add.w	r3, r7, #12
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	2101      	movs	r1, #1
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fa48 	bl	8009498 <ai_platform_get_activations_map>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d059      	beq.n	80090c2 <har_configure_activations+0xd6>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800900e:	4b2f      	ldr	r3, [pc, #188]	; (80090cc <har_configure_activations+0xe0>)
 8009010:	2200      	movs	r2, #0
 8009012:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8009014:	4b2d      	ldr	r3, [pc, #180]	; (80090cc <har_configure_activations+0xe0>)
 8009016:	2200      	movs	r2, #0
 8009018:	60da      	str	r2, [r3, #12]
    lstm_4_output_array.data = AI_PTR(activations_map[0] + 700);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8009020:	4a2b      	ldr	r2, [pc, #172]	; (80090d0 <har_configure_activations+0xe4>)
 8009022:	6093      	str	r3, [r2, #8]
    lstm_4_output_array.data_start = AI_PTR(activations_map[0] + 700);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800902a:	4a29      	ldr	r2, [pc, #164]	; (80090d0 <har_configure_activations+0xe4>)
 800902c:	60d3      	str	r3, [r2, #12]
    average_pooling1d_4_output_array.data = AI_PTR(activations_map[0] + 700);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8009034:	4a27      	ldr	r2, [pc, #156]	; (80090d4 <har_configure_activations+0xe8>)
 8009036:	6093      	str	r3, [r2, #8]
    average_pooling1d_4_output_array.data_start = AI_PTR(activations_map[0] + 700);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800903e:	4a25      	ldr	r2, [pc, #148]	; (80090d4 <har_configure_activations+0xe8>)
 8009040:	60d3      	str	r3, [r2, #12]
    lstm_5_output_array.data = AI_PTR(activations_map[0] + 3200);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8009048:	4a23      	ldr	r2, [pc, #140]	; (80090d8 <har_configure_activations+0xec>)
 800904a:	6093      	str	r3, [r2, #8]
    lstm_5_output_array.data_start = AI_PTR(activations_map[0] + 3200);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8009052:	4a21      	ldr	r2, [pc, #132]	; (80090d8 <har_configure_activations+0xec>)
 8009054:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4a20      	ldr	r2, [pc, #128]	; (80090dc <har_configure_activations+0xf0>)
 800905a:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4a1f      	ldr	r2, [pc, #124]	; (80090dc <har_configure_activations+0xf0>)
 8009060:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(activations_map[0] + 120);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3378      	adds	r3, #120	; 0x78
 8009066:	4a1e      	ldr	r2, [pc, #120]	; (80090e0 <har_configure_activations+0xf4>)
 8009068:	6093      	str	r3, [r2, #8]
    dense_3_nl_output_array.data_start = AI_PTR(activations_map[0] + 120);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3378      	adds	r3, #120	; 0x78
 800906e:	4a1c      	ldr	r2, [pc, #112]	; (80090e0 <har_configure_activations+0xf4>)
 8009070:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	4a1b      	ldr	r2, [pc, #108]	; (80090e4 <har_configure_activations+0xf8>)
 8009076:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <har_configure_activations+0xf8>)
 800907c:	60d3      	str	r3, [r2, #12]
    dense_4_nl_output_array.data = AI_PTR(activations_map[0] + 80);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3350      	adds	r3, #80	; 0x50
 8009082:	4a19      	ldr	r2, [pc, #100]	; (80090e8 <har_configure_activations+0xfc>)
 8009084:	6093      	str	r3, [r2, #8]
    dense_4_nl_output_array.data_start = AI_PTR(activations_map[0] + 80);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3350      	adds	r3, #80	; 0x50
 800908a:	4a17      	ldr	r2, [pc, #92]	; (80090e8 <har_configure_activations+0xfc>)
 800908c:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations_map[0] + 0);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4a16      	ldr	r2, [pc, #88]	; (80090ec <har_configure_activations+0x100>)
 8009092:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4a15      	ldr	r2, [pc, #84]	; (80090ec <har_configure_activations+0x100>)
 8009098:	60d3      	str	r3, [r2, #12]
    dense_5_nl_output_array.data = AI_PTR(NULL);
 800909a:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <har_configure_activations+0x104>)
 800909c:	2200      	movs	r2, #0
 800909e:	609a      	str	r2, [r3, #8]
    dense_5_nl_output_array.data_start = AI_PTR(NULL);
 80090a0:	4b13      	ldr	r3, [pc, #76]	; (80090f0 <har_configure_activations+0x104>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	60da      	str	r2, [r3, #12]
    lstm_4_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4a12      	ldr	r2, [pc, #72]	; (80090f4 <har_configure_activations+0x108>)
 80090aa:	6093      	str	r3, [r2, #8]
    lstm_4_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4a11      	ldr	r2, [pc, #68]	; (80090f4 <har_configure_activations+0x108>)
 80090b0:	60d3      	str	r3, [r2, #12]
    lstm_5_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	4a10      	ldr	r2, [pc, #64]	; (80090f8 <har_configure_activations+0x10c>)
 80090b6:	6093      	str	r3, [r2, #8]
    lstm_5_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a0f      	ldr	r2, [pc, #60]	; (80090f8 <har_configure_activations+0x10c>)
 80090bc:	60d3      	str	r3, [r2, #12]
    
    return true;
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <har_configure_activations+0xd8>
  }
  return false;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	20000048 	.word	0x20000048
 80090d0:	20000058 	.word	0x20000058
 80090d4:	20000068 	.word	0x20000068
 80090d8:	20000078 	.word	0x20000078
 80090dc:	20000088 	.word	0x20000088
 80090e0:	20000098 	.word	0x20000098
 80090e4:	200000a8 	.word	0x200000a8
 80090e8:	200000b8 	.word	0x200000b8
 80090ec:	200000c8 	.word	0x200000c8
 80090f0:	200000d8 	.word	0x200000d8
 80090f4:	200001c8 	.word	0x200001c8
 80090f8:	200001d8 	.word	0x200001d8

080090fc <har_configure_weights>:


AI_DECLARE_STATIC
ai_bool har_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800910a:	f107 030c 	add.w	r3, r7, #12
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	2101      	movs	r1, #1
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f98c 	bl	8009430 <ai_platform_get_weights_map>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80f6 	beq.w	800930c <har_configure_weights+0x210>
    /* Updating weights with array addresses */
    
    lstm_4_kernel_array.format |= AI_FMT_FLAG_CONST;
 8009120:	4b7d      	ldr	r3, [pc, #500]	; (8009318 <har_configure_weights+0x21c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009128:	4a7b      	ldr	r2, [pc, #492]	; (8009318 <har_configure_weights+0x21c>)
 800912a:	6013      	str	r3, [r2, #0]
    lstm_4_kernel_array.data = AI_PTR(weights_map[0] + 0);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4a7a      	ldr	r2, [pc, #488]	; (8009318 <har_configure_weights+0x21c>)
 8009130:	6093      	str	r3, [r2, #8]
    lstm_4_kernel_array.data_start = AI_PTR(weights_map[0] + 0);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4a78      	ldr	r2, [pc, #480]	; (8009318 <har_configure_weights+0x21c>)
 8009136:	60d3      	str	r3, [r2, #12]
    lstm_4_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8009138:	4b78      	ldr	r3, [pc, #480]	; (800931c <har_configure_weights+0x220>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009140:	4a76      	ldr	r2, [pc, #472]	; (800931c <har_configure_weights+0x220>)
 8009142:	6013      	str	r3, [r2, #0]
    lstm_4_recurrent_array.data = AI_PTR(weights_map[0] + 3600);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800914a:	4a74      	ldr	r2, [pc, #464]	; (800931c <har_configure_weights+0x220>)
 800914c:	6093      	str	r3, [r2, #8]
    lstm_4_recurrent_array.data_start = AI_PTR(weights_map[0] + 3600);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8009154:	4a71      	ldr	r2, [pc, #452]	; (800931c <har_configure_weights+0x220>)
 8009156:	60d3      	str	r3, [r2, #12]
    lstm_4_peephole_array.format |= AI_FMT_FLAG_CONST;
 8009158:	4b71      	ldr	r3, [pc, #452]	; (8009320 <har_configure_weights+0x224>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009160:	4a6f      	ldr	r2, [pc, #444]	; (8009320 <har_configure_weights+0x224>)
 8009162:	6013      	str	r3, [r2, #0]
    lstm_4_peephole_array.data = AI_PTR(weights_map[0] + 13600);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 800916a:	3320      	adds	r3, #32
 800916c:	4a6c      	ldr	r2, [pc, #432]	; (8009320 <har_configure_weights+0x224>)
 800916e:	6093      	str	r3, [r2, #8]
    lstm_4_peephole_array.data_start = AI_PTR(weights_map[0] + 13600);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 8009176:	3320      	adds	r3, #32
 8009178:	4a69      	ldr	r2, [pc, #420]	; (8009320 <har_configure_weights+0x224>)
 800917a:	60d3      	str	r3, [r2, #12]
    lstm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800917c:	4b69      	ldr	r3, [pc, #420]	; (8009324 <har_configure_weights+0x228>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009184:	4a67      	ldr	r2, [pc, #412]	; (8009324 <har_configure_weights+0x228>)
 8009186:	6013      	str	r3, [r2, #0]
    lstm_4_bias_array.data = AI_PTR(weights_map[0] + 13900);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 800918e:	330c      	adds	r3, #12
 8009190:	4a64      	ldr	r2, [pc, #400]	; (8009324 <har_configure_weights+0x228>)
 8009192:	6093      	str	r3, [r2, #8]
    lstm_4_bias_array.data_start = AI_PTR(weights_map[0] + 13900);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 800919a:	330c      	adds	r3, #12
 800919c:	4a61      	ldr	r2, [pc, #388]	; (8009324 <har_configure_weights+0x228>)
 800919e:	60d3      	str	r3, [r2, #12]
    lstm_5_kernel_array.format |= AI_FMT_FLAG_CONST;
 80091a0:	4b61      	ldr	r3, [pc, #388]	; (8009328 <har_configure_weights+0x22c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091a8:	4a5f      	ldr	r2, [pc, #380]	; (8009328 <har_configure_weights+0x22c>)
 80091aa:	6013      	str	r3, [r2, #0]
    lstm_5_kernel_array.data = AI_PTR(weights_map[0] + 14300);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f503 535f 	add.w	r3, r3, #14272	; 0x37c0
 80091b2:	331c      	adds	r3, #28
 80091b4:	4a5c      	ldr	r2, [pc, #368]	; (8009328 <har_configure_weights+0x22c>)
 80091b6:	6093      	str	r3, [r2, #8]
    lstm_5_kernel_array.data_start = AI_PTR(weights_map[0] + 14300);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 535f 	add.w	r3, r3, #14272	; 0x37c0
 80091be:	331c      	adds	r3, #28
 80091c0:	4a59      	ldr	r2, [pc, #356]	; (8009328 <har_configure_weights+0x22c>)
 80091c2:	60d3      	str	r3, [r2, #12]
    lstm_5_recurrent_array.format |= AI_FMT_FLAG_CONST;
 80091c4:	4b59      	ldr	r3, [pc, #356]	; (800932c <har_configure_weights+0x230>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091cc:	4a57      	ldr	r2, [pc, #348]	; (800932c <har_configure_weights+0x230>)
 80091ce:	6013      	str	r3, [r2, #0]
    lstm_5_recurrent_array.data = AI_PTR(weights_map[0] + 24300);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80091d6:	336c      	adds	r3, #108	; 0x6c
 80091d8:	4a54      	ldr	r2, [pc, #336]	; (800932c <har_configure_weights+0x230>)
 80091da:	6093      	str	r3, [r2, #8]
    lstm_5_recurrent_array.data_start = AI_PTR(weights_map[0] + 24300);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80091e2:	336c      	adds	r3, #108	; 0x6c
 80091e4:	4a51      	ldr	r2, [pc, #324]	; (800932c <har_configure_weights+0x230>)
 80091e6:	60d3      	str	r3, [r2, #12]
    lstm_5_peephole_array.format |= AI_FMT_FLAG_CONST;
 80091e8:	4b51      	ldr	r3, [pc, #324]	; (8009330 <har_configure_weights+0x234>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091f0:	4a4f      	ldr	r2, [pc, #316]	; (8009330 <har_configure_weights+0x234>)
 80091f2:	6013      	str	r3, [r2, #0]
    lstm_5_peephole_array.data = AI_PTR(weights_map[0] + 34300);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 80091fa:	33fc      	adds	r3, #252	; 0xfc
 80091fc:	4a4c      	ldr	r2, [pc, #304]	; (8009330 <har_configure_weights+0x234>)
 80091fe:	6093      	str	r3, [r2, #8]
    lstm_5_peephole_array.data_start = AI_PTR(weights_map[0] + 34300);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8009206:	33fc      	adds	r3, #252	; 0xfc
 8009208:	4a49      	ldr	r2, [pc, #292]	; (8009330 <har_configure_weights+0x234>)
 800920a:	60d3      	str	r3, [r2, #12]
    lstm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800920c:	4b49      	ldr	r3, [pc, #292]	; (8009334 <har_configure_weights+0x238>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009214:	4a47      	ldr	r2, [pc, #284]	; (8009334 <har_configure_weights+0x238>)
 8009216:	6013      	str	r3, [r2, #0]
    lstm_5_bias_array.data = AI_PTR(weights_map[0] + 34600);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f503 4307 	add.w	r3, r3, #34560	; 0x8700
 800921e:	3328      	adds	r3, #40	; 0x28
 8009220:	4a44      	ldr	r2, [pc, #272]	; (8009334 <har_configure_weights+0x238>)
 8009222:	6093      	str	r3, [r2, #8]
    lstm_5_bias_array.data_start = AI_PTR(weights_map[0] + 34600);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 4307 	add.w	r3, r3, #34560	; 0x8700
 800922a:	3328      	adds	r3, #40	; 0x28
 800922c:	4a41      	ldr	r2, [pc, #260]	; (8009334 <har_configure_weights+0x238>)
 800922e:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8009230:	4b41      	ldr	r3, [pc, #260]	; (8009338 <har_configure_weights+0x23c>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009238:	4a3f      	ldr	r2, [pc, #252]	; (8009338 <har_configure_weights+0x23c>)
 800923a:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights_map[0] + 35000);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 8009242:	33b8      	adds	r3, #184	; 0xb8
 8009244:	4a3c      	ldr	r2, [pc, #240]	; (8009338 <har_configure_weights+0x23c>)
 8009246:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights_map[0] + 35000);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 800924e:	33b8      	adds	r3, #184	; 0xb8
 8009250:	4a39      	ldr	r2, [pc, #228]	; (8009338 <har_configure_weights+0x23c>)
 8009252:	60d3      	str	r3, [r2, #12]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8009254:	4b39      	ldr	r3, [pc, #228]	; (800933c <har_configure_weights+0x240>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800925c:	4a37      	ldr	r2, [pc, #220]	; (800933c <har_configure_weights+0x240>)
 800925e:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights_map[0] + 38000);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f503 4314 	add.w	r3, r3, #37888	; 0x9400
 8009266:	3370      	adds	r3, #112	; 0x70
 8009268:	4a34      	ldr	r2, [pc, #208]	; (800933c <har_configure_weights+0x240>)
 800926a:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights_map[0] + 38000);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 4314 	add.w	r3, r3, #37888	; 0x9400
 8009272:	3370      	adds	r3, #112	; 0x70
 8009274:	4a31      	ldr	r2, [pc, #196]	; (800933c <har_configure_weights+0x240>)
 8009276:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8009278:	4b31      	ldr	r3, [pc, #196]	; (8009340 <har_configure_weights+0x244>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009280:	4a2f      	ldr	r2, [pc, #188]	; (8009340 <har_configure_weights+0x244>)
 8009282:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights_map[0] + 38120);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f503 4314 	add.w	r3, r3, #37888	; 0x9400
 800928a:	33e8      	adds	r3, #232	; 0xe8
 800928c:	4a2c      	ldr	r2, [pc, #176]	; (8009340 <har_configure_weights+0x244>)
 800928e:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights_map[0] + 38120);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f503 4314 	add.w	r3, r3, #37888	; 0x9400
 8009296:	33e8      	adds	r3, #232	; 0xe8
 8009298:	4a29      	ldr	r2, [pc, #164]	; (8009340 <har_configure_weights+0x244>)
 800929a:	60d3      	str	r3, [r2, #12]
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800929c:	4b29      	ldr	r3, [pc, #164]	; (8009344 <har_configure_weights+0x248>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092a4:	4a27      	ldr	r2, [pc, #156]	; (8009344 <har_configure_weights+0x248>)
 80092a6:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights_map[0] + 40520);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 80092ae:	3348      	adds	r3, #72	; 0x48
 80092b0:	4a24      	ldr	r2, [pc, #144]	; (8009344 <har_configure_weights+0x248>)
 80092b2:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights_map[0] + 40520);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 80092ba:	3348      	adds	r3, #72	; 0x48
 80092bc:	4a21      	ldr	r2, [pc, #132]	; (8009344 <har_configure_weights+0x248>)
 80092be:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 80092c0:	4b21      	ldr	r3, [pc, #132]	; (8009348 <har_configure_weights+0x24c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092c8:	4a1f      	ldr	r2, [pc, #124]	; (8009348 <har_configure_weights+0x24c>)
 80092ca:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights_map[0] + 40600);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 80092d2:	3398      	adds	r3, #152	; 0x98
 80092d4:	4a1c      	ldr	r2, [pc, #112]	; (8009348 <har_configure_weights+0x24c>)
 80092d6:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights_map[0] + 40600);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
 80092de:	3398      	adds	r3, #152	; 0x98
 80092e0:	4a19      	ldr	r2, [pc, #100]	; (8009348 <har_configure_weights+0x24c>)
 80092e2:	60d3      	str	r3, [r2, #12]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80092e4:	4b19      	ldr	r3, [pc, #100]	; (800934c <har_configure_weights+0x250>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ec:	4a17      	ldr	r2, [pc, #92]	; (800934c <har_configure_weights+0x250>)
 80092ee:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights_map[0] + 41080);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80092f6:	3378      	adds	r3, #120	; 0x78
 80092f8:	4a14      	ldr	r2, [pc, #80]	; (800934c <har_configure_weights+0x250>)
 80092fa:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights_map[0] + 41080);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 8009302:	3378      	adds	r3, #120	; 0x78
 8009304:	4a11      	ldr	r2, [pc, #68]	; (800934c <har_configure_weights+0x250>)
 8009306:	60d3      	str	r3, [r2, #12]
    return true;
 8009308:	2301      	movs	r3, #1
 800930a:	e000      	b.n	800930e <har_configure_weights+0x212>
  }
  return false;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	200000e8 	.word	0x200000e8
 800931c:	200000f8 	.word	0x200000f8
 8009320:	20000108 	.word	0x20000108
 8009324:	20000118 	.word	0x20000118
 8009328:	20000128 	.word	0x20000128
 800932c:	20000138 	.word	0x20000138
 8009330:	20000148 	.word	0x20000148
 8009334:	20000158 	.word	0x20000158
 8009338:	20000168 	.word	0x20000168
 800933c:	20000178 	.word	0x20000178
 8009340:	20000188 	.word	0x20000188
 8009344:	20000198 	.word	0x20000198
 8009348:	200001a8 	.word	0x200001a8
 800934c:	200001b8 	.word	0x200001b8

08009350 <ai_har_create>:
}

AI_API_ENTRY
ai_error ai_har_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af02      	add	r7, sp, #8
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800935a:	2300      	movs	r3, #0
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	2304      	movs	r3, #4
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	2301      	movs	r3, #1
 8009364:	4a04      	ldr	r2, [pc, #16]	; (8009378 <ai_har_create+0x28>)
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f8c9 	bl	8009500 <ai_platform_network_create>
 800936e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000c2c 	.word	0x20000c2c

0800937c <ai_har_init>:
}

AI_API_ENTRY
ai_bool ai_har_init(
  ai_handle network, const ai_network_params* params)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f98f 	bl	80096ac <ai_platform_network_init>
 800938e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <ai_har_init+0x1e>
 8009396:	2300      	movs	r3, #0
 8009398:	e028      	b.n	80093ec <ai_har_init+0x70>

  ai_bool ok = true;
 800939a:	2301      	movs	r3, #1
 800939c:	72fb      	strb	r3, [r7, #11]
  ok &= har_configure_weights(net_ctx, params);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff feab 	bl	80090fc <har_configure_weights>
 80093a6:	4603      	mov	r3, r0
 80093a8:	461a      	mov	r2, r3
 80093aa:	7afb      	ldrb	r3, [r7, #11]
 80093ac:	4013      	ands	r3, r2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bf14      	ite	ne
 80093b2:	2301      	movne	r3, #1
 80093b4:	2300      	moveq	r3, #0
 80093b6:	72fb      	strb	r3, [r7, #11]
  ok &= har_configure_activations(net_ctx, params);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f7ff fe16 	bl	8008fec <har_configure_activations>
 80093c0:	4603      	mov	r3, r0
 80093c2:	461a      	mov	r2, r3
 80093c4:	7afb      	ldrb	r3, [r7, #11]
 80093c6:	4013      	ands	r3, r2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	bf14      	ite	ne
 80093cc:	2301      	movne	r3, #1
 80093ce:	2300      	moveq	r3, #0
 80093d0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fa7c 	bl	80098d0 <ai_platform_network_post_init>
 80093d8:	4603      	mov	r3, r0
 80093da:	461a      	mov	r2, r3
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	4013      	ands	r3, r2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bf14      	ite	ne
 80093e4:	2301      	movne	r3, #1
 80093e6:	2300      	moveq	r3, #0
 80093e8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80093ea:	7afb      	ldrb	r3, [r7, #11]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <ai_har_run>:


AI_API_ENTRY
ai_i32 ai_har_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 faf7 	bl	80099f8 <ai_platform_network_process>
 800940a:	4603      	mov	r3, r0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <ai_har_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_har_data_weights_get(void)
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_har_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_har_weights_map);
 8009418:	4b02      	ldr	r3, [pc, #8]	; (8009424 <ai_har_data_weights_get+0x10>)

}
 800941a:	4618      	mov	r0, r3
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	08019910 	.word	0x08019910

08009428 <_ai_platform_acquire_crc>:
 8009428:	2001      	movs	r0, #1
 800942a:	4770      	bx	lr

0800942c <_ai_platform_release_crc>:
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop

08009430 <ai_platform_get_weights_map>:
 8009430:	b132      	cbz	r2, 8009440 <ai_platform_get_weights_map+0x10>
 8009432:	6912      	ldr	r2, [r2, #16]
 8009434:	b122      	cbz	r2, 8009440 <ai_platform_get_weights_map+0x10>
 8009436:	b110      	cbz	r0, 800943e <ai_platform_get_weights_map+0xe>
 8009438:	b921      	cbnz	r1, 8009444 <ai_platform_get_weights_map+0x14>
 800943a:	4608      	mov	r0, r1
 800943c:	4770      	bx	lr
 800943e:	4770      	bx	lr
 8009440:	4610      	mov	r0, r2
 8009442:	4770      	bx	lr
 8009444:	b470      	push	{r4, r5, r6}
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <ai_platform_get_weights_map+0x64>)
 8009448:	6815      	ldr	r5, [r2, #0]
 800944a:	429d      	cmp	r5, r3
 800944c:	d007      	beq.n	800945e <ai_platform_get_weights_map+0x2e>
 800944e:	6002      	str	r2, [r0, #0]
 8009450:	f1a1 0001 	sub.w	r0, r1, #1
 8009454:	fab0 f080 	clz	r0, r0
 8009458:	0940      	lsrs	r0, r0, #5
 800945a:	bc70      	pop	{r4, r5, r6}
 800945c:	4770      	bx	lr
 800945e:	6854      	ldr	r4, [r2, #4]
 8009460:	42ac      	cmp	r4, r5
 8009462:	f102 0204 	add.w	r2, r2, #4
 8009466:	d011      	beq.n	800948c <ai_platform_get_weights_map+0x5c>
 8009468:	1f03      	subs	r3, r0, #4
 800946a:	4616      	mov	r6, r2
 800946c:	2000      	movs	r0, #0
 800946e:	e003      	b.n	8009478 <ai_platform_get_weights_map+0x48>
 8009470:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8009474:	42ac      	cmp	r4, r5
 8009476:	d009      	beq.n	800948c <ai_platform_get_weights_map+0x5c>
 8009478:	3001      	adds	r0, #1
 800947a:	4281      	cmp	r1, r0
 800947c:	f843 4f04 	str.w	r4, [r3, #4]!
 8009480:	d1f6      	bne.n	8009470 <ai_platform_get_weights_map+0x40>
 8009482:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009486:	4b03      	ldr	r3, [pc, #12]	; (8009494 <ai_platform_get_weights_map+0x64>)
 8009488:	429a      	cmp	r2, r3
 800948a:	d001      	beq.n	8009490 <ai_platform_get_weights_map+0x60>
 800948c:	2000      	movs	r0, #0
 800948e:	e7e4      	b.n	800945a <ai_platform_get_weights_map+0x2a>
 8009490:	2001      	movs	r0, #1
 8009492:	e7e2      	b.n	800945a <ai_platform_get_weights_map+0x2a>
 8009494:	a1facade 	.word	0xa1facade

08009498 <ai_platform_get_activations_map>:
 8009498:	b132      	cbz	r2, 80094a8 <ai_platform_get_activations_map+0x10>
 800949a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800949c:	b122      	cbz	r2, 80094a8 <ai_platform_get_activations_map+0x10>
 800949e:	b110      	cbz	r0, 80094a6 <ai_platform_get_activations_map+0xe>
 80094a0:	b921      	cbnz	r1, 80094ac <ai_platform_get_activations_map+0x14>
 80094a2:	4608      	mov	r0, r1
 80094a4:	4770      	bx	lr
 80094a6:	4770      	bx	lr
 80094a8:	4610      	mov	r0, r2
 80094aa:	4770      	bx	lr
 80094ac:	b470      	push	{r4, r5, r6}
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <ai_platform_get_activations_map+0x64>)
 80094b0:	6815      	ldr	r5, [r2, #0]
 80094b2:	429d      	cmp	r5, r3
 80094b4:	d007      	beq.n	80094c6 <ai_platform_get_activations_map+0x2e>
 80094b6:	6002      	str	r2, [r0, #0]
 80094b8:	f1a1 0001 	sub.w	r0, r1, #1
 80094bc:	fab0 f080 	clz	r0, r0
 80094c0:	0940      	lsrs	r0, r0, #5
 80094c2:	bc70      	pop	{r4, r5, r6}
 80094c4:	4770      	bx	lr
 80094c6:	6854      	ldr	r4, [r2, #4]
 80094c8:	42ac      	cmp	r4, r5
 80094ca:	f102 0204 	add.w	r2, r2, #4
 80094ce:	d011      	beq.n	80094f4 <ai_platform_get_activations_map+0x5c>
 80094d0:	1f03      	subs	r3, r0, #4
 80094d2:	4616      	mov	r6, r2
 80094d4:	2000      	movs	r0, #0
 80094d6:	e003      	b.n	80094e0 <ai_platform_get_activations_map+0x48>
 80094d8:	f856 4f04 	ldr.w	r4, [r6, #4]!
 80094dc:	42ac      	cmp	r4, r5
 80094de:	d009      	beq.n	80094f4 <ai_platform_get_activations_map+0x5c>
 80094e0:	3001      	adds	r0, #1
 80094e2:	4281      	cmp	r1, r0
 80094e4:	f843 4f04 	str.w	r4, [r3, #4]!
 80094e8:	d1f6      	bne.n	80094d8 <ai_platform_get_activations_map+0x40>
 80094ea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80094ee:	4b03      	ldr	r3, [pc, #12]	; (80094fc <ai_platform_get_activations_map+0x64>)
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d001      	beq.n	80094f8 <ai_platform_get_activations_map+0x60>
 80094f4:	2000      	movs	r0, #0
 80094f6:	e7e4      	b.n	80094c2 <ai_platform_get_activations_map+0x2a>
 80094f8:	2001      	movs	r0, #1
 80094fa:	e7e2      	b.n	80094c2 <ai_platform_get_activations_map+0x2a>
 80094fc:	a1facade 	.word	0xa1facade

08009500 <ai_platform_network_create>:
 8009500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	4607      	mov	r7, r0
 8009508:	4616      	mov	r6, r2
 800950a:	461d      	mov	r5, r3
 800950c:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8009510:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8009514:	f7ff ff88 	bl	8009428 <_ai_platform_acquire_crc>
 8009518:	b178      	cbz	r0, 800953a <ai_platform_network_create+0x3a>
 800951a:	4b5a      	ldr	r3, [pc, #360]	; (8009684 <ai_platform_network_create+0x184>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009526:	4602      	mov	r2, r0
 8009528:	d00c      	beq.n	8009544 <ai_platform_network_create+0x44>
 800952a:	4b57      	ldr	r3, [pc, #348]	; (8009688 <ai_platform_network_create+0x188>)
 800952c:	2118      	movs	r1, #24
 800952e:	6019      	str	r1, [r3, #0]
 8009530:	6819      	ldr	r1, [r3, #0]
 8009532:	2918      	cmp	r1, #24
 8009534:	d034      	beq.n	80095a0 <ai_platform_network_create+0xa0>
 8009536:	f7ff ff79 	bl	800942c <_ai_platform_release_crc>
 800953a:	f241 0033 	movw	r0, #4147	; 0x1033
 800953e:	b002      	add	sp, #8
 8009540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009544:	4b51      	ldr	r3, [pc, #324]	; (800968c <ai_platform_network_create+0x18c>)
 8009546:	2101      	movs	r1, #1
 8009548:	6019      	str	r1, [r3, #0]
 800954a:	2114      	movs	r1, #20
 800954c:	e001      	b.n	8009552 <ai_platform_network_create+0x52>
 800954e:	3901      	subs	r1, #1
 8009550:	d002      	beq.n	8009558 <ai_platform_network_create+0x58>
 8009552:	6818      	ldr	r0, [r3, #0]
 8009554:	2800      	cmp	r0, #0
 8009556:	d1fa      	bne.n	800954e <ai_platform_network_create+0x4e>
 8009558:	4b4c      	ldr	r3, [pc, #304]	; (800968c <ai_platform_network_create+0x18c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	b9f3      	cbnz	r3, 800959c <ai_platform_network_create+0x9c>
 800955e:	4610      	mov	r0, r2
 8009560:	f7ff ff64 	bl	800942c <_ai_platform_release_crc>
 8009564:	4a4a      	ldr	r2, [pc, #296]	; (8009690 <ai_platform_network_create+0x190>)
 8009566:	6813      	ldr	r3, [r2, #0]
 8009568:	f023 0301 	bic.w	r3, r3, #1
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	f7ff ff5b 	bl	8009428 <_ai_platform_acquire_crc>
 8009572:	4b44      	ldr	r3, [pc, #272]	; (8009684 <ai_platform_network_create+0x184>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800957a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800957e:	d015      	beq.n	80095ac <ai_platform_network_create+0xac>
 8009580:	4b41      	ldr	r3, [pc, #260]	; (8009688 <ai_platform_network_create+0x188>)
 8009582:	2201      	movs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	2a00      	cmp	r2, #0
 800958a:	d1fc      	bne.n	8009586 <ai_platform_network_create+0x86>
 800958c:	4b41      	ldr	r3, [pc, #260]	; (8009694 <ai_platform_network_create+0x194>)
 800958e:	4a42      	ldr	r2, [pc, #264]	; (8009698 <ai_platform_network_create+0x198>)
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	4b41      	ldr	r3, [pc, #260]	; (800969c <ai_platform_network_create+0x19c>)
 8009596:	429a      	cmp	r2, r3
 8009598:	d016      	beq.n	80095c8 <ai_platform_network_create+0xc8>
 800959a:	e7fe      	b.n	800959a <ai_platform_network_create+0x9a>
 800959c:	4610      	mov	r0, r2
 800959e:	e7ca      	b.n	8009536 <ai_platform_network_create+0x36>
 80095a0:	2101      	movs	r1, #1
 80095a2:	6019      	str	r1, [r3, #0]
 80095a4:	6819      	ldr	r1, [r3, #0]
 80095a6:	2900      	cmp	r1, #0
 80095a8:	d1fc      	bne.n	80095a4 <ai_platform_network_create+0xa4>
 80095aa:	e7d8      	b.n	800955e <ai_platform_network_create+0x5e>
 80095ac:	4b37      	ldr	r3, [pc, #220]	; (800968c <ai_platform_network_create+0x18c>)
 80095ae:	2201      	movs	r2, #1
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	d1fc      	bne.n	80095b2 <ai_platform_network_create+0xb2>
 80095b8:	4b39      	ldr	r3, [pc, #228]	; (80096a0 <ai_platform_network_create+0x1a0>)
 80095ba:	4a37      	ldr	r2, [pc, #220]	; (8009698 <ai_platform_network_create+0x198>)
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	4b36      	ldr	r3, [pc, #216]	; (800969c <ai_platform_network_create+0x19c>)
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d000      	beq.n	80095c8 <ai_platform_network_create+0xc8>
 80095c6:	e7fe      	b.n	80095c6 <ai_platform_network_create+0xc6>
 80095c8:	f7ff ff30 	bl	800942c <_ai_platform_release_crc>
 80095cc:	b1af      	cbz	r7, 80095fa <ai_platform_network_create+0xfa>
 80095ce:	4b35      	ldr	r3, [pc, #212]	; (80096a4 <ai_platform_network_create+0x1a4>)
 80095d0:	6033      	str	r3, [r6, #0]
 80095d2:	603e      	str	r6, [r7, #0]
 80095d4:	f000 fc8e 	bl	8009ef4 <core_init>
 80095d8:	b990      	cbnz	r0, 8009600 <ai_platform_network_create+0x100>
 80095da:	062d      	lsls	r5, r5, #24
 80095dc:	0424      	lsls	r4, r4, #16
 80095de:	2230      	movs	r2, #48	; 0x30
 80095e0:	2300      	movs	r3, #0
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	2110      	movs	r1, #16
 80095e6:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 80095ea:	2000      	movs	r0, #0
 80095ec:	432b      	orrs	r3, r5
 80095ee:	f362 0007 	bfi	r0, r2, #0, #8
 80095f2:	6473      	str	r3, [r6, #68]	; 0x44
 80095f4:	f361 201f 	bfi	r0, r1, #8, #24
 80095f8:	e7a1      	b.n	800953e <ai_platform_network_create+0x3e>
 80095fa:	f241 0010 	movw	r0, #4112	; 0x1010
 80095fe:	e79e      	b.n	800953e <ai_platform_network_create+0x3e>
 8009600:	4a23      	ldr	r2, [pc, #140]	; (8009690 <ai_platform_network_create+0x190>)
 8009602:	6813      	ldr	r3, [r2, #0]
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	f7ff ff0d 	bl	8009428 <_ai_platform_acquire_crc>
 800960e:	4b1d      	ldr	r3, [pc, #116]	; (8009684 <ai_platform_network_create+0x184>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800961a:	d00d      	beq.n	8009638 <ai_platform_network_create+0x138>
 800961c:	4b1a      	ldr	r3, [pc, #104]	; (8009688 <ai_platform_network_create+0x188>)
 800961e:	2201      	movs	r2, #1
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	2a00      	cmp	r2, #0
 8009626:	d1fc      	bne.n	8009622 <ai_platform_network_create+0x122>
 8009628:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <ai_platform_network_create+0x194>)
 800962a:	4a1b      	ldr	r2, [pc, #108]	; (8009698 <ai_platform_network_create+0x198>)
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	4b1a      	ldr	r3, [pc, #104]	; (800969c <ai_platform_network_create+0x19c>)
 8009632:	429a      	cmp	r2, r3
 8009634:	d00e      	beq.n	8009654 <ai_platform_network_create+0x154>
 8009636:	e7fe      	b.n	8009636 <ai_platform_network_create+0x136>
 8009638:	4b14      	ldr	r3, [pc, #80]	; (800968c <ai_platform_network_create+0x18c>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	2a00      	cmp	r2, #0
 8009642:	d1fc      	bne.n	800963e <ai_platform_network_create+0x13e>
 8009644:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <ai_platform_network_create+0x1a0>)
 8009646:	4a14      	ldr	r2, [pc, #80]	; (8009698 <ai_platform_network_create+0x198>)
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	4b13      	ldr	r3, [pc, #76]	; (800969c <ai_platform_network_create+0x19c>)
 800964e:	429a      	cmp	r2, r3
 8009650:	d000      	beq.n	8009654 <ai_platform_network_create+0x154>
 8009652:	e7fe      	b.n	8009652 <ai_platform_network_create+0x152>
 8009654:	062d      	lsls	r5, r5, #24
 8009656:	0424      	lsls	r4, r4, #16
 8009658:	f7ff fee8 	bl	800942c <_ai_platform_release_crc>
 800965c:	ea45 0304 	orr.w	r3, r5, r4
 8009660:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8009664:	d001      	beq.n	800966a <ai_platform_network_create+0x16a>
 8009666:	2201      	movs	r2, #1
 8009668:	e7ba      	b.n	80095e0 <ai_platform_network_create+0xe0>
 800966a:	a802      	add	r0, sp, #8
 800966c:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <ai_platform_network_create+0x1a8>)
 800966e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009672:	f002 f8b7 	bl	800b7e4 <ai_check_custom_types>
 8009676:	b110      	cbz	r0, 800967e <ai_platform_network_create+0x17e>
 8009678:	2100      	movs	r1, #0
 800967a:	460a      	mov	r2, r1
 800967c:	e7b3      	b.n	80095e6 <ai_platform_network_create+0xe6>
 800967e:	2202      	movs	r2, #2
 8009680:	e7ae      	b.n	80095e0 <ai_platform_network_create+0xe0>
 8009682:	bf00      	nop
 8009684:	e0042000 	.word	0xe0042000
 8009688:	58024c08 	.word	0x58024c08
 800968c:	40023008 	.word	0x40023008
 8009690:	e0002000 	.word	0xe0002000
 8009694:	58024c00 	.word	0x58024c00
 8009698:	f407a5c2 	.word	0xf407a5c2
 800969c:	b5e8b5cd 	.word	0xb5e8b5cd
 80096a0:	40023000 	.word	0x40023000
 80096a4:	a1c00100 	.word	0xa1c00100
 80096a8:	84048403 	.word	0x84048403

080096ac <ai_platform_network_init>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d04d      	beq.n	8009750 <ai_platform_network_init+0xa4>
 80096b4:	4b7c      	ldr	r3, [pc, #496]	; (80098a8 <ai_platform_network_init+0x1fc>)
 80096b6:	6802      	ldr	r2, [r0, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	4604      	mov	r4, r0
 80096bc:	d148      	bne.n	8009750 <ai_platform_network_init+0xa4>
 80096be:	4a7b      	ldr	r2, [pc, #492]	; (80098ac <ai_platform_network_init+0x200>)
 80096c0:	6813      	ldr	r3, [r2, #0]
 80096c2:	f023 0301 	bic.w	r3, r3, #1
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	460d      	mov	r5, r1
 80096ca:	f7ff fead 	bl	8009428 <_ai_platform_acquire_crc>
 80096ce:	4b78      	ldr	r3, [pc, #480]	; (80098b0 <ai_platform_network_init+0x204>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096da:	d00d      	beq.n	80096f8 <ai_platform_network_init+0x4c>
 80096dc:	4b75      	ldr	r3, [pc, #468]	; (80098b4 <ai_platform_network_init+0x208>)
 80096de:	2201      	movs	r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	d1fc      	bne.n	80096e2 <ai_platform_network_init+0x36>
 80096e8:	4b73      	ldr	r3, [pc, #460]	; (80098b8 <ai_platform_network_init+0x20c>)
 80096ea:	4a74      	ldr	r2, [pc, #464]	; (80098bc <ai_platform_network_init+0x210>)
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	4b73      	ldr	r3, [pc, #460]	; (80098c0 <ai_platform_network_init+0x214>)
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d00d      	beq.n	8009712 <ai_platform_network_init+0x66>
 80096f6:	e7fe      	b.n	80096f6 <ai_platform_network_init+0x4a>
 80096f8:	4b72      	ldr	r3, [pc, #456]	; (80098c4 <ai_platform_network_init+0x218>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	2a00      	cmp	r2, #0
 8009702:	d1fc      	bne.n	80096fe <ai_platform_network_init+0x52>
 8009704:	4b70      	ldr	r3, [pc, #448]	; (80098c8 <ai_platform_network_init+0x21c>)
 8009706:	4a6d      	ldr	r2, [pc, #436]	; (80098bc <ai_platform_network_init+0x210>)
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	4b6c      	ldr	r3, [pc, #432]	; (80098c0 <ai_platform_network_init+0x214>)
 800970e:	429a      	cmp	r2, r3
 8009710:	d11d      	bne.n	800974e <ai_platform_network_init+0xa2>
 8009712:	f7ff fe8b 	bl	800942c <_ai_platform_release_crc>
 8009716:	2d00      	cmp	r5, #0
 8009718:	d076      	beq.n	8009808 <ai_platform_network_init+0x15c>
 800971a:	4b6c      	ldr	r3, [pc, #432]	; (80098cc <ai_platform_network_init+0x220>)
 800971c:	682a      	ldr	r2, [r5, #0]
 800971e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8009722:	429a      	cmp	r2, r3
 8009724:	d030      	beq.n	8009788 <ai_platform_network_init+0xdc>
 8009726:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8009728:	46a9      	mov	r9, r5
 800972a:	f105 0118 	add.w	r1, r5, #24
 800972e:	2e00      	cmp	r6, #0
 8009730:	f000 8095 	beq.w	800985e <ai_platform_network_init+0x1b2>
 8009734:	f1bc 0f00 	cmp.w	ip, #0
 8009738:	f000 80a4 	beq.w	8009884 <ai_platform_network_init+0x1d8>
 800973c:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8009740:	f1b8 0f01 	cmp.w	r8, #1
 8009744:	d16a      	bne.n	800981c <ai_platform_network_init+0x170>
 8009746:	2700      	movs	r7, #0
 8009748:	468c      	mov	ip, r1
 800974a:	83a7      	strh	r7, [r4, #28]
 800974c:	e028      	b.n	80097a0 <ai_platform_network_init+0xf4>
 800974e:	e7fe      	b.n	800974e <ai_platform_network_init+0xa2>
 8009750:	4a56      	ldr	r2, [pc, #344]	; (80098ac <ai_platform_network_init+0x200>)
 8009752:	6813      	ldr	r3, [r2, #0]
 8009754:	f023 0301 	bic.w	r3, r3, #1
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	f7ff fe65 	bl	8009428 <_ai_platform_acquire_crc>
 800975e:	4b54      	ldr	r3, [pc, #336]	; (80098b0 <ai_platform_network_init+0x204>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800976a:	d067      	beq.n	800983c <ai_platform_network_init+0x190>
 800976c:	4b51      	ldr	r3, [pc, #324]	; (80098b4 <ai_platform_network_init+0x208>)
 800976e:	2201      	movs	r2, #1
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	2a00      	cmp	r2, #0
 8009776:	d1fc      	bne.n	8009772 <ai_platform_network_init+0xc6>
 8009778:	4b4f      	ldr	r3, [pc, #316]	; (80098b8 <ai_platform_network_init+0x20c>)
 800977a:	4a50      	ldr	r2, [pc, #320]	; (80098bc <ai_platform_network_init+0x210>)
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	4b4f      	ldr	r3, [pc, #316]	; (80098c0 <ai_platform_network_init+0x214>)
 8009782:	429a      	cmp	r2, r3
 8009784:	d067      	beq.n	8009856 <ai_platform_network_init+0x1aa>
 8009786:	e7fe      	b.n	8009786 <ai_platform_network_init+0xda>
 8009788:	8be1      	ldrh	r1, [r4, #30]
 800978a:	88eb      	ldrh	r3, [r5, #6]
 800978c:	89af      	ldrh	r7, [r5, #12]
 800978e:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8009792:	88aa      	ldrh	r2, [r5, #4]
 8009794:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8009798:	428b      	cmp	r3, r1
 800979a:	d13f      	bne.n	800981c <ai_platform_network_init+0x170>
 800979c:	83a2      	strh	r2, [r4, #28]
 800979e:	b19b      	cbz	r3, 80097c8 <ai_platform_network_init+0x11c>
 80097a0:	f04f 0e00 	mov.w	lr, #0
 80097a4:	46f2      	mov	sl, lr
 80097a6:	eb09 060e 	add.w	r6, r9, lr
 80097aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80097ac:	6a25      	ldr	r5, [r4, #32]
 80097ae:	4475      	add	r5, lr
 80097b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80097b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80097ba:	8be3      	ldrh	r3, [r4, #30]
 80097bc:	f10a 0a01 	add.w	sl, sl, #1
 80097c0:	459a      	cmp	sl, r3
 80097c2:	f10e 0e18 	add.w	lr, lr, #24
 80097c6:	d3ee      	bcc.n	80097a6 <ai_platform_network_init+0xfa>
 80097c8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80097ca:	4598      	cmp	r8, r3
 80097cc:	d12e      	bne.n	800982c <ai_platform_network_init+0x180>
 80097ce:	84a7      	strh	r7, [r4, #36]	; 0x24
 80097d0:	f1b8 0f00 	cmp.w	r8, #0
 80097d4:	d012      	beq.n	80097fc <ai_platform_network_init+0x150>
 80097d6:	2700      	movs	r7, #0
 80097d8:	46be      	mov	lr, r7
 80097da:	eb0c 0607 	add.w	r6, ip, r7
 80097de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80097e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80097e2:	443d      	add	r5, r7
 80097e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80097ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80097ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80097f0:	f10e 0e01 	add.w	lr, lr, #1
 80097f4:	459e      	cmp	lr, r3
 80097f6:	f107 0718 	add.w	r7, r7, #24
 80097fa:	d3ee      	bcc.n	80097da <ai_platform_network_init+0x12e>
 80097fc:	2303      	movs	r3, #3
 80097fe:	60e3      	str	r3, [r4, #12]
 8009800:	4620      	mov	r0, r4
 8009802:	f002 f819 	bl	800b838 <ai_layers_init_all>
 8009806:	e006      	b.n	8009816 <ai_platform_network_init+0x16a>
 8009808:	f104 0010 	add.w	r0, r4, #16
 800980c:	2211      	movs	r2, #17
 800980e:	2110      	movs	r1, #16
 8009810:	462c      	mov	r4, r5
 8009812:	f000 fb71 	bl	8009ef8 <core_set_error>
 8009816:	4620      	mov	r0, r4
 8009818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981c:	f104 0010 	add.w	r0, r4, #16
 8009820:	2212      	movs	r2, #18
 8009822:	2116      	movs	r1, #22
 8009824:	f000 fb68 	bl	8009ef8 <core_set_error>
 8009828:	2400      	movs	r4, #0
 800982a:	e7f4      	b.n	8009816 <ai_platform_network_init+0x16a>
 800982c:	f104 0010 	add.w	r0, r4, #16
 8009830:	2213      	movs	r2, #19
 8009832:	2116      	movs	r1, #22
 8009834:	f000 fb60 	bl	8009ef8 <core_set_error>
 8009838:	2400      	movs	r4, #0
 800983a:	e7ec      	b.n	8009816 <ai_platform_network_init+0x16a>
 800983c:	4b21      	ldr	r3, [pc, #132]	; (80098c4 <ai_platform_network_init+0x218>)
 800983e:	2201      	movs	r2, #1
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	2a00      	cmp	r2, #0
 8009846:	d1fc      	bne.n	8009842 <ai_platform_network_init+0x196>
 8009848:	4b1f      	ldr	r3, [pc, #124]	; (80098c8 <ai_platform_network_init+0x21c>)
 800984a:	4a1c      	ldr	r2, [pc, #112]	; (80098bc <ai_platform_network_init+0x210>)
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	4b1b      	ldr	r3, [pc, #108]	; (80098c0 <ai_platform_network_init+0x214>)
 8009852:	429a      	cmp	r2, r3
 8009854:	d115      	bne.n	8009882 <ai_platform_network_init+0x1d6>
 8009856:	f7ff fde9 	bl	800942c <_ai_platform_release_crc>
 800985a:	2400      	movs	r4, #0
 800985c:	e7db      	b.n	8009816 <ai_platform_network_init+0x16a>
 800985e:	8c28      	ldrh	r0, [r5, #32]
 8009860:	8bea      	ldrh	r2, [r5, #30]
 8009862:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009864:	fb02 f200 	mul.w	r2, r2, r0
 8009868:	fb03 f302 	mul.w	r3, r3, r2
 800986c:	2b00      	cmp	r3, #0
 800986e:	f43f af61 	beq.w	8009734 <ai_platform_network_init+0x88>
 8009872:	f104 0010 	add.w	r0, r4, #16
 8009876:	2213      	movs	r2, #19
 8009878:	2110      	movs	r1, #16
 800987a:	4634      	mov	r4, r6
 800987c:	f000 fb3c 	bl	8009ef8 <core_set_error>
 8009880:	e7c9      	b.n	8009816 <ai_platform_network_init+0x16a>
 8009882:	e7fe      	b.n	8009882 <ai_platform_network_init+0x1d6>
 8009884:	8928      	ldrh	r0, [r5, #8]
 8009886:	88ea      	ldrh	r2, [r5, #6]
 8009888:	68eb      	ldr	r3, [r5, #12]
 800988a:	fb02 f200 	mul.w	r2, r2, r0
 800988e:	fb03 f302 	mul.w	r3, r3, r2
 8009892:	2b00      	cmp	r3, #0
 8009894:	f43f af52 	beq.w	800973c <ai_platform_network_init+0x90>
 8009898:	f104 0010 	add.w	r0, r4, #16
 800989c:	2212      	movs	r2, #18
 800989e:	2110      	movs	r1, #16
 80098a0:	4664      	mov	r4, ip
 80098a2:	f000 fb29 	bl	8009ef8 <core_set_error>
 80098a6:	e7b6      	b.n	8009816 <ai_platform_network_init+0x16a>
 80098a8:	a1c00100 	.word	0xa1c00100
 80098ac:	e0002000 	.word	0xe0002000
 80098b0:	e0042000 	.word	0xe0042000
 80098b4:	58024c08 	.word	0x58024c08
 80098b8:	58024c00 	.word	0x58024c00
 80098bc:	f407a5c2 	.word	0xf407a5c2
 80098c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80098c4:	40023008 	.word	0x40023008
 80098c8:	40023000 	.word	0x40023000
 80098cc:	a1facade 	.word	0xa1facade

080098d0 <ai_platform_network_post_init>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	b120      	cbz	r0, 80098de <ai_platform_network_post_init+0xe>
 80098d4:	4b3f      	ldr	r3, [pc, #252]	; (80099d4 <ai_platform_network_post_init+0x104>)
 80098d6:	6802      	ldr	r2, [r0, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	4604      	mov	r4, r0
 80098dc:	d02d      	beq.n	800993a <ai_platform_network_post_init+0x6a>
 80098de:	4a3e      	ldr	r2, [pc, #248]	; (80099d8 <ai_platform_network_post_init+0x108>)
 80098e0:	6813      	ldr	r3, [r2, #0]
 80098e2:	f023 0301 	bic.w	r3, r3, #1
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	f7ff fd9e 	bl	8009428 <_ai_platform_acquire_crc>
 80098ec:	4b3b      	ldr	r3, [pc, #236]	; (80099dc <ai_platform_network_post_init+0x10c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f8:	d00d      	beq.n	8009916 <ai_platform_network_post_init+0x46>
 80098fa:	4b39      	ldr	r3, [pc, #228]	; (80099e0 <ai_platform_network_post_init+0x110>)
 80098fc:	2201      	movs	r2, #1
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	2a00      	cmp	r2, #0
 8009904:	d1fc      	bne.n	8009900 <ai_platform_network_post_init+0x30>
 8009906:	4b37      	ldr	r3, [pc, #220]	; (80099e4 <ai_platform_network_post_init+0x114>)
 8009908:	4a37      	ldr	r2, [pc, #220]	; (80099e8 <ai_platform_network_post_init+0x118>)
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	4b37      	ldr	r3, [pc, #220]	; (80099ec <ai_platform_network_post_init+0x11c>)
 8009910:	429a      	cmp	r2, r3
 8009912:	d00d      	beq.n	8009930 <ai_platform_network_post_init+0x60>
 8009914:	e7fe      	b.n	8009914 <ai_platform_network_post_init+0x44>
 8009916:	4b36      	ldr	r3, [pc, #216]	; (80099f0 <ai_platform_network_post_init+0x120>)
 8009918:	2201      	movs	r2, #1
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	2a00      	cmp	r2, #0
 8009920:	d1fc      	bne.n	800991c <ai_platform_network_post_init+0x4c>
 8009922:	4b34      	ldr	r3, [pc, #208]	; (80099f4 <ai_platform_network_post_init+0x124>)
 8009924:	4a30      	ldr	r2, [pc, #192]	; (80099e8 <ai_platform_network_post_init+0x118>)
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	4b30      	ldr	r3, [pc, #192]	; (80099ec <ai_platform_network_post_init+0x11c>)
 800992c:	429a      	cmp	r2, r3
 800992e:	d103      	bne.n	8009938 <ai_platform_network_post_init+0x68>
 8009930:	f7ff fd7c 	bl	800942c <_ai_platform_release_crc>
 8009934:	2000      	movs	r0, #0
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	e7fe      	b.n	8009938 <ai_platform_network_post_init+0x68>
 800993a:	4a27      	ldr	r2, [pc, #156]	; (80099d8 <ai_platform_network_post_init+0x108>)
 800993c:	6813      	ldr	r3, [r2, #0]
 800993e:	f023 0301 	bic.w	r3, r3, #1
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	f7ff fd70 	bl	8009428 <_ai_platform_acquire_crc>
 8009948:	4b24      	ldr	r3, [pc, #144]	; (80099dc <ai_platform_network_post_init+0x10c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009954:	d00d      	beq.n	8009972 <ai_platform_network_post_init+0xa2>
 8009956:	4b22      	ldr	r3, [pc, #136]	; (80099e0 <ai_platform_network_post_init+0x110>)
 8009958:	2201      	movs	r2, #1
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	2a00      	cmp	r2, #0
 8009960:	d1fc      	bne.n	800995c <ai_platform_network_post_init+0x8c>
 8009962:	4b20      	ldr	r3, [pc, #128]	; (80099e4 <ai_platform_network_post_init+0x114>)
 8009964:	4a20      	ldr	r2, [pc, #128]	; (80099e8 <ai_platform_network_post_init+0x118>)
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4b20      	ldr	r3, [pc, #128]	; (80099ec <ai_platform_network_post_init+0x11c>)
 800996c:	429a      	cmp	r2, r3
 800996e:	d00e      	beq.n	800998e <ai_platform_network_post_init+0xbe>
 8009970:	e7fe      	b.n	8009970 <ai_platform_network_post_init+0xa0>
 8009972:	4b1f      	ldr	r3, [pc, #124]	; (80099f0 <ai_platform_network_post_init+0x120>)
 8009974:	2201      	movs	r2, #1
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	2a00      	cmp	r2, #0
 800997c:	d1fc      	bne.n	8009978 <ai_platform_network_post_init+0xa8>
 800997e:	4b1d      	ldr	r3, [pc, #116]	; (80099f4 <ai_platform_network_post_init+0x124>)
 8009980:	4a19      	ldr	r2, [pc, #100]	; (80099e8 <ai_platform_network_post_init+0x118>)
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	4b19      	ldr	r3, [pc, #100]	; (80099ec <ai_platform_network_post_init+0x11c>)
 8009988:	429a      	cmp	r2, r3
 800998a:	d000      	beq.n	800998e <ai_platform_network_post_init+0xbe>
 800998c:	e7fe      	b.n	800998c <ai_platform_network_post_init+0xbc>
 800998e:	f7ff fd4d 	bl	800942c <_ai_platform_release_crc>
 8009992:	68e3      	ldr	r3, [r4, #12]
 8009994:	f013 0502 	ands.w	r5, r3, #2
 8009998:	d011      	beq.n	80099be <ai_platform_network_post_init+0xee>
 800999a:	4620      	mov	r0, r4
 800999c:	f001 ff60 	bl	800b860 <ai_layers_post_init_all>
 80099a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80099a2:	b1a3      	cbz	r3, 80099ce <ai_platform_network_post_init+0xfe>
 80099a4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80099a6:	b195      	cbz	r5, 80099ce <ai_platform_network_post_init+0xfe>
 80099a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80099aa:	4629      	mov	r1, r5
 80099ac:	2000      	movs	r0, #0
 80099ae:	4798      	blx	r3
 80099b0:	692b      	ldr	r3, [r5, #16]
 80099b2:	42ab      	cmp	r3, r5
 80099b4:	d00b      	beq.n	80099ce <ai_platform_network_post_init+0xfe>
 80099b6:	461d      	mov	r5, r3
 80099b8:	b14b      	cbz	r3, 80099ce <ai_platform_network_post_init+0xfe>
 80099ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80099bc:	e7f4      	b.n	80099a8 <ai_platform_network_post_init+0xd8>
 80099be:	f104 0010 	add.w	r0, r4, #16
 80099c2:	2210      	movs	r2, #16
 80099c4:	2111      	movs	r1, #17
 80099c6:	f000 fa97 	bl	8009ef8 <core_set_error>
 80099ca:	4628      	mov	r0, r5
 80099cc:	bd38      	pop	{r3, r4, r5, pc}
 80099ce:	2001      	movs	r0, #1
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	a1c00100 	.word	0xa1c00100
 80099d8:	e0002000 	.word	0xe0002000
 80099dc:	e0042000 	.word	0xe0042000
 80099e0:	58024c08 	.word	0x58024c08
 80099e4:	58024c00 	.word	0x58024c00
 80099e8:	f407a5c2 	.word	0xf407a5c2
 80099ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80099f0:	40023008 	.word	0x40023008
 80099f4:	40023000 	.word	0x40023000

080099f8 <ai_platform_network_process>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	b085      	sub	sp, #20
 80099fe:	460d      	mov	r5, r1
 8009a00:	9202      	str	r2, [sp, #8]
 8009a02:	4604      	mov	r4, r0
 8009a04:	b120      	cbz	r0, 8009a10 <ai_platform_network_process+0x18>
 8009a06:	4b7b      	ldr	r3, [pc, #492]	; (8009bf4 <ai_platform_network_process+0x1fc>)
 8009a08:	6802      	ldr	r2, [r0, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	bf18      	it	ne
 8009a0e:	2400      	movne	r4, #0
 8009a10:	4a79      	ldr	r2, [pc, #484]	; (8009bf8 <ai_platform_network_process+0x200>)
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	f023 0301 	bic.w	r3, r3, #1
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	f7ff fd05 	bl	8009428 <_ai_platform_acquire_crc>
 8009a1e:	4b77      	ldr	r3, [pc, #476]	; (8009bfc <ai_platform_network_process+0x204>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a2a:	d00d      	beq.n	8009a48 <ai_platform_network_process+0x50>
 8009a2c:	4b74      	ldr	r3, [pc, #464]	; (8009c00 <ai_platform_network_process+0x208>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	2a00      	cmp	r2, #0
 8009a36:	d1fc      	bne.n	8009a32 <ai_platform_network_process+0x3a>
 8009a38:	4b72      	ldr	r3, [pc, #456]	; (8009c04 <ai_platform_network_process+0x20c>)
 8009a3a:	4a73      	ldr	r2, [pc, #460]	; (8009c08 <ai_platform_network_process+0x210>)
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	4b72      	ldr	r3, [pc, #456]	; (8009c0c <ai_platform_network_process+0x214>)
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d00e      	beq.n	8009a64 <ai_platform_network_process+0x6c>
 8009a46:	e7fe      	b.n	8009a46 <ai_platform_network_process+0x4e>
 8009a48:	4b71      	ldr	r3, [pc, #452]	; (8009c10 <ai_platform_network_process+0x218>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	2a00      	cmp	r2, #0
 8009a52:	d1fc      	bne.n	8009a4e <ai_platform_network_process+0x56>
 8009a54:	4b6f      	ldr	r3, [pc, #444]	; (8009c14 <ai_platform_network_process+0x21c>)
 8009a56:	4a6c      	ldr	r2, [pc, #432]	; (8009c08 <ai_platform_network_process+0x210>)
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	4b6b      	ldr	r3, [pc, #428]	; (8009c0c <ai_platform_network_process+0x214>)
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d000      	beq.n	8009a64 <ai_platform_network_process+0x6c>
 8009a62:	e7fe      	b.n	8009a62 <ai_platform_network_process+0x6a>
 8009a64:	f7ff fce2 	bl	800942c <_ai_platform_release_crc>
 8009a68:	2c00      	cmp	r4, #0
 8009a6a:	f000 808e 	beq.w	8009b8a <ai_platform_network_process+0x192>
 8009a6e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8009a70:	2f00      	cmp	r7, #0
 8009a72:	f040 823c 	bne.w	8009eee <ai_platform_network_process+0x4f6>
 8009a76:	68e3      	ldr	r3, [r4, #12]
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	f04f 0b00 	mov.w	fp, #0
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	f8c4 b014 	str.w	fp, [r4, #20]
 8009a86:	f040 822b 	bne.w	8009ee0 <ai_platform_network_process+0x4e8>
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	f000 80a8 	beq.w	8009be0 <ai_platform_network_process+0x1e8>
 8009a90:	2f00      	cmp	r7, #0
 8009a92:	f000 80a5 	beq.w	8009be0 <ai_platform_network_process+0x1e8>
 8009a96:	883b      	ldrh	r3, [r7, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80a1 	beq.w	8009be0 <ai_platform_network_process+0x1e8>
 8009a9e:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8009aa2:	9401      	str	r4, [sp, #4]
 8009aa4:	46d8      	mov	r8, fp
 8009aa6:	4598      	cmp	r8, r3
 8009aa8:	f080 80b6 	bcs.w	8009c18 <ai_platform_network_process+0x220>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 80b2 	beq.w	8009c18 <ai_platform_network_process+0x220>
 8009ab4:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8009ab8:	2e00      	cmp	r6, #0
 8009aba:	f000 80ad 	beq.w	8009c18 <ai_platform_network_process+0x220>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	9303      	str	r3, [sp, #12]
 8009ac4:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8009ac8:	eb13 0a04 	adds.w	sl, r3, r4
 8009acc:	f000 8087 	beq.w	8009bde <ai_platform_network_process+0x1e6>
 8009ad0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8009ad4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8009ad8:	69b0      	ldr	r0, [r6, #24]
 8009ada:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8009ade:	6841      	ldr	r1, [r0, #4]
 8009ae0:	fb0b f30e 	mul.w	r3, fp, lr
 8009ae4:	fb0c f303 	mul.w	r3, ip, r3
 8009ae8:	4299      	cmp	r1, r3
 8009aea:	d36e      	bcc.n	8009bca <ai_platform_network_process+0x1d2>
 8009aec:	68f3      	ldr	r3, [r6, #12]
 8009aee:	68da      	ldr	r2, [r3, #12]
 8009af0:	455a      	cmp	r2, fp
 8009af2:	d16a      	bne.n	8009bca <ai_platform_network_process+0x1d2>
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	4572      	cmp	r2, lr
 8009af8:	d167      	bne.n	8009bca <ai_platform_network_process+0x1d2>
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	459c      	cmp	ip, r3
 8009afe:	d164      	bne.n	8009bca <ai_platform_network_process+0x1d2>
 8009b00:	6800      	ldr	r0, [r0, #0]
 8009b02:	f001 ff6b 	bl	800b9dc <ai_array_get_byte_size>
 8009b06:	68f2      	ldr	r2, [r6, #12]
 8009b08:	6973      	ldr	r3, [r6, #20]
 8009b0a:	68d2      	ldr	r2, [r2, #12]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	fb03 f302 	mul.w	r3, r3, r2
 8009b12:	4298      	cmp	r0, r3
 8009b14:	d359      	bcc.n	8009bca <ai_platform_network_process+0x1d2>
 8009b16:	69b3      	ldr	r3, [r6, #24]
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	f001 ff07 	bl	800b92c <ai_array_to_buffer_fmt>
 8009b1e:	682b      	ldr	r3, [r5, #0]
 8009b20:	4043      	eors	r3, r0
 8009b22:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8009b26:	d146      	bne.n	8009bb6 <ai_platform_network_process+0x1be>
 8009b28:	692b      	ldr	r3, [r5, #16]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d03a      	beq.n	8009ba4 <ai_platform_network_process+0x1ac>
 8009b2e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8009b32:	f1bb 0f00 	cmp.w	fp, #0
 8009b36:	d02d      	beq.n	8009b94 <ai_platform_network_process+0x19c>
 8009b38:	68f2      	ldr	r2, [r6, #12]
 8009b3a:	6973      	ldr	r3, [r6, #20]
 8009b3c:	68d1      	ldr	r1, [r2, #12]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	fb02 f201 	mul.w	r2, r2, r1
 8009b44:	f8ca 2008 	str.w	r2, [sl, #8]
 8009b48:	88ab      	ldrh	r3, [r5, #4]
 8009b4a:	fb02 f203 	mul.w	r2, r2, r3
 8009b4e:	f8ca 200c 	str.w	r2, [sl, #12]
 8009b52:	6929      	ldr	r1, [r5, #16]
 8009b54:	f8ca 1004 	str.w	r1, [sl, #4]
 8009b58:	692b      	ldr	r3, [r5, #16]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	9a03      	ldr	r2, [sp, #12]
 8009b5e:	5113      	str	r3, [r2, r4]
 8009b60:	69b0      	ldr	r0, [r6, #24]
 8009b62:	6803      	ldr	r3, [r0, #0]
 8009b64:	45d9      	cmp	r9, fp
 8009b66:	bf38      	it	cc
 8009b68:	46d9      	movcc	r9, fp
 8009b6a:	009a      	lsls	r2, r3, #2
 8009b6c:	d408      	bmi.n	8009b80 <ai_platform_network_process+0x188>
 8009b6e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009b72:	1a9b      	subs	r3, r3, r2
 8009b74:	4419      	add	r1, r3
 8009b76:	6081      	str	r1, [r0, #8]
 8009b78:	69b3      	ldr	r3, [r6, #24]
 8009b7a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009b7e:	60da      	str	r2, [r3, #12]
 8009b80:	883b      	ldrh	r3, [r7, #0]
 8009b82:	f108 0801 	add.w	r8, r8, #1
 8009b86:	3518      	adds	r5, #24
 8009b88:	e78d      	b.n	8009aa6 <ai_platform_network_process+0xae>
 8009b8a:	46a3      	mov	fp, r4
 8009b8c:	4658      	mov	r0, fp
 8009b8e:	b005      	add	sp, #20
 8009b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b94:	9c01      	ldr	r4, [sp, #4]
 8009b96:	2221      	movs	r2, #33	; 0x21
 8009b98:	f104 0010 	add.w	r0, r4, #16
 8009b9c:	2112      	movs	r1, #18
 8009b9e:	f000 f9ab 	bl	8009ef8 <core_set_error>
 8009ba2:	e7f3      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009ba4:	9c01      	ldr	r4, [sp, #4]
 8009ba6:	2217      	movs	r2, #23
 8009ba8:	f104 0010 	add.w	r0, r4, #16
 8009bac:	2112      	movs	r1, #18
 8009bae:	469b      	mov	fp, r3
 8009bb0:	f000 f9a2 	bl	8009ef8 <core_set_error>
 8009bb4:	e7ea      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009bb6:	9c01      	ldr	r4, [sp, #4]
 8009bb8:	2219      	movs	r2, #25
 8009bba:	f104 0010 	add.w	r0, r4, #16
 8009bbe:	2112      	movs	r1, #18
 8009bc0:	f000 f99a 	bl	8009ef8 <core_set_error>
 8009bc4:	f04f 0b00 	mov.w	fp, #0
 8009bc8:	e7e0      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009bca:	9c01      	ldr	r4, [sp, #4]
 8009bcc:	2218      	movs	r2, #24
 8009bce:	f104 0010 	add.w	r0, r4, #16
 8009bd2:	2112      	movs	r1, #18
 8009bd4:	f000 f990 	bl	8009ef8 <core_set_error>
 8009bd8:	f04f 0b00 	mov.w	fp, #0
 8009bdc:	e7d6      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009bde:	9c01      	ldr	r4, [sp, #4]
 8009be0:	f104 0010 	add.w	r0, r4, #16
 8009be4:	2217      	movs	r2, #23
 8009be6:	2112      	movs	r1, #18
 8009be8:	f000 f986 	bl	8009ef8 <core_set_error>
 8009bec:	f04f 0b00 	mov.w	fp, #0
 8009bf0:	e7cc      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009bf2:	bf00      	nop
 8009bf4:	a1c00100 	.word	0xa1c00100
 8009bf8:	e0002000 	.word	0xe0002000
 8009bfc:	e0042000 	.word	0xe0042000
 8009c00:	58024c08 	.word	0x58024c08
 8009c04:	58024c00 	.word	0x58024c00
 8009c08:	f407a5c2 	.word	0xf407a5c2
 8009c0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009c10:	40023008 	.word	0x40023008
 8009c14:	40023000 	.word	0x40023000
 8009c18:	9c01      	ldr	r4, [sp, #4]
 8009c1a:	9a02      	ldr	r2, [sp, #8]
 8009c1c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	f000 80a9 	beq.w	8009d76 <ai_platform_network_process+0x37e>
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	f240 809b 	bls.w	8009d60 <ai_platform_network_process+0x368>
 8009c2a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8009c2e:	f11a 0f0c 	cmn.w	sl, #12
 8009c32:	f000 8095 	beq.w	8009d60 <ai_platform_network_process+0x368>
 8009c36:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 8090 	beq.w	8009d60 <ai_platform_network_process+0x368>
 8009c40:	9d02      	ldr	r5, [sp, #8]
 8009c42:	9401      	str	r4, [sp, #4]
 8009c44:	f04f 0800 	mov.w	r8, #0
 8009c48:	4598      	cmp	r8, r3
 8009c4a:	f080 8092 	bcs.w	8009d72 <ai_platform_network_process+0x37a>
 8009c4e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 808d 	beq.w	8009d72 <ai_platform_network_process+0x37a>
 8009c58:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	f000 8088 	beq.w	8009d72 <ai_platform_network_process+0x37a>
 8009c62:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	9302      	str	r3, [sp, #8]
 8009c6a:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8009c6e:	191f      	adds	r7, r3, r4
 8009c70:	f000 812d 	beq.w	8009ece <ai_platform_network_process+0x4d6>
 8009c74:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8009c78:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8009c7c:	69b0      	ldr	r0, [r6, #24]
 8009c7e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8009c82:	6841      	ldr	r1, [r0, #4]
 8009c84:	fb0b f30e 	mul.w	r3, fp, lr
 8009c88:	fb0c f303 	mul.w	r3, ip, r3
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	d366      	bcc.n	8009d5e <ai_platform_network_process+0x366>
 8009c90:	68f3      	ldr	r3, [r6, #12]
 8009c92:	68da      	ldr	r2, [r3, #12]
 8009c94:	455a      	cmp	r2, fp
 8009c96:	d162      	bne.n	8009d5e <ai_platform_network_process+0x366>
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	4572      	cmp	r2, lr
 8009c9c:	d15f      	bne.n	8009d5e <ai_platform_network_process+0x366>
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	459c      	cmp	ip, r3
 8009ca2:	d15c      	bne.n	8009d5e <ai_platform_network_process+0x366>
 8009ca4:	6800      	ldr	r0, [r0, #0]
 8009ca6:	f001 fe99 	bl	800b9dc <ai_array_get_byte_size>
 8009caa:	68f2      	ldr	r2, [r6, #12]
 8009cac:	6973      	ldr	r3, [r6, #20]
 8009cae:	68d2      	ldr	r2, [r2, #12]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	fb03 f302 	mul.w	r3, r3, r2
 8009cb6:	4298      	cmp	r0, r3
 8009cb8:	d351      	bcc.n	8009d5e <ai_platform_network_process+0x366>
 8009cba:	69b3      	ldr	r3, [r6, #24]
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	f001 fe35 	bl	800b92c <ai_array_to_buffer_fmt>
 8009cc2:	682b      	ldr	r3, [r5, #0]
 8009cc4:	4043      	eors	r3, r0
 8009cc6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8009cca:	d13e      	bne.n	8009d4a <ai_platform_network_process+0x352>
 8009ccc:	692b      	ldr	r3, [r5, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d032      	beq.n	8009d38 <ai_platform_network_process+0x340>
 8009cd2:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8009cd6:	f1bb 0f00 	cmp.w	fp, #0
 8009cda:	d025      	beq.n	8009d28 <ai_platform_network_process+0x330>
 8009cdc:	68f2      	ldr	r2, [r6, #12]
 8009cde:	6973      	ldr	r3, [r6, #20]
 8009ce0:	68d1      	ldr	r1, [r2, #12]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	fb02 f201 	mul.w	r2, r2, r1
 8009ce8:	60ba      	str	r2, [r7, #8]
 8009cea:	88ab      	ldrh	r3, [r5, #4]
 8009cec:	fb02 f203 	mul.w	r2, r2, r3
 8009cf0:	60fa      	str	r2, [r7, #12]
 8009cf2:	6929      	ldr	r1, [r5, #16]
 8009cf4:	6079      	str	r1, [r7, #4]
 8009cf6:	692b      	ldr	r3, [r5, #16]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	9a02      	ldr	r2, [sp, #8]
 8009cfc:	5113      	str	r3, [r2, r4]
 8009cfe:	69b0      	ldr	r0, [r6, #24]
 8009d00:	6803      	ldr	r3, [r0, #0]
 8009d02:	45d9      	cmp	r9, fp
 8009d04:	bf38      	it	cc
 8009d06:	46d9      	movcc	r9, fp
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	d407      	bmi.n	8009d1c <ai_platform_network_process+0x324>
 8009d0c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009d10:	1a9b      	subs	r3, r3, r2
 8009d12:	4419      	add	r1, r3
 8009d14:	6081      	str	r1, [r0, #8]
 8009d16:	69b3      	ldr	r3, [r6, #24]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	60da      	str	r2, [r3, #12]
 8009d1c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009d20:	f108 0801 	add.w	r8, r8, #1
 8009d24:	3518      	adds	r5, #24
 8009d26:	e78f      	b.n	8009c48 <ai_platform_network_process+0x250>
 8009d28:	9c01      	ldr	r4, [sp, #4]
 8009d2a:	2221      	movs	r2, #33	; 0x21
 8009d2c:	f104 0010 	add.w	r0, r4, #16
 8009d30:	2113      	movs	r1, #19
 8009d32:	f000 f8e1 	bl	8009ef8 <core_set_error>
 8009d36:	e729      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009d38:	9c01      	ldr	r4, [sp, #4]
 8009d3a:	2217      	movs	r2, #23
 8009d3c:	f104 0010 	add.w	r0, r4, #16
 8009d40:	2113      	movs	r1, #19
 8009d42:	469b      	mov	fp, r3
 8009d44:	f000 f8d8 	bl	8009ef8 <core_set_error>
 8009d48:	e720      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009d4a:	9c01      	ldr	r4, [sp, #4]
 8009d4c:	2219      	movs	r2, #25
 8009d4e:	f104 0010 	add.w	r0, r4, #16
 8009d52:	2113      	movs	r1, #19
 8009d54:	f000 f8d0 	bl	8009ef8 <core_set_error>
 8009d58:	f04f 0b00 	mov.w	fp, #0
 8009d5c:	e716      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009d5e:	9c01      	ldr	r4, [sp, #4]
 8009d60:	f104 0010 	add.w	r0, r4, #16
 8009d64:	2218      	movs	r2, #24
 8009d66:	2113      	movs	r1, #19
 8009d68:	f000 f8c6 	bl	8009ef8 <core_set_error>
 8009d6c:	f04f 0b00 	mov.w	fp, #0
 8009d70:	e70c      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009d72:	9c01      	ldr	r4, [sp, #4]
 8009d74:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8009d76:	f8a4 9014 	strh.w	r9, [r4, #20]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 80a4 	beq.w	8009ec8 <ai_platform_network_process+0x4d0>
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8009d84:	f240 809e 	bls.w	8009ec4 <ai_platform_network_process+0x4cc>
 8009d88:	f105 070c 	add.w	r7, r5, #12
 8009d8c:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8009d90:	8aa3      	ldrh	r3, [r4, #20]
 8009d92:	455b      	cmp	r3, fp
 8009d94:	f67f aefa 	bls.w	8009b8c <ai_platform_network_process+0x194>
 8009d98:	9401      	str	r4, [sp, #4]
 8009d9a:	2d00      	cmp	r5, #0
 8009d9c:	d036      	beq.n	8009e0c <ai_platform_network_process+0x414>
 8009d9e:	882b      	ldrh	r3, [r5, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d033      	beq.n	8009e0c <ai_platform_network_process+0x414>
 8009da4:	686b      	ldr	r3, [r5, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d030      	beq.n	8009e0c <ai_platform_network_process+0x414>
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f04f 0800 	mov.w	r8, #0
 8009db0:	b9db      	cbnz	r3, 8009dea <ai_platform_network_process+0x3f2>
 8009db2:	e02b      	b.n	8009e0c <ai_platform_network_process+0x414>
 8009db4:	68d4      	ldr	r4, [r2, #12]
 8009db6:	1b00      	subs	r0, r0, r4
 8009db8:	4401      	add	r1, r0
 8009dba:	6091      	str	r1, [r2, #8]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	6872      	ldr	r2, [r6, #4]
 8009dc0:	60da      	str	r2, [r3, #12]
 8009dc2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8009dc6:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009dca:	440b      	add	r3, r1
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	bf24      	itt	cs
 8009dd0:	68f3      	ldrcs	r3, [r6, #12]
 8009dd2:	1ad3      	subcs	r3, r2, r3
 8009dd4:	6073      	str	r3, [r6, #4]
 8009dd6:	882b      	ldrh	r3, [r5, #0]
 8009dd8:	f108 0801 	add.w	r8, r8, #1
 8009ddc:	4598      	cmp	r8, r3
 8009dde:	d215      	bcs.n	8009e0c <ai_platform_network_process+0x414>
 8009de0:	686b      	ldr	r3, [r5, #4]
 8009de2:	b19b      	cbz	r3, 8009e0c <ai_platform_network_process+0x414>
 8009de4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009de8:	b183      	cbz	r3, 8009e0c <ai_platform_network_process+0x414>
 8009dea:	68a9      	ldr	r1, [r5, #8]
 8009dec:	699a      	ldr	r2, [r3, #24]
 8009dee:	f8d1 a000 	ldr.w	sl, [r1]
 8009df2:	6814      	ldr	r4, [r2, #0]
 8009df4:	6890      	ldr	r0, [r2, #8]
 8009df6:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009dfa:	eb0a 0609 	add.w	r6, sl, r9
 8009dfe:	00a4      	lsls	r4, r4, #2
 8009e00:	6871      	ldr	r1, [r6, #4]
 8009e02:	d5d7      	bpl.n	8009db4 <ai_platform_network_process+0x3bc>
 8009e04:	68b2      	ldr	r2, [r6, #8]
 8009e06:	f001 fe45 	bl	800ba94 <memcpy>
 8009e0a:	e7da      	b.n	8009dc2 <ai_platform_network_process+0x3ca>
 8009e0c:	9801      	ldr	r0, [sp, #4]
 8009e0e:	f001 fd3f 	bl	800b890 <ai_layers_forward_all>
 8009e12:	2f00      	cmp	r7, #0
 8009e14:	d047      	beq.n	8009ea6 <ai_platform_network_process+0x4ae>
 8009e16:	883b      	ldrh	r3, [r7, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d044      	beq.n	8009ea6 <ai_platform_network_process+0x4ae>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d041      	beq.n	8009ea6 <ai_platform_network_process+0x4ae>
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d03e      	beq.n	8009ea6 <ai_platform_network_process+0x4ae>
 8009e28:	f04f 0800 	mov.w	r8, #0
 8009e2c:	e019      	b.n	8009e62 <ai_platform_network_process+0x46a>
 8009e2e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	bf24      	itt	cs
 8009e36:	68f3      	ldrcs	r3, [r6, #12]
 8009e38:	1ad3      	subcs	r3, r2, r3
 8009e3a:	6073      	str	r3, [r6, #4]
 8009e3c:	6981      	ldr	r1, [r0, #24]
 8009e3e:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8009e42:	1b12      	subs	r2, r2, r4
 8009e44:	4413      	add	r3, r2
 8009e46:	608b      	str	r3, [r1, #8]
 8009e48:	6983      	ldr	r3, [r0, #24]
 8009e4a:	6872      	ldr	r2, [r6, #4]
 8009e4c:	60da      	str	r2, [r3, #12]
 8009e4e:	883b      	ldrh	r3, [r7, #0]
 8009e50:	f108 0801 	add.w	r8, r8, #1
 8009e54:	4598      	cmp	r8, r3
 8009e56:	d226      	bcs.n	8009ea6 <ai_platform_network_process+0x4ae>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	b323      	cbz	r3, 8009ea6 <ai_platform_network_process+0x4ae>
 8009e5c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009e60:	b308      	cbz	r0, 8009ea6 <ai_platform_network_process+0x4ae>
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	6981      	ldr	r1, [r0, #24]
 8009e66:	f8d3 a000 	ldr.w	sl, [r3]
 8009e6a:	680c      	ldr	r4, [r1, #0]
 8009e6c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009e70:	eb0a 0609 	add.w	r6, sl, r9
 8009e74:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8009e78:	00a4      	lsls	r4, r4, #2
 8009e7a:	eb0c 0302 	add.w	r3, ip, r2
 8009e7e:	d5d6      	bpl.n	8009e2e <ai_platform_network_process+0x436>
 8009e80:	6889      	ldr	r1, [r1, #8]
 8009e82:	4660      	mov	r0, ip
 8009e84:	f001 fe06 	bl	800ba94 <memcpy>
 8009e88:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8009e8c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009e90:	440b      	add	r3, r1
 8009e92:	4293      	cmp	r3, r2
 8009e94:	bf24      	itt	cs
 8009e96:	68f3      	ldrcs	r3, [r6, #12]
 8009e98:	1ad3      	subcs	r3, r2, r3
 8009e9a:	6073      	str	r3, [r6, #4]
 8009e9c:	883b      	ldrh	r3, [r7, #0]
 8009e9e:	f108 0801 	add.w	r8, r8, #1
 8009ea2:	4598      	cmp	r8, r3
 8009ea4:	d3d8      	bcc.n	8009e58 <ai_platform_network_process+0x460>
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8009eac:	461a      	mov	r2, r3
 8009eae:	f10b 0b01 	add.w	fp, fp, #1
 8009eb2:	8a9b      	ldrh	r3, [r3, #20]
 8009eb4:	fa1f fb8b 	uxth.w	fp, fp
 8009eb8:	455b      	cmp	r3, fp
 8009eba:	f8a2 b016 	strh.w	fp, [r2, #22]
 8009ebe:	f63f af6c 	bhi.w	8009d9a <ai_platform_network_process+0x3a2>
 8009ec2:	e663      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009ec4:	2700      	movs	r7, #0
 8009ec6:	e761      	b.n	8009d8c <ai_platform_network_process+0x394>
 8009ec8:	461d      	mov	r5, r3
 8009eca:	461f      	mov	r7, r3
 8009ecc:	e75e      	b.n	8009d8c <ai_platform_network_process+0x394>
 8009ece:	9c01      	ldr	r4, [sp, #4]
 8009ed0:	2217      	movs	r2, #23
 8009ed2:	f104 0010 	add.w	r0, r4, #16
 8009ed6:	2113      	movs	r1, #19
 8009ed8:	f000 f80e 	bl	8009ef8 <core_set_error>
 8009edc:	46bb      	mov	fp, r7
 8009ede:	e655      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009ee0:	f104 0010 	add.w	r0, r4, #16
 8009ee4:	2230      	movs	r2, #48	; 0x30
 8009ee6:	2111      	movs	r1, #17
 8009ee8:	f000 f806 	bl	8009ef8 <core_set_error>
 8009eec:	e64e      	b.n	8009b8c <ai_platform_network_process+0x194>
 8009eee:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8009ef0:	e5c1      	b.n	8009a76 <ai_platform_network_process+0x7e>
 8009ef2:	bf00      	nop

08009ef4 <core_init>:
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	4770      	bx	lr

08009ef8 <core_set_error>:
 8009ef8:	7803      	ldrb	r3, [r0, #0]
 8009efa:	b933      	cbnz	r3, 8009f0a <core_set_error+0x12>
 8009efc:	7001      	strb	r1, [r0, #0]
 8009efe:	6803      	ldr	r3, [r0, #0]
 8009f00:	f362 231f 	bfi	r3, r2, #8, #24
 8009f04:	6003      	str	r3, [r0, #0]
 8009f06:	2001      	movs	r0, #1
 8009f08:	4770      	bx	lr
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop

08009f10 <ai_dict8_dot_array_f32>:
 8009f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009f18:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8009f1c:	f000 80c0 	beq.w	800a0a0 <ai_dict8_dot_array_f32+0x190>
 8009f20:	f101 0408 	add.w	r4, r1, #8
 8009f24:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8009f28:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800a0a8 <ai_dict8_dot_array_f32+0x198>
 8009f2c:	eb04 0e09 	add.w	lr, r4, r9
 8009f30:	f103 0520 	add.w	r5, r3, #32
 8009f34:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8009f38:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8009f3c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8009f40:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8009f44:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8009f48:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8009f4c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8009f50:	ed55 3a04 	vldr	s7, [r5, #-16]
 8009f54:	ed55 4a03 	vldr	s9, [r5, #-12]
 8009f58:	ed55 5a02 	vldr	s11, [r5, #-8]
 8009f5c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009f60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f64:	edd6 7a00 	vldr	s15, [r6]
 8009f68:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8009f6c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009f70:	ee67 7a83 	vmul.f32	s15, s15, s6
 8009f74:	ed9a 3a00 	vldr	s6, [sl]
 8009f78:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8009f7c:	eee3 7a05 	vfma.f32	s15, s6, s10
 8009f80:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009f84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f88:	ed97 3a00 	vldr	s6, [r7]
 8009f8c:	ed96 5a00 	vldr	s10, [r6]
 8009f90:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8009f94:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8009f98:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009f9c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009fa0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fa4:	ed9a 3a00 	vldr	s6, [sl]
 8009fa8:	ed96 4a00 	vldr	s8, [r6]
 8009fac:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8009fb0:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009fb4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009fb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fbc:	ed97 5a00 	vldr	s10, [r7]
 8009fc0:	ed96 6a00 	vldr	s12, [r6]
 8009fc4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009fc8:	3408      	adds	r4, #8
 8009fca:	45a6      	cmp	lr, r4
 8009fcc:	f105 0520 	add.w	r5, r5, #32
 8009fd0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009fd4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009fd8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fe0:	d1a8      	bne.n	8009f34 <ai_dict8_dot_array_f32+0x24>
 8009fe2:	4449      	add	r1, r9
 8009fe4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8009fe8:	f01c 0c07 	ands.w	ip, ip, #7
 8009fec:	d050      	beq.n	800a090 <ai_dict8_dot_array_f32+0x180>
 8009fee:	780c      	ldrb	r4, [r1, #0]
 8009ff0:	edd3 6a00 	vldr	s13, [r3]
 8009ff4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009ff8:	edd4 7a00 	vldr	s15, [r4]
 8009ffc:	f1bc 0f01 	cmp.w	ip, #1
 800a000:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a004:	d044      	beq.n	800a090 <ai_dict8_dot_array_f32+0x180>
 800a006:	784c      	ldrb	r4, [r1, #1]
 800a008:	edd3 6a01 	vldr	s13, [r3, #4]
 800a00c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a010:	edd4 7a00 	vldr	s15, [r4]
 800a014:	f1bc 0f02 	cmp.w	ip, #2
 800a018:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a01c:	d038      	beq.n	800a090 <ai_dict8_dot_array_f32+0x180>
 800a01e:	788c      	ldrb	r4, [r1, #2]
 800a020:	edd3 6a02 	vldr	s13, [r3, #8]
 800a024:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a028:	edd4 7a00 	vldr	s15, [r4]
 800a02c:	f1bc 0f03 	cmp.w	ip, #3
 800a030:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a034:	d02c      	beq.n	800a090 <ai_dict8_dot_array_f32+0x180>
 800a036:	78cc      	ldrb	r4, [r1, #3]
 800a038:	edd3 6a03 	vldr	s13, [r3, #12]
 800a03c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a040:	edd4 7a00 	vldr	s15, [r4]
 800a044:	f1bc 0f04 	cmp.w	ip, #4
 800a048:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a04c:	d020      	beq.n	800a090 <ai_dict8_dot_array_f32+0x180>
 800a04e:	790c      	ldrb	r4, [r1, #4]
 800a050:	edd3 6a04 	vldr	s13, [r3, #16]
 800a054:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a058:	edd4 7a00 	vldr	s15, [r4]
 800a05c:	f1bc 0f05 	cmp.w	ip, #5
 800a060:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a064:	d014      	beq.n	800a090 <ai_dict8_dot_array_f32+0x180>
 800a066:	794c      	ldrb	r4, [r1, #5]
 800a068:	edd3 6a05 	vldr	s13, [r3, #20]
 800a06c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a070:	edd4 7a00 	vldr	s15, [r4]
 800a074:	f1bc 0f06 	cmp.w	ip, #6
 800a078:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a07c:	d008      	beq.n	800a090 <ai_dict8_dot_array_f32+0x180>
 800a07e:	7989      	ldrb	r1, [r1, #6]
 800a080:	edd3 7a06 	vldr	s15, [r3, #24]
 800a084:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a088:	edd2 6a00 	vldr	s13, [r2]
 800a08c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a090:	edd0 7a00 	vldr	s15, [r0]
 800a094:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a098:	ed80 7a00 	vstr	s14, [r0]
 800a09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800a0a8 <ai_dict8_dot_array_f32+0x198>
 800a0a4:	e7a0      	b.n	8009fe8 <ai_dict8_dot_array_f32+0xd8>
 800a0a6:	bf00      	nop
 800a0a8:	00000000 	.word	0x00000000

0800a0ac <ai_dict4_dot_array_f32>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a0b2:	f027 0c01 	bic.w	ip, r7, #1
 800a0b6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800a0ba:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a0be:	f000 80ae 	beq.w	800a21e <ai_dict4_dot_array_f32+0x172>
 800a0c2:	1d0d      	adds	r5, r1, #4
 800a0c4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800a0c8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800a224 <ai_dict4_dot_array_f32+0x178>
 800a0cc:	eb05 0e09 	add.w	lr, r5, r9
 800a0d0:	f103 0420 	add.w	r4, r3, #32
 800a0d4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800a0d8:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800a0dc:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800a0e0:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800a0e4:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800a0e8:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800a0ec:	ed14 5a04 	vldr	s10, [r4, #-16]
 800a0f0:	ed54 5a03 	vldr	s11, [r4, #-12]
 800a0f4:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a0f8:	ed54 6a01 	vldr	s13, [r4, #-4]
 800a0fc:	f006 0a0f 	and.w	sl, r6, #15
 800a100:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a104:	edda 7a00 	vldr	s15, [sl]
 800a108:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800a10c:	0936      	lsrs	r6, r6, #4
 800a10e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a112:	ee67 7a83 	vmul.f32	s15, s15, s6
 800a116:	ed96 3a00 	vldr	s6, [r6]
 800a11a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800a11e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a122:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a126:	f00b 0b0f 	and.w	fp, fp, #15
 800a12a:	edd6 3a00 	vldr	s7, [r6]
 800a12e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800a132:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a136:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800a13a:	3504      	adds	r5, #4
 800a13c:	ed9b 4a00 	vldr	s8, [fp]
 800a140:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800a144:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a148:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800a14c:	f00a 0a0f 	and.w	sl, sl, #15
 800a150:	eddb 4a00 	vldr	s9, [fp]
 800a154:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a158:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a15c:	45ae      	cmp	lr, r5
 800a15e:	ed9a 5a00 	vldr	s10, [sl]
 800a162:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800a166:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a16a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a16e:	f006 060f 	and.w	r6, r6, #15
 800a172:	edda 5a00 	vldr	s11, [sl]
 800a176:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a17a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a17e:	f104 0420 	add.w	r4, r4, #32
 800a182:	ed96 6a00 	vldr	s12, [r6]
 800a186:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a18a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a18e:	d1a1      	bne.n	800a0d4 <ai_dict4_dot_array_f32+0x28>
 800a190:	4449      	add	r1, r9
 800a192:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800a196:	459c      	cmp	ip, r3
 800a198:	d92d      	bls.n	800a1f6 <ai_dict4_dot_array_f32+0x14a>
 800a19a:	f10c 0c07 	add.w	ip, ip, #7
 800a19e:	f103 0508 	add.w	r5, r3, #8
 800a1a2:	ebac 0c05 	sub.w	ip, ip, r5
 800a1a6:	f02c 0407 	bic.w	r4, ip, #7
 800a1aa:	f103 0810 	add.w	r8, r3, #16
 800a1ae:	44a0      	add	r8, r4
 800a1b0:	f101 3eff 	add.w	lr, r1, #4294967295
 800a1b4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800a1b8:	ed15 6a01 	vldr	s12, [r5, #-4]
 800a1bc:	ed55 6a02 	vldr	s13, [r5, #-8]
 800a1c0:	f004 060f 	and.w	r6, r4, #15
 800a1c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1c8:	0924      	lsrs	r4, r4, #4
 800a1ca:	edd6 7a00 	vldr	s15, [r6]
 800a1ce:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a1d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a1d6:	ed94 6a00 	vldr	s12, [r4]
 800a1da:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a1de:	3508      	adds	r5, #8
 800a1e0:	45a8      	cmp	r8, r5
 800a1e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1e6:	d1e5      	bne.n	800a1b4 <ai_dict4_dot_array_f32+0x108>
 800a1e8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a1ec:	f10c 0c01 	add.w	ip, ip, #1
 800a1f0:	4461      	add	r1, ip
 800a1f2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800a1f6:	07fc      	lsls	r4, r7, #31
 800a1f8:	d509      	bpl.n	800a20e <ai_dict4_dot_array_f32+0x162>
 800a1fa:	7809      	ldrb	r1, [r1, #0]
 800a1fc:	edd3 7a00 	vldr	s15, [r3]
 800a200:	090b      	lsrs	r3, r1, #4
 800a202:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a206:	edd2 6a00 	vldr	s13, [r2]
 800a20a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a20e:	edd0 7a00 	vldr	s15, [r0]
 800a212:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a216:	ed80 7a00 	vstr	s14, [r0]
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800a224 <ai_dict4_dot_array_f32+0x178>
 800a222:	e7b8      	b.n	800a196 <ai_dict4_dot_array_f32+0xea>
 800a224:	00000000 	.word	0x00000000

0800a228 <forward_dense>:
 800a228:	6983      	ldr	r3, [r0, #24]
 800a22a:	881a      	ldrh	r2, [r3, #0]
 800a22c:	2a00      	cmp	r2, #0
 800a22e:	f000 80b5 	beq.w	800a39c <forward_dense+0x174>
 800a232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a236:	ed2d 8b10 	vpush	{d8-d15}
 800a23a:	685f      	ldr	r7, [r3, #4]
 800a23c:	687e      	ldr	r6, [r7, #4]
 800a23e:	b091      	sub	sp, #68	; 0x44
 800a240:	b106      	cbz	r6, 800a244 <forward_dense+0x1c>
 800a242:	6836      	ldr	r6, [r6, #0]
 800a244:	2a01      	cmp	r2, #1
 800a246:	f240 80a6 	bls.w	800a396 <forward_dense+0x16e>
 800a24a:	693d      	ldr	r5, [r7, #16]
 800a24c:	b105      	cbz	r5, 800a250 <forward_dense+0x28>
 800a24e:	682d      	ldr	r5, [r5, #0]
 800a250:	2a02      	cmp	r2, #2
 800a252:	f000 80a5 	beq.w	800a3a0 <forward_dense+0x178>
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 821b 	beq.w	800a694 <forward_dense+0x46c>
 800a25e:	6819      	ldr	r1, [r3, #0]
 800a260:	9106      	str	r1, [sp, #24]
 800a262:	f117 0118 	adds.w	r1, r7, #24
 800a266:	f000 80c9 	beq.w	800a3fc <forward_dense+0x1d4>
 800a26a:	8b39      	ldrh	r1, [r7, #24]
 800a26c:	2901      	cmp	r1, #1
 800a26e:	f240 820e 	bls.w	800a68e <forward_dense+0x466>
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 80c4 	beq.w	800a400 <forward_dense+0x1d8>
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	9b06      	ldr	r3, [sp, #24]
 800a27e:	68ec      	ldr	r4, [r5, #12]
 800a280:	6998      	ldr	r0, [r3, #24]
 800a282:	68f1      	ldr	r1, [r6, #12]
 800a284:	6803      	ldr	r3, [r0, #0]
 800a286:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800a28a:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800a28e:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800a292:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800a296:	fa49 f101 	asr.w	r1, r9, r1
 800a29a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a29c:	2a03      	cmp	r2, #3
 800a29e:	fb0e f10c 	mul.w	r1, lr, ip
 800a2a2:	6864      	ldr	r4, [r4, #4]
 800a2a4:	9108      	str	r1, [sp, #32]
 800a2a6:	f000 81de 	beq.w	800a666 <forward_dense+0x43e>
 800a2aa:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800a2ac:	b117      	cbz	r7, 800a2b4 <forward_dense+0x8c>
 800a2ae:	683f      	ldr	r7, [r7, #0]
 800a2b0:	b107      	cbz	r7, 800a2b4 <forward_dense+0x8c>
 800a2b2:	69bf      	ldr	r7, [r7, #24]
 800a2b4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	f000 81d7 	beq.w	800a66c <forward_dense+0x444>
 800a2be:	2b08      	cmp	r3, #8
 800a2c0:	f000 81d4 	beq.w	800a66c <forward_dense+0x444>
 800a2c4:	f04f 0a00 	mov.w	sl, #0
 800a2c8:	69ab      	ldr	r3, [r5, #24]
 800a2ca:	69b2      	ldr	r2, [r6, #24]
 800a2cc:	6899      	ldr	r1, [r3, #8]
 800a2ce:	9b06      	ldr	r3, [sp, #24]
 800a2d0:	9104      	str	r1, [sp, #16]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	6897      	ldr	r7, [r2, #8]
 800a2d6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a2da:	00a3      	lsls	r3, r4, #2
 800a2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2de:	18ce      	adds	r6, r1, r3
 800a2e0:	9b08      	ldr	r3, [sp, #32]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d052      	beq.n	800a38c <forward_dense+0x164>
 800a2e6:	f1a8 0310 	sub.w	r3, r8, #16
 800a2ea:	091b      	lsrs	r3, r3, #4
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	019b      	lsls	r3, r3, #6
 800a2f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a2f2:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800a2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9305      	str	r3, [sp, #20]
 800a2fc:	eddf aace 	vldr	s21, [pc, #824]	; 800a638 <forward_dense+0x410>
 800a300:	f008 030f 	and.w	r3, r8, #15
 800a304:	930d      	str	r3, [sp, #52]	; 0x34
 800a306:	9b06      	ldr	r3, [sp, #24]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	689d      	ldr	r5, [r3, #8]
 800a30c:	9b07      	ldr	r3, [sp, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 818f 	beq.w	800a632 <forward_dense+0x40a>
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	689c      	ldr	r4, [r3, #8]
 800a318:	9b04      	ldr	r3, [sp, #16]
 800a31a:	f1ba 0f00 	cmp.w	sl, #0
 800a31e:	d071      	beq.n	800a404 <forward_dense+0x1dc>
 800a320:	42b3      	cmp	r3, r6
 800a322:	d229      	bcs.n	800a378 <forward_dense+0x150>
 800a324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a326:	469b      	mov	fp, r3
 800a328:	ab0f      	add	r3, sp, #60	; 0x3c
 800a32a:	9303      	str	r3, [sp, #12]
 800a32c:	2a04      	cmp	r2, #4
 800a32e:	4633      	mov	r3, r6
 800a330:	4646      	mov	r6, r8
 800a332:	4698      	mov	r8, r3
 800a334:	d037      	beq.n	800a3a6 <forward_dense+0x17e>
 800a336:	2c00      	cmp	r4, #0
 800a338:	f000 8180 	beq.w	800a63c <forward_dense+0x414>
 800a33c:	f8d4 c000 	ldr.w	ip, [r4]
 800a340:	9803      	ldr	r0, [sp, #12]
 800a342:	9600      	str	r6, [sp, #0]
 800a344:	463b      	mov	r3, r7
 800a346:	4629      	mov	r1, r5
 800a348:	4652      	mov	r2, sl
 800a34a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a34e:	f7ff fddf 	bl	8009f10 <ai_dict8_dot_array_f32>
 800a352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a354:	f84b 3b04 	str.w	r3, [fp], #4
 800a358:	45c3      	cmp	fp, r8
 800a35a:	f104 0404 	add.w	r4, r4, #4
 800a35e:	444d      	add	r5, r9
 800a360:	d3e9      	bcc.n	800a336 <forward_dense+0x10e>
 800a362:	4643      	mov	r3, r8
 800a364:	46b0      	mov	r8, r6
 800a366:	461e      	mov	r6, r3
 800a368:	9a04      	ldr	r2, [sp, #16]
 800a36a:	43d3      	mvns	r3, r2
 800a36c:	4433      	add	r3, r6
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	3304      	adds	r3, #4
 800a374:	18d3      	adds	r3, r2, r3
 800a376:	9304      	str	r3, [sp, #16]
 800a378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a37a:	9b05      	ldr	r3, [sp, #20]
 800a37c:	4417      	add	r7, r2
 800a37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a380:	4416      	add	r6, r2
 800a382:	9a08      	ldr	r2, [sp, #32]
 800a384:	3301      	adds	r3, #1
 800a386:	4293      	cmp	r3, r2
 800a388:	9305      	str	r3, [sp, #20]
 800a38a:	d1bc      	bne.n	800a306 <forward_dense+0xde>
 800a38c:	b011      	add	sp, #68	; 0x44
 800a38e:	ecbd 8b10 	vpop	{d8-d15}
 800a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a396:	2300      	movs	r3, #0
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	deff      	udf	#255	; 0xff
 800a39c:	6853      	ldr	r3, [r2, #4]
 800a39e:	deff      	udf	#255	; 0xff
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	deff      	udf	#255	; 0xff
 800a3a6:	b1a4      	cbz	r4, 800a3d2 <forward_dense+0x1aa>
 800a3a8:	f8d4 c000 	ldr.w	ip, [r4]
 800a3ac:	9803      	ldr	r0, [sp, #12]
 800a3ae:	9600      	str	r6, [sp, #0]
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4652      	mov	r2, sl
 800a3b6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a3ba:	f7ff fe77 	bl	800a0ac <ai_dict4_dot_array_f32>
 800a3be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3c0:	f84b 3b04 	str.w	r3, [fp], #4
 800a3c4:	45c3      	cmp	fp, r8
 800a3c6:	f104 0404 	add.w	r4, r4, #4
 800a3ca:	444d      	add	r5, r9
 800a3cc:	d2c9      	bcs.n	800a362 <forward_dense+0x13a>
 800a3ce:	2c00      	cmp	r4, #0
 800a3d0:	d1ea      	bne.n	800a3a8 <forward_dense+0x180>
 800a3d2:	4634      	mov	r4, r6
 800a3d4:	4646      	mov	r6, r8
 800a3d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a3da:	9400      	str	r4, [sp, #0]
 800a3dc:	463b      	mov	r3, r7
 800a3de:	4629      	mov	r1, r5
 800a3e0:	4652      	mov	r2, sl
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800a3e8:	f7ff fe60 	bl	800a0ac <ai_dict4_dot_array_f32>
 800a3ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3ee:	f84b 3b04 	str.w	r3, [fp], #4
 800a3f2:	45b3      	cmp	fp, r6
 800a3f4:	444d      	add	r5, r9
 800a3f6:	d3f0      	bcc.n	800a3da <forward_dense+0x1b2>
 800a3f8:	46a0      	mov	r8, r4
 800a3fa:	e7b5      	b.n	800a368 <forward_dense+0x140>
 800a3fc:	9107      	str	r1, [sp, #28]
 800a3fe:	e73d      	b.n	800a27c <forward_dense+0x54>
 800a400:	9307      	str	r3, [sp, #28]
 800a402:	e73b      	b.n	800a27c <forward_dense+0x54>
 800a404:	42b3      	cmp	r3, r6
 800a406:	d2b7      	bcs.n	800a378 <forward_dense+0x150>
 800a408:	4618      	mov	r0, r3
 800a40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a40c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800a410:	eb07 0c03 	add.w	ip, r7, r3
 800a414:	469e      	mov	lr, r3
 800a416:	2c00      	cmp	r4, #0
 800a418:	f000 80ff 	beq.w	800a61a <forward_dense+0x3f2>
 800a41c:	f1b8 0f0f 	cmp.w	r8, #15
 800a420:	edd4 fa00 	vldr	s31, [r4]
 800a424:	eddf 6a84 	vldr	s13, [pc, #528]	; 800a638 <forward_dense+0x410>
 800a428:	f104 0404 	add.w	r4, r4, #4
 800a42c:	f240 80fd 	bls.w	800a62a <forward_dense+0x402>
 800a430:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a434:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800a438:	4641      	mov	r1, r8
 800a43a:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800a43e:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800a442:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800a446:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800a44a:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800a44e:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800a452:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800a456:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800a45a:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800a45e:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800a462:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800a466:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800a46a:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800a46e:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800a472:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800a476:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800a47a:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800a47e:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800a482:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800a486:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800a48a:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800a48e:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800a492:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800a496:	ed12 4a04 	vldr	s8, [r2, #-16]
 800a49a:	ed53 4a04 	vldr	s9, [r3, #-16]
 800a49e:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a4a2:	ed52 5a03 	vldr	s11, [r2, #-12]
 800a4a6:	ed13 6a02 	vldr	s12, [r3, #-8]
 800a4aa:	ed12 7a02 	vldr	s14, [r2, #-8]
 800a4ae:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800a4b2:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800a4b6:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800a4ba:	3910      	subs	r1, #16
 800a4bc:	290f      	cmp	r1, #15
 800a4be:	ed52 ea01 	vldr	s29, [r2, #-4]
 800a4c2:	ed13 ea01 	vldr	s28, [r3, #-4]
 800a4c6:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800a4ca:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a4ce:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a4d2:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800a4d6:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800a4da:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800a4de:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a4e2:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a4e6:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a4ea:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a4ee:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a4f2:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a4f6:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a4fa:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a4fe:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a502:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800a506:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a50a:	d896      	bhi.n	800a43a <forward_dense+0x212>
 800a50c:	eb05 010e 	add.w	r1, r5, lr
 800a510:	465b      	mov	r3, fp
 800a512:	4662      	mov	r2, ip
 800a514:	2b00      	cmp	r3, #0
 800a516:	d075      	beq.n	800a604 <forward_dense+0x3dc>
 800a518:	ed91 7a00 	vldr	s14, [r1]
 800a51c:	edd2 7a00 	vldr	s15, [r2]
 800a520:	2b01      	cmp	r3, #1
 800a522:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a526:	d06d      	beq.n	800a604 <forward_dense+0x3dc>
 800a528:	ed91 7a01 	vldr	s14, [r1, #4]
 800a52c:	edd2 7a01 	vldr	s15, [r2, #4]
 800a530:	2b02      	cmp	r3, #2
 800a532:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a536:	d065      	beq.n	800a604 <forward_dense+0x3dc>
 800a538:	ed91 7a02 	vldr	s14, [r1, #8]
 800a53c:	edd2 7a02 	vldr	s15, [r2, #8]
 800a540:	2b03      	cmp	r3, #3
 800a542:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a546:	d05d      	beq.n	800a604 <forward_dense+0x3dc>
 800a548:	ed91 7a03 	vldr	s14, [r1, #12]
 800a54c:	edd2 7a03 	vldr	s15, [r2, #12]
 800a550:	2b04      	cmp	r3, #4
 800a552:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a556:	d055      	beq.n	800a604 <forward_dense+0x3dc>
 800a558:	ed91 7a04 	vldr	s14, [r1, #16]
 800a55c:	edd2 7a04 	vldr	s15, [r2, #16]
 800a560:	2b05      	cmp	r3, #5
 800a562:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a566:	d04d      	beq.n	800a604 <forward_dense+0x3dc>
 800a568:	ed91 7a05 	vldr	s14, [r1, #20]
 800a56c:	edd2 7a05 	vldr	s15, [r2, #20]
 800a570:	2b06      	cmp	r3, #6
 800a572:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a576:	d045      	beq.n	800a604 <forward_dense+0x3dc>
 800a578:	ed91 7a06 	vldr	s14, [r1, #24]
 800a57c:	edd2 7a06 	vldr	s15, [r2, #24]
 800a580:	2b07      	cmp	r3, #7
 800a582:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a586:	d03d      	beq.n	800a604 <forward_dense+0x3dc>
 800a588:	ed91 7a07 	vldr	s14, [r1, #28]
 800a58c:	edd2 7a07 	vldr	s15, [r2, #28]
 800a590:	2b08      	cmp	r3, #8
 800a592:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a596:	d035      	beq.n	800a604 <forward_dense+0x3dc>
 800a598:	ed91 7a08 	vldr	s14, [r1, #32]
 800a59c:	edd2 7a08 	vldr	s15, [r2, #32]
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5a6:	d02d      	beq.n	800a604 <forward_dense+0x3dc>
 800a5a8:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800a5ac:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a5b0:	2b0a      	cmp	r3, #10
 800a5b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5b6:	d025      	beq.n	800a604 <forward_dense+0x3dc>
 800a5b8:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800a5bc:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800a5c0:	2b0b      	cmp	r3, #11
 800a5c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5c6:	d01d      	beq.n	800a604 <forward_dense+0x3dc>
 800a5c8:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800a5cc:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800a5d0:	2b0c      	cmp	r3, #12
 800a5d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5d6:	d015      	beq.n	800a604 <forward_dense+0x3dc>
 800a5d8:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800a5dc:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800a5e0:	2b0d      	cmp	r3, #13
 800a5e2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5e6:	d00d      	beq.n	800a604 <forward_dense+0x3dc>
 800a5e8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800a5ec:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800a5f0:	2b0e      	cmp	r3, #14
 800a5f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5f6:	d005      	beq.n	800a604 <forward_dense+0x3dc>
 800a5f8:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800a5fc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a600:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a604:	444d      	add	r5, r9
 800a606:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800a60a:	ece0 6a01 	vstmia	r0!, {s13}
 800a60e:	42b0      	cmp	r0, r6
 800a610:	f4bf aeaa 	bcs.w	800a368 <forward_dense+0x140>
 800a614:	2c00      	cmp	r4, #0
 800a616:	f47f af01 	bne.w	800a41c <forward_dense+0x1f4>
 800a61a:	f1b8 0f0f 	cmp.w	r8, #15
 800a61e:	eef0 fa6a 	vmov.f32	s31, s21
 800a622:	eddf 6a05 	vldr	s13, [pc, #20]	; 800a638 <forward_dense+0x410>
 800a626:	f63f af03 	bhi.w	800a430 <forward_dense+0x208>
 800a62a:	4643      	mov	r3, r8
 800a62c:	4629      	mov	r1, r5
 800a62e:	463a      	mov	r2, r7
 800a630:	e770      	b.n	800a514 <forward_dense+0x2ec>
 800a632:	461c      	mov	r4, r3
 800a634:	e670      	b.n	800a318 <forward_dense+0xf0>
 800a636:	bf00      	nop
 800a638:	00000000 	.word	0x00000000
 800a63c:	4634      	mov	r4, r6
 800a63e:	4646      	mov	r6, r8
 800a640:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a644:	9400      	str	r4, [sp, #0]
 800a646:	463b      	mov	r3, r7
 800a648:	4629      	mov	r1, r5
 800a64a:	4652      	mov	r2, sl
 800a64c:	4640      	mov	r0, r8
 800a64e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800a652:	f7ff fc5d 	bl	8009f10 <ai_dict8_dot_array_f32>
 800a656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a658:	f84b 3b04 	str.w	r3, [fp], #4
 800a65c:	455e      	cmp	r6, fp
 800a65e:	444d      	add	r5, r9
 800a660:	d8f0      	bhi.n	800a644 <forward_dense+0x41c>
 800a662:	46a0      	mov	r8, r4
 800a664:	e680      	b.n	800a368 <forward_dense+0x140>
 800a666:	2300      	movs	r3, #0
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	deff      	udf	#255	; 0xff
 800a66c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a670:	2f00      	cmp	r7, #0
 800a672:	f43f ae29 	beq.w	800a2c8 <forward_dense+0xa0>
 800a676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a67a:	f001 f9af 	bl	800b9dc <ai_array_get_byte_size>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4602      	mov	r2, r0
 800a682:	4651      	mov	r1, sl
 800a684:	4618      	mov	r0, r3
 800a686:	f001 fa05 	bl	800ba94 <memcpy>
 800a68a:	4682      	mov	sl, r0
 800a68c:	e61c      	b.n	800a2c8 <forward_dense+0xa0>
 800a68e:	2300      	movs	r3, #0
 800a690:	9307      	str	r3, [sp, #28]
 800a692:	e5f3      	b.n	800a27c <forward_dense+0x54>
 800a694:	9306      	str	r3, [sp, #24]
 800a696:	e5e4      	b.n	800a262 <forward_dense+0x3a>

0800a698 <array_f32_identity>:
 800a698:	6983      	ldr	r3, [r0, #24]
 800a69a:	6989      	ldr	r1, [r1, #24]
 800a69c:	428b      	cmp	r3, r1
 800a69e:	d004      	beq.n	800a6aa <array_f32_identity+0x12>
 800a6a0:	0092      	lsls	r2, r2, #2
 800a6a2:	68c9      	ldr	r1, [r1, #12]
 800a6a4:	68d8      	ldr	r0, [r3, #12]
 800a6a6:	f001 b9f5 	b.w	800ba94 <memcpy>
 800a6aa:	4770      	bx	lr

0800a6ac <forward_lstm>:
 800a6ac:	6983      	ldr	r3, [r0, #24]
 800a6ae:	881a      	ldrh	r2, [r3, #0]
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	f000 8530 	beq.w	800b116 <forward_lstm+0xa6a>
 800a6b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ba:	ed2d 8b02 	vpush	{d8}
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	6859      	ldr	r1, [r3, #4]
 800a6c2:	b0ff      	sub	sp, #508	; 0x1fc
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	f000 855e 	beq.w	800b186 <forward_lstm+0xada>
 800a6ca:	6809      	ldr	r1, [r1, #0]
 800a6cc:	9122      	str	r1, [sp, #136]	; 0x88
 800a6ce:	2a01      	cmp	r2, #1
 800a6d0:	f240 84ac 	bls.w	800b02c <forward_lstm+0x980>
 800a6d4:	6919      	ldr	r1, [r3, #16]
 800a6d6:	b101      	cbz	r1, 800a6da <forward_lstm+0x2e>
 800a6d8:	6809      	ldr	r1, [r1, #0]
 800a6da:	2a02      	cmp	r2, #2
 800a6dc:	f000 84a9 	beq.w	800b032 <forward_lstm+0x986>
 800a6e0:	69de      	ldr	r6, [r3, #28]
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	f000 8528 	beq.w	800b138 <forward_lstm+0xa8c>
 800a6e8:	f113 0e18 	adds.w	lr, r3, #24
 800a6ec:	6835      	ldr	r5, [r6, #0]
 800a6ee:	d008      	beq.n	800a702 <forward_lstm+0x56>
 800a6f0:	8b1c      	ldrh	r4, [r3, #24]
 800a6f2:	2c01      	cmp	r4, #1
 800a6f4:	f240 8541 	bls.w	800b17a <forward_lstm+0xace>
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	f000 8520 	beq.w	800b13e <forward_lstm+0xa92>
 800a6fe:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800a702:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800a704:	68cf      	ldr	r7, [r1, #12]
 800a706:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800a70a:	6989      	ldr	r1, [r1, #24]
 800a70c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800a710:	f8d0 b02c 	ldr.w	fp, [r0, #44]	; 0x2c
 800a714:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800a718:	9425      	str	r4, [sp, #148]	; 0x94
 800a71a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a71e:	6889      	ldr	r1, [r1, #8]
 800a720:	941a      	str	r4, [sp, #104]	; 0x68
 800a722:	ea4f 048b 	mov.w	r4, fp, lsl #2
 800a726:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800a72a:	9137      	str	r1, [sp, #220]	; 0xdc
 800a72c:	9438      	str	r4, [sp, #224]	; 0xe0
 800a72e:	e9d6 9102 	ldrd	r9, r1, [r6, #8]
 800a732:	e9d6 7605 	ldrd	r7, r6, [r6, #20]
 800a736:	f1bc 0f00 	cmp.w	ip, #0
 800a73a:	f000 8527 	beq.w	800b18c <forward_lstm+0xae0>
 800a73e:	f8dc c018 	ldr.w	ip, [ip, #24]
 800a742:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a746:	9426      	str	r4, [sp, #152]	; 0x98
 800a748:	2f00      	cmp	r7, #0
 800a74a:	f000 8526 	beq.w	800b19a <forward_lstm+0xaee>
 800a74e:	69bf      	ldr	r7, [r7, #24]
 800a750:	68bc      	ldr	r4, [r7, #8]
 800a752:	941b      	str	r4, [sp, #108]	; 0x6c
 800a754:	2e00      	cmp	r6, #0
 800a756:	f000 851d 	beq.w	800b194 <forward_lstm+0xae8>
 800a75a:	69b6      	ldr	r6, [r6, #24]
 800a75c:	68b4      	ldr	r4, [r6, #8]
 800a75e:	9427      	str	r4, [sp, #156]	; 0x9c
 800a760:	2a03      	cmp	r2, #3
 800a762:	f000 84d5 	beq.w	800b110 <forward_lstm+0xa64>
 800a766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 84cf 	beq.w	800b10c <forward_lstm+0xa60>
 800a76e:	69aa      	ldr	r2, [r5, #24]
 800a770:	903a      	str	r0, [sp, #232]	; 0xe8
 800a772:	4604      	mov	r4, r0
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f8de 0018 	ldr.w	r0, [lr, #24]
 800a77a:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800a77e:	6892      	ldr	r2, [r2, #8]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	6989      	ldr	r1, [r1, #24]
 800a784:	922a      	str	r2, [sp, #168]	; 0xa8
 800a786:	6882      	ldr	r2, [r0, #8]
 800a788:	922b      	str	r2, [sp, #172]	; 0xac
 800a78a:	68aa      	ldr	r2, [r5, #8]
 800a78c:	689e      	ldr	r6, [r3, #8]
 800a78e:	922c      	str	r2, [sp, #176]	; 0xb0
 800a790:	688a      	ldr	r2, [r1, #8]
 800a792:	922d      	str	r2, [sp, #180]	; 0xb4
 800a794:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800a796:	6863      	ldr	r3, [r4, #4]
 800a798:	9624      	str	r6, [sp, #144]	; 0x90
 800a79a:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 800a79e:	18b9      	adds	r1, r7, r2
 800a7a0:	9119      	str	r1, [sp, #100]	; 0x64
 800a7a2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 800a7a6:	eb06 0102 	add.w	r1, r6, r2
 800a7aa:	9715      	str	r7, [sp, #84]	; 0x54
 800a7ac:	4615      	mov	r5, r2
 800a7ae:	9101      	str	r1, [sp, #4]
 800a7b0:	933b      	str	r3, [sp, #236]	; 0xec
 800a7b2:	f000 84b7 	beq.w	800b124 <forward_lstm+0xa78>
 800a7b6:	0052      	lsls	r2, r2, #1
 800a7b8:	69e1      	ldr	r1, [r4, #28]
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f001 f96a 	bl	800ba94 <memcpy>
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4638      	mov	r0, r7
 800a7c6:	f001 f98d 	bl	800bae4 <memset>
 800a7ca:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800a7cc:	4ba2      	ldr	r3, [pc, #648]	; (800aa58 <forward_lstm+0x3ac>)
 800a7ce:	6b10      	ldr	r0, [r2, #48]	; 0x30
 800a7d0:	e9d2 560d 	ldrd	r5, r6, [r2, #52]	; 0x34
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	edd1 8a10 	vldr	s17, [r1, #64]	; 0x40
 800a7da:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800a7de:	4601      	mov	r1, r0
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	bf08      	it	eq
 800a7e4:	4619      	moveq	r1, r3
 800a7e6:	9128      	str	r1, [sp, #160]	; 0xa0
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	2d00      	cmp	r5, #0
 800a7ec:	bf08      	it	eq
 800a7ee:	4619      	moveq	r1, r3
 800a7f0:	911c      	str	r1, [sp, #112]	; 0x70
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	2e00      	cmp	r6, #0
 800a7f6:	bf08      	it	eq
 800a7f8:	4619      	moveq	r1, r3
 800a7fa:	9129      	str	r1, [sp, #164]	; 0xa4
 800a7fc:	f1b8 0f01 	cmp.w	r8, #1
 800a800:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a802:	bf8c      	ite	hi
 800a804:	465b      	movhi	r3, fp
 800a806:	2300      	movls	r3, #0
 800a808:	9321      	str	r3, [sp, #132]	; 0x84
 800a80a:	008e      	lsls	r6, r1, #2
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	f000 8484 	beq.w	800b11a <forward_lstm+0xa6e>
 800a812:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a814:	3a01      	subs	r2, #1
 800a816:	9216      	str	r2, [sp, #88]	; 0x58
 800a818:	f04f 32ff 	mov.w	r2, #4294967295
 800a81c:	9223      	str	r2, [sp, #140]	; 0x8c
 800a81e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800a820:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800a824:	b14a      	cbz	r2, 800a83a <forward_lstm+0x18e>
 800a826:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a828:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800a82a:	3a01      	subs	r2, #1
 800a82c:	fb03 f202 	mul.w	r2, r3, r2
 800a830:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a834:	425b      	negs	r3, r3
 800a836:	9237      	str	r2, [sp, #220]	; 0xdc
 800a838:	9321      	str	r3, [sp, #132]	; 0x84
 800a83a:	fa1f fa8b 	uxth.w	sl, fp
 800a83e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a840:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 800a844:	ed9f 8a86 	vldr	s16, [pc, #536]	; 800aa60 <forward_lstm+0x3b4>
 800a848:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800a84c:	19dc      	adds	r4, r3, r7
 800a84e:	9413      	str	r4, [sp, #76]	; 0x4c
 800a850:	fb0a f005 	mul.w	r0, sl, r5
 800a854:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a856:	970b      	str	r7, [sp, #44]	; 0x2c
 800a858:	0080      	lsls	r0, r0, #2
 800a85a:	4404      	add	r4, r0
 800a85c:	942e      	str	r4, [sp, #184]	; 0xb8
 800a85e:	fb0a f10a 	mul.w	r1, sl, sl
 800a862:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800a864:	0089      	lsls	r1, r1, #2
 800a866:	440c      	add	r4, r1
 800a868:	9430      	str	r4, [sp, #192]	; 0xc0
 800a86a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a86c:	443c      	add	r4, r7
 800a86e:	9414      	str	r4, [sp, #80]	; 0x50
 800a870:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 800a872:	4404      	add	r4, r0
 800a874:	942f      	str	r4, [sp, #188]	; 0xbc
 800a876:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 800a878:	440c      	add	r4, r1
 800a87a:	9431      	str	r4, [sp, #196]	; 0xc4
 800a87c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a87e:	443c      	add	r4, r7
 800a880:	9418      	str	r4, [sp, #96]	; 0x60
 800a882:	1f2a      	subs	r2, r5, #4
 800a884:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800a886:	f1aa 0304 	sub.w	r3, sl, #4
 800a88a:	0892      	lsrs	r2, r2, #2
 800a88c:	443c      	add	r4, r7
 800a88e:	089b      	lsrs	r3, r3, #2
 800a890:	3201      	adds	r2, #1
 800a892:	9432      	str	r4, [sp, #200]	; 0xc8
 800a894:	3301      	adds	r3, #1
 800a896:	0112      	lsls	r2, r2, #4
 800a898:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 800a89a:	9208      	str	r2, [sp, #32]
 800a89c:	011a      	lsls	r2, r3, #4
 800a89e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800a8a0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8a2:	1820      	adds	r0, r4, r0
 800a8a4:	443b      	add	r3, r7
 800a8a6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 800a8a8:	931e      	str	r3, [sp, #120]	; 0x78
 800a8aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a8ac:	9034      	str	r0, [sp, #208]	; 0xd0
 800a8ae:	1861      	adds	r1, r4, r1
 800a8b0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a8b2:	9135      	str	r1, [sp, #212]	; 0xd4
 800a8b4:	443b      	add	r3, r7
 800a8b6:	1939      	adds	r1, r7, r4
 800a8b8:	931d      	str	r3, [sp, #116]	; 0x74
 800a8ba:	f00b 0c03 	and.w	ip, fp, #3
 800a8be:	00ab      	lsls	r3, r5, #2
 800a8c0:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800a8c4:	9136      	str	r1, [sp, #216]	; 0xd8
 800a8c6:	9303      	str	r3, [sp, #12]
 800a8c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	9339      	str	r3, [sp, #228]	; 0xe4
 800a8ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8d0:	fb06 f303 	mul.w	r3, r6, r3
 800a8d4:	9333      	str	r3, [sp, #204]	; 0xcc
 800a8d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8d8:	fb06 f303 	mul.w	r3, r6, r3
 800a8dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8de:	4654      	mov	r4, sl
 800a8e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8e4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	4a5c      	ldr	r2, [pc, #368]	; (800aa5c <forward_lstm+0x3b0>)
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	923c      	str	r2, [sp, #240]	; 0xf0
 800a8ee:	4401      	add	r1, r0
 800a8f0:	9240      	str	r2, [sp, #256]	; 0x100
 800a8f2:	9244      	str	r2, [sp, #272]	; 0x110
 800a8f4:	9248      	str	r2, [sp, #288]	; 0x120
 800a8f6:	924c      	str	r2, [sp, #304]	; 0x130
 800a8f8:	9250      	str	r2, [sp, #320]	; 0x140
 800a8fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a8fc:	9116      	str	r1, [sp, #88]	; 0x58
 800a8fe:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a900:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a902:	943d      	str	r4, [sp, #244]	; 0xf4
 800a904:	189f      	adds	r7, r3, r2
 800a906:	ae3c      	add	r6, sp, #240	; 0xf0
 800a908:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a90a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a90c:	9441      	str	r4, [sp, #260]	; 0x104
 800a90e:	9445      	str	r4, [sp, #276]	; 0x114
 800a910:	9449      	str	r4, [sp, #292]	; 0x124
 800a912:	944d      	str	r4, [sp, #308]	; 0x134
 800a914:	9451      	str	r4, [sp, #324]	; 0x144
 800a916:	9702      	str	r7, [sp, #8]
 800a918:	e9cd 113e 	strd	r1, r1, [sp, #248]	; 0xf8
 800a91c:	9342      	str	r3, [sp, #264]	; 0x108
 800a91e:	9343      	str	r3, [sp, #268]	; 0x10c
 800a920:	9046      	str	r0, [sp, #280]	; 0x118
 800a922:	9047      	str	r0, [sp, #284]	; 0x11c
 800a924:	924a      	str	r2, [sp, #296]	; 0x128
 800a926:	924b      	str	r2, [sp, #300]	; 0x12c
 800a928:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a92a:	965a      	str	r6, [sp, #360]	; 0x168
 800a92c:	ae40      	add	r6, sp, #256	; 0x100
 800a92e:	9661      	str	r6, [sp, #388]	; 0x184
 800a930:	ae44      	add	r6, sp, #272	; 0x110
 800a932:	9668      	str	r6, [sp, #416]	; 0x1a0
 800a934:	ae48      	add	r6, sp, #288	; 0x120
 800a936:	966f      	str	r6, [sp, #444]	; 0x1bc
 800a938:	ae4c      	add	r6, sp, #304	; 0x130
 800a93a:	924e      	str	r2, [sp, #312]	; 0x138
 800a93c:	924f      	str	r2, [sp, #316]	; 0x13c
 800a93e:	9676      	str	r6, [sp, #472]	; 0x1d8
 800a940:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a942:	9252      	str	r2, [sp, #328]	; 0x148
 800a944:	ae50      	add	r6, sp, #320	; 0x140
 800a946:	9253      	str	r2, [sp, #332]	; 0x14c
 800a948:	967d      	str	r6, [sp, #500]	; 0x1f4
 800a94a:	2c00      	cmp	r4, #0
 800a94c:	f000 83bf 	beq.w	800b0ce <forward_lstm+0xa22>
 800a950:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a952:	9220      	str	r2, [sp, #128]	; 0x80
 800a954:	46b4      	mov	ip, r6
 800a956:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a958:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 800a95c:	901f      	str	r0, [sp, #124]	; 0x7c
 800a95e:	eb0c 0e06 	add.w	lr, ip, r6
 800a962:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a964:	9611      	str	r6, [sp, #68]	; 0x44
 800a966:	9e32      	ldr	r6, [sp, #200]	; 0xc8
 800a968:	9610      	str	r6, [sp, #64]	; 0x40
 800a96a:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800a96c:	960f      	str	r6, [sp, #60]	; 0x3c
 800a96e:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800a970:	960e      	str	r6, [sp, #56]	; 0x38
 800a972:	9e08      	ldr	r6, [sp, #32]
 800a974:	4690      	mov	r8, r2
 800a976:	19be      	adds	r6, r7, r6
 800a978:	469c      	mov	ip, r3
 800a97a:	4647      	mov	r7, r8
 800a97c:	e9dd 832f 	ldrd	r8, r3, [sp, #188]	; 0xbc
 800a980:	9307      	str	r3, [sp, #28]
 800a982:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a984:	9306      	str	r3, [sp, #24]
 800a986:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a988:	960a      	str	r6, [sp, #40]	; 0x28
 800a98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a98c:	9e01      	ldr	r6, [sp, #4]
 800a98e:	9305      	str	r3, [sp, #20]
 800a990:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a996:	4416      	add	r6, r2
 800a998:	960d      	str	r6, [sp, #52]	; 0x34
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a9a0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9a2:	2d03      	cmp	r5, #3
 800a9a4:	ed81 8a00 	vstr	s16, [r1]
 800a9a8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800aa60 <forward_lstm+0x3b4>
 800a9ac:	f240 8360 	bls.w	800b070 <forward_lstm+0x9c4>
 800a9b0:	9b04      	ldr	r3, [sp, #16]
 800a9b2:	f103 0210 	add.w	r2, r3, #16
 800a9b6:	9b02      	ldr	r3, [sp, #8]
 800a9b8:	46aa      	mov	sl, r5
 800a9ba:	3310      	adds	r3, #16
 800a9bc:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a9c0:	ed53 7a03 	vldr	s15, [r3, #-12]
 800a9c4:	ed52 3a04 	vldr	s7, [r2, #-16]
 800a9c8:	ed13 4a04 	vldr	s8, [r3, #-16]
 800a9cc:	ed52 4a02 	vldr	s9, [r2, #-8]
 800a9d0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a9d4:	ed52 5a01 	vldr	s11, [r2, #-4]
 800a9d8:	ed13 6a01 	vldr	s12, [r3, #-4]
 800a9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e0:	f1aa 0a04 	sub.w	sl, sl, #4
 800a9e4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a9e8:	f1ba 0f03 	cmp.w	sl, #3
 800a9ec:	f102 0210 	add.w	r2, r2, #16
 800a9f0:	f103 0310 	add.w	r3, r3, #16
 800a9f4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a9f8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a9fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aa00:	d8dc      	bhi.n	800a9bc <forward_lstm+0x310>
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	9a08      	ldr	r2, [sp, #32]
 800aa06:	eb03 0a02 	add.w	sl, r3, r2
 800aa0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa0e:	b1ab      	cbz	r3, 800aa3c <forward_lstm+0x390>
 800aa10:	ed9a 7a00 	vldr	s14, [sl]
 800aa14:	edd2 7a00 	vldr	s15, [r2]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aa1e:	d00d      	beq.n	800aa3c <forward_lstm+0x390>
 800aa20:	ed9a 7a01 	vldr	s14, [sl, #4]
 800aa24:	edd2 7a01 	vldr	s15, [r2, #4]
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aa2e:	d005      	beq.n	800aa3c <forward_lstm+0x390>
 800aa30:	ed9a 7a02 	vldr	s14, [sl, #8]
 800aa34:	edd2 7a02 	vldr	s15, [r2, #8]
 800aa38:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aa3c:	2c03      	cmp	r4, #3
 800aa3e:	edc1 6a00 	vstr	s13, [r1]
 800aa42:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800aa60 <forward_lstm+0x3b4>
 800aa46:	f240 830f 	bls.w	800b068 <forward_lstm+0x9bc>
 800aa4a:	9b05      	ldr	r3, [sp, #20]
 800aa4c:	f103 0210 	add.w	r2, r3, #16
 800aa50:	9b01      	ldr	r3, [sp, #4]
 800aa52:	46a2      	mov	sl, r4
 800aa54:	3310      	adds	r3, #16
 800aa56:	e005      	b.n	800aa64 <forward_lstm+0x3b8>
 800aa58:	0800a699 	.word	0x0800a699
 800aa5c:	01821040 	.word	0x01821040
 800aa60:	00000000 	.word	0x00000000
 800aa64:	ed12 7a03 	vldr	s14, [r2, #-12]
 800aa68:	ed53 7a03 	vldr	s15, [r3, #-12]
 800aa6c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800aa70:	ed53 3a04 	vldr	s7, [r3, #-16]
 800aa74:	ed12 4a02 	vldr	s8, [r2, #-8]
 800aa78:	ed53 4a02 	vldr	s9, [r3, #-8]
 800aa7c:	ed12 5a01 	vldr	s10, [r2, #-4]
 800aa80:	ed53 5a01 	vldr	s11, [r3, #-4]
 800aa84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa88:	f1aa 0a04 	sub.w	sl, sl, #4
 800aa8c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800aa90:	f1ba 0f03 	cmp.w	sl, #3
 800aa94:	f102 0210 	add.w	r2, r2, #16
 800aa98:	f103 0310 	add.w	r3, r3, #16
 800aa9c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800aaa0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800aaa4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800aaa8:	d8dc      	bhi.n	800aa64 <forward_lstm+0x3b8>
 800aaaa:	9b05      	ldr	r3, [sp, #20]
 800aaac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaae:	4413      	add	r3, r2
 800aab0:	b1ce      	cbz	r6, 800aae6 <forward_lstm+0x43a>
 800aab2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aab4:	46b2      	mov	sl, r6
 800aab6:	ed93 7a00 	vldr	s14, [r3]
 800aaba:	edd2 7a00 	vldr	s15, [r2]
 800aabe:	f1ba 0f01 	cmp.w	sl, #1
 800aac2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aac6:	d00e      	beq.n	800aae6 <forward_lstm+0x43a>
 800aac8:	ed93 7a01 	vldr	s14, [r3, #4]
 800aacc:	edd2 7a01 	vldr	s15, [r2, #4]
 800aad0:	f1ba 0f02 	cmp.w	sl, #2
 800aad4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aad8:	d005      	beq.n	800aae6 <forward_lstm+0x43a>
 800aada:	ed93 7a02 	vldr	s14, [r3, #8]
 800aade:	edd2 7a02 	vldr	s15, [r2, #8]
 800aae2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aae8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800aaec:	2d03      	cmp	r5, #3
 800aaee:	edc1 6a00 	vstr	s13, [r1]
 800aaf2:	ecb3 7a01 	vldmia	r3!, {s14}
 800aaf6:	edd7 7a00 	vldr	s15, [r7]
 800aafa:	930f      	str	r3, [sp, #60]	; 0x3c
 800aafc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aafe:	ecb3 6a01 	vldmia	r3!, {s12}
 800ab02:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ab06:	46bb      	mov	fp, r7
 800ab08:	930e      	str	r3, [sp, #56]	; 0x38
 800ab0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ab0e:	ece1 6a01 	vstmia	r1!, {s13}
 800ab12:	ed8c 8a00 	vstr	s16, [ip]
 800ab16:	ed5f 6a2e 	vldr	s13, [pc, #-184]	; 800aa60 <forward_lstm+0x3b4>
 800ab1a:	f240 82a0 	bls.w	800b05e <forward_lstm+0x9b2>
 800ab1e:	9b06      	ldr	r3, [sp, #24]
 800ab20:	f103 0210 	add.w	r2, r3, #16
 800ab24:	9b02      	ldr	r3, [sp, #8]
 800ab26:	46aa      	mov	sl, r5
 800ab28:	3310      	adds	r3, #16
 800ab2a:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ab2e:	ed53 7a03 	vldr	s15, [r3, #-12]
 800ab32:	ed52 3a04 	vldr	s7, [r2, #-16]
 800ab36:	ed13 4a04 	vldr	s8, [r3, #-16]
 800ab3a:	ed52 4a02 	vldr	s9, [r2, #-8]
 800ab3e:	ed13 5a02 	vldr	s10, [r3, #-8]
 800ab42:	ed52 5a01 	vldr	s11, [r2, #-4]
 800ab46:	ed13 6a01 	vldr	s12, [r3, #-4]
 800ab4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4e:	f1aa 0a04 	sub.w	sl, sl, #4
 800ab52:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ab56:	f1ba 0f03 	cmp.w	sl, #3
 800ab5a:	f102 0210 	add.w	r2, r2, #16
 800ab5e:	f103 0310 	add.w	r3, r3, #16
 800ab62:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ab66:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ab6a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ab6e:	d8dc      	bhi.n	800ab2a <forward_lstm+0x47e>
 800ab70:	9b06      	ldr	r3, [sp, #24]
 800ab72:	9a08      	ldr	r2, [sp, #32]
 800ab74:	eb03 0a02 	add.w	sl, r3, r2
 800ab78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab7c:	b1ab      	cbz	r3, 800abaa <forward_lstm+0x4fe>
 800ab7e:	ed9a 7a00 	vldr	s14, [sl]
 800ab82:	edd2 7a00 	vldr	s15, [r2]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab8c:	d00d      	beq.n	800abaa <forward_lstm+0x4fe>
 800ab8e:	ed9a 7a01 	vldr	s14, [sl, #4]
 800ab92:	edd2 7a01 	vldr	s15, [r2, #4]
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab9c:	d005      	beq.n	800abaa <forward_lstm+0x4fe>
 800ab9e:	ed9a 7a02 	vldr	s14, [sl, #8]
 800aba2:	edd2 7a02 	vldr	s15, [r2, #8]
 800aba6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800abaa:	2c03      	cmp	r4, #3
 800abac:	9b07      	ldr	r3, [sp, #28]
 800abae:	edcc 6a00 	vstr	s13, [ip]
 800abb2:	ed1f 6a55 	vldr	s12, [pc, #-340]	; 800aa60 <forward_lstm+0x3b4>
 800abb6:	f240 824f 	bls.w	800b058 <forward_lstm+0x9ac>
 800abba:	f103 0210 	add.w	r2, r3, #16
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	46a2      	mov	sl, r4
 800abc2:	3310      	adds	r3, #16
 800abc4:	ed12 7a03 	vldr	s14, [r2, #-12]
 800abc8:	ed53 7a03 	vldr	s15, [r3, #-12]
 800abcc:	ed12 3a04 	vldr	s6, [r2, #-16]
 800abd0:	ed53 3a04 	vldr	s7, [r3, #-16]
 800abd4:	ed12 4a02 	vldr	s8, [r2, #-8]
 800abd8:	ed53 4a02 	vldr	s9, [r3, #-8]
 800abdc:	ed12 5a01 	vldr	s10, [r2, #-4]
 800abe0:	ed53 5a01 	vldr	s11, [r3, #-4]
 800abe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe8:	f1aa 0a04 	sub.w	sl, sl, #4
 800abec:	eee3 7a23 	vfma.f32	s15, s6, s7
 800abf0:	f1ba 0f03 	cmp.w	sl, #3
 800abf4:	f102 0210 	add.w	r2, r2, #16
 800abf8:	f103 0310 	add.w	r3, r3, #16
 800abfc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ac00:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ac04:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ac08:	d8dc      	bhi.n	800abc4 <forward_lstm+0x518>
 800ac0a:	9b07      	ldr	r3, [sp, #28]
 800ac0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac0e:	4413      	add	r3, r2
 800ac10:	b1ce      	cbz	r6, 800ac46 <forward_lstm+0x59a>
 800ac12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac14:	46b2      	mov	sl, r6
 800ac16:	ed93 7a00 	vldr	s14, [r3]
 800ac1a:	edd2 7a00 	vldr	s15, [r2]
 800ac1e:	f1ba 0f01 	cmp.w	sl, #1
 800ac22:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac26:	d00e      	beq.n	800ac46 <forward_lstm+0x59a>
 800ac28:	ed93 7a01 	vldr	s14, [r3, #4]
 800ac2c:	edd2 7a01 	vldr	s15, [r2, #4]
 800ac30:	f1ba 0f02 	cmp.w	sl, #2
 800ac34:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac38:	d005      	beq.n	800ac46 <forward_lstm+0x59a>
 800ac3a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac3e:	edd2 7a02 	vldr	s15, [r2, #8]
 800ac42:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac48:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ac4c:	2d03      	cmp	r5, #3
 800ac4e:	edcc 6a00 	vstr	s13, [ip]
 800ac52:	ecb3 6a01 	vldmia	r3!, {s12}
 800ac56:	ed9e 7a00 	vldr	s14, [lr]
 800ac5a:	eddb 7a00 	vldr	s15, [fp]
 800ac5e:	9310      	str	r3, [sp, #64]	; 0x40
 800ac60:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac64:	f107 0704 	add.w	r7, r7, #4
 800ac68:	46f2      	mov	sl, lr
 800ac6a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ac6e:	ecec 6a01 	vstmia	ip!, {s13}
 800ac72:	ed80 8a00 	vstr	s16, [r0]
 800ac76:	ed5f 6a86 	vldr	s13, [pc, #-536]	; 800aa60 <forward_lstm+0x3b4>
 800ac7a:	f240 81e9 	bls.w	800b050 <forward_lstm+0x9a4>
 800ac7e:	9b02      	ldr	r3, [sp, #8]
 800ac80:	f108 0210 	add.w	r2, r8, #16
 800ac84:	3310      	adds	r3, #16
 800ac86:	46ab      	mov	fp, r5
 800ac88:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ac8c:	ed53 7a03 	vldr	s15, [r3, #-12]
 800ac90:	ed52 3a04 	vldr	s7, [r2, #-16]
 800ac94:	ed13 4a04 	vldr	s8, [r3, #-16]
 800ac98:	ed52 4a02 	vldr	s9, [r2, #-8]
 800ac9c:	ed13 5a02 	vldr	s10, [r3, #-8]
 800aca0:	ed52 5a01 	vldr	s11, [r2, #-4]
 800aca4:	ed13 6a01 	vldr	s12, [r3, #-4]
 800aca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acac:	f1ab 0b04 	sub.w	fp, fp, #4
 800acb0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800acb4:	f1bb 0f03 	cmp.w	fp, #3
 800acb8:	f102 0210 	add.w	r2, r2, #16
 800acbc:	f103 0310 	add.w	r3, r3, #16
 800acc0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800acc4:	eee5 7a86 	vfma.f32	s15, s11, s12
 800acc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800accc:	d8dc      	bhi.n	800ac88 <forward_lstm+0x5dc>
 800acce:	9b08      	ldr	r3, [sp, #32]
 800acd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acd2:	eb08 0b03 	add.w	fp, r8, r3
 800acd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd8:	b1ab      	cbz	r3, 800ad06 <forward_lstm+0x65a>
 800acda:	ed9b 7a00 	vldr	s14, [fp]
 800acde:	edd2 7a00 	vldr	s15, [r2]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ace8:	d00d      	beq.n	800ad06 <forward_lstm+0x65a>
 800acea:	ed9b 7a01 	vldr	s14, [fp, #4]
 800acee:	edd2 7a01 	vldr	s15, [r2, #4]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800acf8:	d005      	beq.n	800ad06 <forward_lstm+0x65a>
 800acfa:	ed9b 7a02 	vldr	s14, [fp, #8]
 800acfe:	edd2 7a02 	vldr	s15, [r2, #8]
 800ad02:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad06:	2c03      	cmp	r4, #3
 800ad08:	edc0 6a00 	vstr	s13, [r0]
 800ad0c:	ed1f 6aac 	vldr	s12, [pc, #-688]	; 800aa60 <forward_lstm+0x3b4>
 800ad10:	f240 819a 	bls.w	800b048 <forward_lstm+0x99c>
 800ad14:	9b01      	ldr	r3, [sp, #4]
 800ad16:	f109 0210 	add.w	r2, r9, #16
 800ad1a:	3310      	adds	r3, #16
 800ad1c:	46a3      	mov	fp, r4
 800ad1e:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ad22:	ed53 7a03 	vldr	s15, [r3, #-12]
 800ad26:	ed12 3a04 	vldr	s6, [r2, #-16]
 800ad2a:	ed53 3a04 	vldr	s7, [r3, #-16]
 800ad2e:	ed12 4a02 	vldr	s8, [r2, #-8]
 800ad32:	ed53 4a02 	vldr	s9, [r3, #-8]
 800ad36:	ed12 5a01 	vldr	s10, [r2, #-4]
 800ad3a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800ad3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad42:	f1ab 0b04 	sub.w	fp, fp, #4
 800ad46:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ad4a:	f1bb 0f03 	cmp.w	fp, #3
 800ad4e:	f102 0210 	add.w	r2, r2, #16
 800ad52:	f103 0310 	add.w	r3, r3, #16
 800ad56:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ad5a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ad5e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ad62:	d8dc      	bhi.n	800ad1e <forward_lstm+0x672>
 800ad64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad66:	444b      	add	r3, r9
 800ad68:	b1ce      	cbz	r6, 800ad9e <forward_lstm+0x6f2>
 800ad6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad6c:	46b3      	mov	fp, r6
 800ad6e:	ed93 7a00 	vldr	s14, [r3]
 800ad72:	edd2 7a00 	vldr	s15, [r2]
 800ad76:	f1bb 0f01 	cmp.w	fp, #1
 800ad7a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ad7e:	d00e      	beq.n	800ad9e <forward_lstm+0x6f2>
 800ad80:	ed93 7a01 	vldr	s14, [r3, #4]
 800ad84:	edd2 7a01 	vldr	s15, [r2, #4]
 800ad88:	f1bb 0f02 	cmp.w	fp, #2
 800ad8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ad90:	d005      	beq.n	800ad9e <forward_lstm+0x6f2>
 800ad92:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad96:	edd2 7a02 	vldr	s15, [r2, #8]
 800ad9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ad9e:	9a04      	ldr	r2, [sp, #16]
 800ada0:	9b03      	ldr	r3, [sp, #12]
 800ada2:	4693      	mov	fp, r2
 800ada4:	9a05      	ldr	r2, [sp, #20]
 800ada6:	449b      	add	fp, r3
 800ada8:	f8cd b010 	str.w	fp, [sp, #16]
 800adac:	4693      	mov	fp, r2
 800adae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adb0:	ee36 6a26 	vadd.f32	s12, s12, s13
 800adb4:	4493      	add	fp, r2
 800adb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800adb8:	ed80 6a00 	vstr	s12, [r0]
 800adbc:	ecf2 6a01 	vldmia	r2!, {s13}
 800adc0:	ed9a 7a00 	vldr	s14, [sl]
 800adc4:	ed57 7a01 	vldr	s15, [r7, #-4]
 800adc8:	9211      	str	r2, [sp, #68]	; 0x44
 800adca:	9a06      	ldr	r2, [sp, #24]
 800adcc:	f8cd b014 	str.w	fp, [sp, #20]
 800add0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800add4:	4692      	mov	sl, r2
 800add6:	449a      	add	sl, r3
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	f8cd a018 	str.w	sl, [sp, #24]
 800adde:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ade2:	469a      	mov	sl, r3
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ade8:	eef4 6ae8 	vcmpe.f32	s13, s17
 800adec:	4498      	add	r8, r3
 800adee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf4:	bf88      	it	hi
 800adf6:	eef0 6a68 	vmovhi.f32	s13, s17
 800adfa:	4492      	add	sl, r2
 800adfc:	428b      	cmp	r3, r1
 800adfe:	f10e 0e04 	add.w	lr, lr, #4
 800ae02:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae06:	4491      	add	r9, r2
 800ae08:	ece0 6a01 	vstmia	r0!, {s13}
 800ae0c:	f47f adc9 	bne.w	800a9a2 <forward_lstm+0x2f6>
 800ae10:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800ae14:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ae16:	a954      	add	r1, sp, #336	; 0x150
 800ae18:	4643      	mov	r3, r8
 800ae1a:	4608      	mov	r0, r1
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	47b8      	blx	r7
 800ae20:	a95b      	add	r1, sp, #364	; 0x16c
 800ae22:	4643      	mov	r3, r8
 800ae24:	4608      	mov	r0, r1
 800ae26:	4622      	mov	r2, r4
 800ae28:	47b8      	blx	r7
 800ae2a:	a962      	add	r1, sp, #392	; 0x188
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae30:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800ae32:	4622      	mov	r2, r4
 800ae34:	47b0      	blx	r6
 800ae36:	e9dd 931d 	ldrd	r9, r3, [sp, #116]	; 0x74
 800ae3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae3c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800ae40:	eb03 0802 	add.w	r8, r3, r2
 800ae44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ae46:	e9dd 1e18 	ldrd	r1, lr, [sp, #96]	; 0x60
 800ae4a:	e9dd 0734 	ldrd	r0, r7, [sp, #208]	; 0xd0
 800ae4e:	e9dd a61f 	ldrd	sl, r6, [sp, #124]	; 0x7c
 800ae52:	f003 0b03 	and.w	fp, r3, #3
 800ae56:	f8cd b010 	str.w	fp, [sp, #16]
 800ae5a:	ecbe 7a01 	vldmia	lr!, {s14}
 800ae5e:	ecfa 7a01 	vldmia	sl!, {s15}
 800ae62:	edd6 6a00 	vldr	s13, [r6]
 800ae66:	ecbc 6a01 	vldmia	ip!, {s12}
 800ae6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6e:	2d03      	cmp	r5, #3
 800ae70:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ae74:	eddf 6aaf 	vldr	s13, [pc, #700]	; 800b134 <forward_lstm+0xa88>
 800ae78:	ece6 7a01 	vstmia	r6!, {s15}
 800ae7c:	ed81 8a00 	vstr	s16, [r1]
 800ae80:	f240 80de 	bls.w	800b040 <forward_lstm+0x994>
 800ae84:	9b02      	ldr	r3, [sp, #8]
 800ae86:	f100 0210 	add.w	r2, r0, #16
 800ae8a:	3310      	adds	r3, #16
 800ae8c:	46ab      	mov	fp, r5
 800ae8e:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ae92:	ed53 7a03 	vldr	s15, [r3, #-12]
 800ae96:	ed52 3a04 	vldr	s7, [r2, #-16]
 800ae9a:	ed13 4a04 	vldr	s8, [r3, #-16]
 800ae9e:	ed52 4a02 	vldr	s9, [r2, #-8]
 800aea2:	ed13 5a02 	vldr	s10, [r3, #-8]
 800aea6:	ed52 5a01 	vldr	s11, [r2, #-4]
 800aeaa:	ed13 6a01 	vldr	s12, [r3, #-4]
 800aeae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb2:	f1ab 0b04 	sub.w	fp, fp, #4
 800aeb6:	eee3 7a84 	vfma.f32	s15, s7, s8
 800aeba:	f1bb 0f03 	cmp.w	fp, #3
 800aebe:	f102 0210 	add.w	r2, r2, #16
 800aec2:	f103 0310 	add.w	r3, r3, #16
 800aec6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800aeca:	eee5 7a86 	vfma.f32	s15, s11, s12
 800aece:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aed2:	d8dc      	bhi.n	800ae8e <forward_lstm+0x7e2>
 800aed4:	9b08      	ldr	r3, [sp, #32]
 800aed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aed8:	eb00 0b03 	add.w	fp, r0, r3
 800aedc:	9b04      	ldr	r3, [sp, #16]
 800aede:	b1ab      	cbz	r3, 800af0c <forward_lstm+0x860>
 800aee0:	ed9b 7a00 	vldr	s14, [fp]
 800aee4:	edd2 7a00 	vldr	s15, [r2]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aeee:	d00d      	beq.n	800af0c <forward_lstm+0x860>
 800aef0:	ed9b 7a01 	vldr	s14, [fp, #4]
 800aef4:	edd2 7a01 	vldr	s15, [r2, #4]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aefe:	d005      	beq.n	800af0c <forward_lstm+0x860>
 800af00:	ed9b 7a02 	vldr	s14, [fp, #8]
 800af04:	edd2 7a02 	vldr	s15, [r2, #8]
 800af08:	eee7 6a27 	vfma.f32	s13, s14, s15
 800af0c:	2c03      	cmp	r4, #3
 800af0e:	edc1 6a00 	vstr	s13, [r1]
 800af12:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800b134 <forward_lstm+0xa88>
 800af16:	f240 808f 	bls.w	800b038 <forward_lstm+0x98c>
 800af1a:	9b01      	ldr	r3, [sp, #4]
 800af1c:	f107 0210 	add.w	r2, r7, #16
 800af20:	3310      	adds	r3, #16
 800af22:	46a3      	mov	fp, r4
 800af24:	ed12 7a03 	vldr	s14, [r2, #-12]
 800af28:	ed53 7a03 	vldr	s15, [r3, #-12]
 800af2c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800af30:	ed53 3a04 	vldr	s7, [r3, #-16]
 800af34:	ed12 4a02 	vldr	s8, [r2, #-8]
 800af38:	ed53 4a02 	vldr	s9, [r3, #-8]
 800af3c:	ed12 5a01 	vldr	s10, [r2, #-4]
 800af40:	ed53 5a01 	vldr	s11, [r3, #-4]
 800af44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af48:	f1ab 0b04 	sub.w	fp, fp, #4
 800af4c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800af50:	f1bb 0f03 	cmp.w	fp, #3
 800af54:	f102 0210 	add.w	r2, r2, #16
 800af58:	f103 0310 	add.w	r3, r3, #16
 800af5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800af60:	eee5 7a25 	vfma.f32	s15, s10, s11
 800af64:	ee36 6a27 	vadd.f32	s12, s12, s15
 800af68:	d8dc      	bhi.n	800af24 <forward_lstm+0x878>
 800af6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af6e:	18fb      	adds	r3, r7, r3
 800af70:	b1ca      	cbz	r2, 800afa6 <forward_lstm+0x8fa>
 800af72:	4693      	mov	fp, r2
 800af74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af76:	ed93 7a00 	vldr	s14, [r3]
 800af7a:	edd2 7a00 	vldr	s15, [r2]
 800af7e:	f1bb 0f01 	cmp.w	fp, #1
 800af82:	eea7 6a27 	vfma.f32	s12, s14, s15
 800af86:	d00e      	beq.n	800afa6 <forward_lstm+0x8fa>
 800af88:	ed93 7a01 	vldr	s14, [r3, #4]
 800af8c:	edd2 7a01 	vldr	s15, [r2, #4]
 800af90:	f1bb 0f02 	cmp.w	fp, #2
 800af94:	eea7 6a27 	vfma.f32	s12, s14, s15
 800af98:	d005      	beq.n	800afa6 <forward_lstm+0x8fa>
 800af9a:	ed93 7a02 	vldr	s14, [r3, #8]
 800af9e:	edd2 7a02 	vldr	s15, [r2, #8]
 800afa2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800afac:	4418      	add	r0, r3
 800afae:	edc1 6a00 	vstr	s13, [r1]
 800afb2:	ecb9 7a01 	vldmia	r9!, {s14}
 800afb6:	ecb8 6a01 	vldmia	r8!, {s12}
 800afba:	ed56 7a01 	vldr	s15, [r6, #-4]
 800afbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800afc4:	441f      	add	r7, r3
 800afc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afc8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800afcc:	4563      	cmp	r3, ip
 800afce:	ece1 6a01 	vstmia	r1!, {s13}
 800afd2:	f47f af42 	bne.w	800ae5a <forward_lstm+0x7ae>
 800afd6:	a969      	add	r1, sp, #420	; 0x1a4
 800afd8:	4608      	mov	r0, r1
 800afda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afdc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800afde:	4622      	mov	r2, r4
 800afe0:	47b0      	blx	r6
 800afe2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800afe4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800afe6:	4622      	mov	r2, r4
 800afe8:	a977      	add	r1, sp, #476	; 0x1dc
 800afea:	a870      	add	r0, sp, #448	; 0x1c0
 800afec:	47b0      	blx	r6
 800afee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aff0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aff2:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800aff4:	ecb3 7a01 	vldmia	r3!, {s14}
 800aff8:	edd2 7a00 	vldr	s15, [r2]
 800affc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b000:	428b      	cmp	r3, r1
 800b002:	ece2 7a01 	vstmia	r2!, {s15}
 800b006:	d1f5      	bne.n	800aff4 <forward_lstm+0x948>
 800b008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d135      	bne.n	800b07a <forward_lstm+0x9ce>
 800b00e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b010:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b012:	428b      	cmp	r3, r1
 800b014:	da3f      	bge.n	800b096 <forward_lstm+0x9ea>
 800b016:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b018:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	440a      	add	r2, r1
 800b01e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b020:	db39      	blt.n	800b096 <forward_lstm+0x9ea>
 800b022:	9b01      	ldr	r3, [sp, #4]
 800b024:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b026:	9201      	str	r2, [sp, #4]
 800b028:	9315      	str	r3, [sp, #84]	; 0x54
 800b02a:	e459      	b.n	800a8e0 <forward_lstm+0x234>
 800b02c:	2300      	movs	r3, #0
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	deff      	udf	#255	; 0xff
 800b032:	2300      	movs	r3, #0
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	deff      	udf	#255	; 0xff
 800b038:	9a01      	ldr	r2, [sp, #4]
 800b03a:	46a3      	mov	fp, r4
 800b03c:	463b      	mov	r3, r7
 800b03e:	e79a      	b.n	800af76 <forward_lstm+0x8ca>
 800b040:	462b      	mov	r3, r5
 800b042:	9a02      	ldr	r2, [sp, #8]
 800b044:	4683      	mov	fp, r0
 800b046:	e74a      	b.n	800aede <forward_lstm+0x832>
 800b048:	46a3      	mov	fp, r4
 800b04a:	9a01      	ldr	r2, [sp, #4]
 800b04c:	464b      	mov	r3, r9
 800b04e:	e68e      	b.n	800ad6e <forward_lstm+0x6c2>
 800b050:	462b      	mov	r3, r5
 800b052:	9a02      	ldr	r2, [sp, #8]
 800b054:	46c3      	mov	fp, r8
 800b056:	e63f      	b.n	800acd8 <forward_lstm+0x62c>
 800b058:	9a01      	ldr	r2, [sp, #4]
 800b05a:	46a2      	mov	sl, r4
 800b05c:	e5db      	b.n	800ac16 <forward_lstm+0x56a>
 800b05e:	462b      	mov	r3, r5
 800b060:	9a02      	ldr	r2, [sp, #8]
 800b062:	f8dd a018 	ldr.w	sl, [sp, #24]
 800b066:	e589      	b.n	800ab7c <forward_lstm+0x4d0>
 800b068:	9a01      	ldr	r2, [sp, #4]
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	46a2      	mov	sl, r4
 800b06e:	e522      	b.n	800aab6 <forward_lstm+0x40a>
 800b070:	462b      	mov	r3, r5
 800b072:	9a02      	ldr	r2, [sp, #8]
 800b074:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b078:	e4c9      	b.n	800aa0e <forward_lstm+0x362>
 800b07a:	9e37      	ldr	r6, [sp, #220]	; 0xdc
 800b07c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800b07e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b080:	4630      	mov	r0, r6
 800b082:	f000 fd07 	bl	800ba94 <memcpy>
 800b086:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800b088:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b08a:	4633      	mov	r3, r6
 800b08c:	4413      	add	r3, r2
 800b08e:	9337      	str	r3, [sp, #220]	; 0xdc
 800b090:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b092:	428b      	cmp	r3, r1
 800b094:	dbbf      	blt.n	800b016 <forward_lstm+0x96a>
 800b096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b098:	b923      	cbnz	r3, 800b0a4 <forward_lstm+0x9f8>
 800b09a:	e9dd 0237 	ldrd	r0, r2, [sp, #220]	; 0xdc
 800b09e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b0a0:	f000 fcf8 	bl	800ba94 <memcpy>
 800b0a4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800b0a6:	b16b      	cbz	r3, 800b0c4 <forward_lstm+0xa18>
 800b0a8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	b153      	cbz	r3, 800b0c4 <forward_lstm+0xa18>
 800b0ae:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800b0b0:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f000 fced 	bl	800ba94 <memcpy>
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b0be:	4420      	add	r0, r4
 800b0c0:	f000 fce8 	bl	800ba94 <memcpy>
 800b0c4:	b07f      	add	sp, #508	; 0x1fc
 800b0c6:	ecbd 8b02 	vpop	{d8}
 800b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800b0d2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b0d4:	a954      	add	r1, sp, #336	; 0x150
 800b0d6:	4643      	mov	r3, r8
 800b0d8:	4622      	mov	r2, r4
 800b0da:	4608      	mov	r0, r1
 800b0dc:	47b0      	blx	r6
 800b0de:	a95b      	add	r1, sp, #364	; 0x16c
 800b0e0:	4643      	mov	r3, r8
 800b0e2:	4622      	mov	r2, r4
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	47b0      	blx	r6
 800b0e8:	a962      	add	r1, sp, #392	; 0x188
 800b0ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0ec:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	47b8      	blx	r7
 800b0f4:	a969      	add	r1, sp, #420	; 0x1a4
 800b0f6:	4643      	mov	r3, r8
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4608      	mov	r0, r1
 800b0fc:	47b0      	blx	r6
 800b0fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b100:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800b102:	4622      	mov	r2, r4
 800b104:	a977      	add	r1, sp, #476	; 0x1dc
 800b106:	a870      	add	r0, sp, #448	; 0x1c0
 800b108:	47b0      	blx	r6
 800b10a:	e77d      	b.n	800b008 <forward_lstm+0x95c>
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	deff      	udf	#255	; 0xff
 800b110:	2300      	movs	r3, #0
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	deff      	udf	#255	; 0xff
 800b116:	6853      	ldr	r3, [r2, #4]
 800b118:	deff      	udf	#255	; 0xff
 800b11a:	9216      	str	r2, [sp, #88]	; 0x58
 800b11c:	2201      	movs	r2, #1
 800b11e:	9223      	str	r2, [sp, #140]	; 0x8c
 800b120:	f7ff bb7d 	b.w	800a81e <forward_lstm+0x172>
 800b124:	4630      	mov	r0, r6
 800b126:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b12a:	993b      	ldr	r1, [sp, #236]	; 0xec
 800b12c:	f000 fcda 	bl	800bae4 <memset>
 800b130:	f7ff bb4b 	b.w	800a7ca <forward_lstm+0x11e>
 800b134:	00000000 	.word	0x00000000
 800b138:	f113 0518 	adds.w	r5, r3, #24
 800b13c:	d118      	bne.n	800b170 <forward_lstm+0xac4>
 800b13e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800b140:	68cf      	ldr	r7, [r1, #12]
 800b142:	68e6      	ldr	r6, [r4, #12]
 800b144:	6989      	ldr	r1, [r1, #24]
 800b146:	68f4      	ldr	r4, [r6, #12]
 800b148:	f8d0 b02c 	ldr.w	fp, [r0, #44]	; 0x2c
 800b14c:	6889      	ldr	r1, [r1, #8]
 800b14e:	9425      	str	r4, [sp, #148]	; 0x94
 800b150:	6874      	ldr	r4, [r6, #4]
 800b152:	941a      	str	r4, [sp, #104]	; 0x68
 800b154:	9137      	str	r1, [sp, #220]	; 0xdc
 800b156:	ea4f 048b 	mov.w	r4, fp, lsl #2
 800b15a:	2100      	movs	r1, #0
 800b15c:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800b160:	9438      	str	r4, [sp, #224]	; 0xe0
 800b162:	468e      	mov	lr, r1
 800b164:	4689      	mov	r9, r1
 800b166:	9126      	str	r1, [sp, #152]	; 0x98
 800b168:	911b      	str	r1, [sp, #108]	; 0x6c
 800b16a:	9127      	str	r1, [sp, #156]	; 0x9c
 800b16c:	f7ff baf8 	b.w	800a760 <forward_lstm+0xb4>
 800b170:	8b1c      	ldrh	r4, [r3, #24]
 800b172:	2c01      	cmp	r4, #1
 800b174:	4635      	mov	r5, r6
 800b176:	f63f aabf 	bhi.w	800a6f8 <forward_lstm+0x4c>
 800b17a:	2e00      	cmp	r6, #0
 800b17c:	d0df      	beq.n	800b13e <forward_lstm+0xa92>
 800b17e:	f04f 0e00 	mov.w	lr, #0
 800b182:	f7ff babe 	b.w	800a702 <forward_lstm+0x56>
 800b186:	9122      	str	r1, [sp, #136]	; 0x88
 800b188:	f7ff baa1 	b.w	800a6ce <forward_lstm+0x22>
 800b18c:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 800b190:	f7ff bada 	b.w	800a748 <forward_lstm+0x9c>
 800b194:	9627      	str	r6, [sp, #156]	; 0x9c
 800b196:	f7ff bae3 	b.w	800a760 <forward_lstm+0xb4>
 800b19a:	971b      	str	r7, [sp, #108]	; 0x6c
 800b19c:	f7ff bada 	b.w	800a754 <forward_lstm+0xa8>

0800b1a0 <nl_func_sigmoid_array_f32>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	ed2d 8b02 	vpush	{d8}
 800b1a6:	698e      	ldr	r6, [r1, #24]
 800b1a8:	6983      	ldr	r3, [r0, #24]
 800b1aa:	68b4      	ldr	r4, [r6, #8]
 800b1ac:	689d      	ldr	r5, [r3, #8]
 800b1ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b1b2:	3a01      	subs	r2, #1
 800b1b4:	0092      	lsls	r2, r2, #2
 800b1b6:	18a4      	adds	r4, r4, r2
 800b1b8:	d217      	bcs.n	800b1ea <nl_func_sigmoid_array_f32+0x4a>
 800b1ba:	3204      	adds	r2, #4
 800b1bc:	4415      	add	r5, r2
 800b1be:	3404      	adds	r4, #4
 800b1c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b1c4:	ed14 0a01 	vldr	s0, [r4, #-4]
 800b1c8:	eeb1 0a40 	vneg.f32	s0, s0
 800b1cc:	f003 fb50 	bl	800e870 <expf>
 800b1d0:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b1d4:	1f22      	subs	r2, r4, #4
 800b1d6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800b1da:	f1a4 0308 	sub.w	r3, r4, #8
 800b1de:	4614      	mov	r4, r2
 800b1e0:	ed65 7a01 	vstmdb	r5!, {s15}
 800b1e4:	68b2      	ldr	r2, [r6, #8]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d9ec      	bls.n	800b1c4 <nl_func_sigmoid_array_f32+0x24>
 800b1ea:	ecbd 8b02 	vpop	{d8}
 800b1ee:	bd70      	pop	{r4, r5, r6, pc}

0800b1f0 <nl_func_tanh_array_f32>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	698e      	ldr	r6, [r1, #24]
 800b1f4:	6983      	ldr	r3, [r0, #24]
 800b1f6:	68b4      	ldr	r4, [r6, #8]
 800b1f8:	689d      	ldr	r5, [r3, #8]
 800b1fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b1fe:	3a01      	subs	r2, #1
 800b200:	0092      	lsls	r2, r2, #2
 800b202:	18a4      	adds	r4, r4, r2
 800b204:	d20f      	bcs.n	800b226 <nl_func_tanh_array_f32+0x36>
 800b206:	3204      	adds	r2, #4
 800b208:	4415      	add	r5, r2
 800b20a:	3404      	adds	r4, #4
 800b20c:	ed14 0a01 	vldr	s0, [r4, #-4]
 800b210:	f003 fadc 	bl	800e7cc <tanhf>
 800b214:	ed25 0a01 	vstmdb	r5!, {s0}
 800b218:	68b2      	ldr	r2, [r6, #8]
 800b21a:	f1a4 0308 	sub.w	r3, r4, #8
 800b21e:	1f21      	subs	r1, r4, #4
 800b220:	429a      	cmp	r2, r3
 800b222:	460c      	mov	r4, r1
 800b224:	d9f2      	bls.n	800b20c <nl_func_tanh_array_f32+0x1c>
 800b226:	bd70      	pop	{r4, r5, r6, pc}

0800b228 <nl_func_sm_array_f32>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	ed2d 8b04 	vpush	{d8-d9}
 800b230:	b089      	sub	sp, #36	; 0x24
 800b232:	698f      	ldr	r7, [r1, #24]
 800b234:	6984      	ldr	r4, [r0, #24]
 800b236:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800b23a:	68bd      	ldr	r5, [r7, #8]
 800b23c:	9402      	str	r4, [sp, #8]
 800b23e:	4626      	mov	r6, r4
 800b240:	4696      	mov	lr, r2
 800b242:	eba2 020c 	sub.w	r2, r2, ip
 800b246:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800b24a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	68b6      	ldr	r6, [r6, #8]
 800b250:	ebae 0e04 	sub.w	lr, lr, r4
 800b254:	4295      	cmp	r5, r2
 800b256:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800b25a:	d354      	bcc.n	800b306 <nl_func_sm_array_f32+0xde>
 800b25c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800b260:	f1cc 0200 	rsb	r2, ip, #0
 800b264:	00a4      	lsls	r4, r4, #2
 800b266:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800b26a:	9303      	str	r3, [sp, #12]
 800b26c:	9204      	str	r2, [sp, #16]
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4262      	negs	r2, r4
 800b272:	9205      	str	r2, [sp, #20]
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800b27a:	9b02      	ldr	r3, [sp, #8]
 800b27c:	9a07      	ldr	r2, [sp, #28]
 800b27e:	60bd      	str	r5, [r7, #8]
 800b280:	609e      	str	r6, [r3, #8]
 800b282:	9b06      	ldr	r3, [sp, #24]
 800b284:	6992      	ldr	r2, [r2, #24]
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	6894      	ldr	r4, [r2, #8]
 800b28a:	9a03      	ldr	r2, [sp, #12]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	2a01      	cmp	r2, #1
 800b290:	ed93 8a00 	vldr	s16, [r3]
 800b294:	d940      	bls.n	800b318 <nl_func_sm_array_f32+0xf0>
 800b296:	9901      	ldr	r1, [sp, #4]
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	eb03 0b01 	add.w	fp, r3, r1
 800b29e:	ecf2 7a01 	vldmia	r2!, {s15}
 800b2a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2aa:	bfb8      	it	lt
 800b2ac:	eeb0 8a67 	vmovlt.f32	s16, s15
 800b2b0:	4593      	cmp	fp, r2
 800b2b2:	d1f4      	bne.n	800b29e <nl_func_sm_array_f32+0x76>
 800b2b4:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800b324 <nl_func_sm_array_f32+0xfc>
 800b2b8:	469a      	mov	sl, r3
 800b2ba:	46a1      	mov	r9, r4
 800b2bc:	46a0      	mov	r8, r4
 800b2be:	ecba 0a01 	vldmia	sl!, {s0}
 800b2c2:	ee30 0a48 	vsub.f32	s0, s0, s16
 800b2c6:	f003 fad3 	bl	800e870 <expf>
 800b2ca:	45d3      	cmp	fp, sl
 800b2cc:	eca8 0a01 	vstmia	r8!, {s0}
 800b2d0:	ee78 8a80 	vadd.f32	s17, s17, s0
 800b2d4:	d1f3      	bne.n	800b2be <nl_func_sm_array_f32+0x96>
 800b2d6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2de:	d00b      	beq.n	800b2f8 <nl_func_sm_array_f32+0xd0>
 800b2e0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	441c      	add	r4, r3
 800b2e8:	edd9 7a00 	vldr	s15, [r9]
 800b2ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2f0:	ece9 7a01 	vstmia	r9!, {s15}
 800b2f4:	454c      	cmp	r4, r9
 800b2f6:	d1f7      	bne.n	800b2e8 <nl_func_sm_array_f32+0xc0>
 800b2f8:	9b04      	ldr	r3, [sp, #16]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	441d      	add	r5, r3
 800b2fe:	9b05      	ldr	r3, [sp, #20]
 800b300:	42aa      	cmp	r2, r5
 800b302:	441e      	add	r6, r3
 800b304:	d9b9      	bls.n	800b27a <nl_func_sm_array_f32+0x52>
 800b306:	60ba      	str	r2, [r7, #8]
 800b308:	9a02      	ldr	r2, [sp, #8]
 800b30a:	68d3      	ldr	r3, [r2, #12]
 800b30c:	6093      	str	r3, [r2, #8]
 800b30e:	b009      	add	sp, #36	; 0x24
 800b310:	ecbd 8b04 	vpop	{d8-d9}
 800b314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b318:	2a00      	cmp	r2, #0
 800b31a:	d0ed      	beq.n	800b2f8 <nl_func_sm_array_f32+0xd0>
 800b31c:	9a01      	ldr	r2, [sp, #4]
 800b31e:	eb03 0b02 	add.w	fp, r3, r2
 800b322:	e7c7      	b.n	800b2b4 <nl_func_sm_array_f32+0x8c>
 800b324:	00000000 	.word	0x00000000

0800b328 <nl_func_relu_generic_array_f32>:
 800b328:	b430      	push	{r4, r5}
 800b32a:	6989      	ldr	r1, [r1, #24]
 800b32c:	6980      	ldr	r0, [r0, #24]
 800b32e:	edd3 6a02 	vldr	s13, [r3, #8]
 800b332:	688c      	ldr	r4, [r1, #8]
 800b334:	6880      	ldr	r0, [r0, #8]
 800b336:	ed93 7a00 	vldr	s14, [r3]
 800b33a:	ed93 6a01 	vldr	s12, [r3, #4]
 800b33e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b342:	3a01      	subs	r2, #1
 800b344:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b348:	0092      	lsls	r2, r2, #2
 800b34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34e:	4410      	add	r0, r2
 800b350:	4422      	add	r2, r4
 800b352:	d421      	bmi.n	800b398 <nl_func_relu_generic_array_f32+0x70>
 800b354:	4294      	cmp	r4, r2
 800b356:	d83d      	bhi.n	800b3d4 <nl_func_relu_generic_array_f32+0xac>
 800b358:	1d13      	adds	r3, r2, #4
 800b35a:	1d02      	adds	r2, r0, #4
 800b35c:	e010      	b.n	800b380 <nl_func_relu_generic_array_f32+0x58>
 800b35e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b366:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800b36a:	d501      	bpl.n	800b370 <nl_func_relu_generic_array_f32+0x48>
 800b36c:	ee65 7a86 	vmul.f32	s15, s11, s12
 800b370:	ed62 7a01 	vstmdb	r2!, {s15}
 800b374:	6888      	ldr	r0, [r1, #8]
 800b376:	f1a3 0408 	sub.w	r4, r3, #8
 800b37a:	4284      	cmp	r4, r0
 800b37c:	462b      	mov	r3, r5
 800b37e:	d329      	bcc.n	800b3d4 <nl_func_relu_generic_array_f32+0xac>
 800b380:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b384:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38c:	f1a3 0504 	sub.w	r5, r3, #4
 800b390:	d4e5      	bmi.n	800b35e <nl_func_relu_generic_array_f32+0x36>
 800b392:	eef0 7a66 	vmov.f32	s15, s13
 800b396:	e7eb      	b.n	800b370 <nl_func_relu_generic_array_f32+0x48>
 800b398:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a0:	d01a      	beq.n	800b3d8 <nl_func_relu_generic_array_f32+0xb0>
 800b3a2:	4294      	cmp	r4, r2
 800b3a4:	d816      	bhi.n	800b3d4 <nl_func_relu_generic_array_f32+0xac>
 800b3a6:	1d13      	adds	r3, r2, #4
 800b3a8:	1d02      	adds	r2, r0, #4
 800b3aa:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b3ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b3b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3b6:	f1a3 0408 	sub.w	r4, r3, #8
 800b3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3be:	f1a3 0004 	sub.w	r0, r3, #4
 800b3c2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b3c6:	4623      	mov	r3, r4
 800b3c8:	d51e      	bpl.n	800b408 <nl_func_relu_generic_array_f32+0xe0>
 800b3ca:	ed62 6a01 	vstmdb	r2!, {s13}
 800b3ce:	688b      	ldr	r3, [r1, #8]
 800b3d0:	42a3      	cmp	r3, r4
 800b3d2:	d91e      	bls.n	800b412 <nl_func_relu_generic_array_f32+0xea>
 800b3d4:	bc30      	pop	{r4, r5}
 800b3d6:	4770      	bx	lr
 800b3d8:	4294      	cmp	r4, r2
 800b3da:	d8fb      	bhi.n	800b3d4 <nl_func_relu_generic_array_f32+0xac>
 800b3dc:	1d13      	adds	r3, r2, #4
 800b3de:	2500      	movs	r5, #0
 800b3e0:	1d02      	adds	r2, r0, #4
 800b3e2:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b3e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3ea:	f1a3 0408 	sub.w	r4, r3, #8
 800b3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f2:	f1a3 0004 	sub.w	r0, r3, #4
 800b3f6:	4623      	mov	r3, r4
 800b3f8:	db0d      	blt.n	800b416 <nl_func_relu_generic_array_f32+0xee>
 800b3fa:	ed62 7a01 	vstmdb	r2!, {s15}
 800b3fe:	688b      	ldr	r3, [r1, #8]
 800b400:	42a3      	cmp	r3, r4
 800b402:	d8e7      	bhi.n	800b3d4 <nl_func_relu_generic_array_f32+0xac>
 800b404:	4603      	mov	r3, r0
 800b406:	e7ec      	b.n	800b3e2 <nl_func_relu_generic_array_f32+0xba>
 800b408:	ed62 7a01 	vstmdb	r2!, {s15}
 800b40c:	688c      	ldr	r4, [r1, #8]
 800b40e:	429c      	cmp	r4, r3
 800b410:	d8e0      	bhi.n	800b3d4 <nl_func_relu_generic_array_f32+0xac>
 800b412:	4603      	mov	r3, r0
 800b414:	e7c9      	b.n	800b3aa <nl_func_relu_generic_array_f32+0x82>
 800b416:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b41a:	688c      	ldr	r4, [r1, #8]
 800b41c:	429c      	cmp	r4, r3
 800b41e:	d8d9      	bhi.n	800b3d4 <nl_func_relu_generic_array_f32+0xac>
 800b420:	4603      	mov	r3, r0
 800b422:	e7de      	b.n	800b3e2 <nl_func_relu_generic_array_f32+0xba>

0800b424 <forward_relu>:
 800b424:	6982      	ldr	r2, [r0, #24]
 800b426:	8813      	ldrh	r3, [r2, #0]
 800b428:	b333      	cbz	r3, 800b478 <forward_relu+0x54>
 800b42a:	6852      	ldr	r2, [r2, #4]
 800b42c:	6851      	ldr	r1, [r2, #4]
 800b42e:	b101      	cbz	r1, 800b432 <forward_relu+0xe>
 800b430:	6809      	ldr	r1, [r1, #0]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d91d      	bls.n	800b472 <forward_relu+0x4e>
 800b436:	b4f0      	push	{r4, r5, r6, r7}
 800b438:	6917      	ldr	r7, [r2, #16]
 800b43a:	b107      	cbz	r7, 800b43e <forward_relu+0x1a>
 800b43c:	683f      	ldr	r7, [r7, #0]
 800b43e:	688c      	ldr	r4, [r1, #8]
 800b440:	69c3      	ldr	r3, [r0, #28]
 800b442:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800b446:	2b00      	cmp	r3, #0
 800b448:	d044      	beq.n	800b4d4 <forward_relu+0xb0>
 800b44a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800b44e:	2d01      	cmp	r5, #1
 800b450:	d014      	beq.n	800b47c <forward_relu+0x58>
 800b452:	2c00      	cmp	r4, #0
 800b454:	d074      	beq.n	800b540 <forward_relu+0x11c>
 800b456:	68ce      	ldr	r6, [r1, #12]
 800b458:	2201      	movs	r2, #1
 800b45a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b45e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b462:	42a6      	cmp	r6, r4
 800b464:	fb05 f202 	mul.w	r2, r5, r2
 800b468:	d1f9      	bne.n	800b45e <forward_relu+0x3a>
 800b46a:	4638      	mov	r0, r7
 800b46c:	bcf0      	pop	{r4, r5, r6, r7}
 800b46e:	f7ff bf5b 	b.w	800b328 <nl_func_relu_generic_array_f32>
 800b472:	2300      	movs	r3, #0
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	deff      	udf	#255	; 0xff
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	deff      	udf	#255	; 0xff
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	6988      	ldr	r0, [r1, #24]
 800b480:	6896      	ldr	r6, [r2, #8]
 800b482:	ed93 7a00 	vldr	s14, [r3]
 800b486:	6882      	ldr	r2, [r0, #8]
 800b488:	b184      	cbz	r4, 800b4ac <forward_relu+0x88>
 800b48a:	68cf      	ldr	r7, [r1, #12]
 800b48c:	462b      	mov	r3, r5
 800b48e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800b492:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800b496:	42a7      	cmp	r7, r4
 800b498:	fb01 f303 	mul.w	r3, r1, r3
 800b49c:	d1f9      	bne.n	800b492 <forward_relu+0x6e>
 800b49e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	18d2      	adds	r2, r2, r3
 800b4a8:	441e      	add	r6, r3
 800b4aa:	d23f      	bcs.n	800b52c <forward_relu+0x108>
 800b4ac:	1d13      	adds	r3, r2, #4
 800b4ae:	2500      	movs	r5, #0
 800b4b0:	1d32      	adds	r2, r6, #4
 800b4b2:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b4b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4be:	f1a3 0104 	sub.w	r1, r3, #4
 800b4c2:	d835      	bhi.n	800b530 <forward_relu+0x10c>
 800b4c4:	ed62 7a01 	vstmdb	r2!, {s15}
 800b4c8:	6884      	ldr	r4, [r0, #8]
 800b4ca:	3b08      	subs	r3, #8
 800b4cc:	429c      	cmp	r4, r3
 800b4ce:	d82d      	bhi.n	800b52c <forward_relu+0x108>
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	e7ee      	b.n	800b4b2 <forward_relu+0x8e>
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	698d      	ldr	r5, [r1, #24]
 800b4d8:	6898      	ldr	r0, [r3, #8]
 800b4da:	68ab      	ldr	r3, [r5, #8]
 800b4dc:	b184      	cbz	r4, 800b500 <forward_relu+0xdc>
 800b4de:	68ce      	ldr	r6, [r1, #12]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b4e6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800b4ea:	42a6      	cmp	r6, r4
 800b4ec:	fb01 f202 	mul.w	r2, r1, r2
 800b4f0:	d1f9      	bne.n	800b4e6 <forward_relu+0xc2>
 800b4f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b4f6:	3a01      	subs	r2, #1
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	189b      	adds	r3, r3, r2
 800b4fc:	4410      	add	r0, r2
 800b4fe:	d215      	bcs.n	800b52c <forward_relu+0x108>
 800b500:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b544 <forward_relu+0x120>
 800b504:	3304      	adds	r3, #4
 800b506:	1d01      	adds	r1, r0, #4
 800b508:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b50c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b514:	bfb8      	it	lt
 800b516:	eef0 7a47 	vmovlt.f32	s15, s14
 800b51a:	ed61 7a01 	vstmdb	r1!, {s15}
 800b51e:	68a8      	ldr	r0, [r5, #8]
 800b520:	f1a3 0208 	sub.w	r2, r3, #8
 800b524:	4290      	cmp	r0, r2
 800b526:	f1a3 0304 	sub.w	r3, r3, #4
 800b52a:	d9ed      	bls.n	800b508 <forward_relu+0xe4>
 800b52c:	bcf0      	pop	{r4, r5, r6, r7}
 800b52e:	4770      	bx	lr
 800b530:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b534:	6884      	ldr	r4, [r0, #8]
 800b536:	3b08      	subs	r3, #8
 800b538:	429c      	cmp	r4, r3
 800b53a:	d8f7      	bhi.n	800b52c <forward_relu+0x108>
 800b53c:	460b      	mov	r3, r1
 800b53e:	e7b8      	b.n	800b4b2 <forward_relu+0x8e>
 800b540:	2201      	movs	r2, #1
 800b542:	e792      	b.n	800b46a <forward_relu+0x46>
 800b544:	00000000 	.word	0x00000000

0800b548 <forward_sm>:
 800b548:	6982      	ldr	r2, [r0, #24]
 800b54a:	8813      	ldrh	r3, [r2, #0]
 800b54c:	b32b      	cbz	r3, 800b59a <forward_sm+0x52>
 800b54e:	6852      	ldr	r2, [r2, #4]
 800b550:	6851      	ldr	r1, [r2, #4]
 800b552:	b101      	cbz	r1, 800b556 <forward_sm+0xe>
 800b554:	6809      	ldr	r1, [r1, #0]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d91c      	bls.n	800b594 <forward_sm+0x4c>
 800b55a:	6913      	ldr	r3, [r2, #16]
 800b55c:	b1c3      	cbz	r3, 800b590 <forward_sm+0x48>
 800b55e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b560:	6818      	ldr	r0, [r3, #0]
 800b562:	688c      	ldr	r4, [r1, #8]
 800b564:	68c3      	ldr	r3, [r0, #12]
 800b566:	68ce      	ldr	r6, [r1, #12]
 800b568:	685f      	ldr	r7, [r3, #4]
 800b56a:	6873      	ldr	r3, [r6, #4]
 800b56c:	0a24      	lsrs	r4, r4, #8
 800b56e:	b083      	sub	sp, #12
 800b570:	d015      	beq.n	800b59e <forward_sm+0x56>
 800b572:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b576:	2201      	movs	r2, #1
 800b578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b57c:	42a6      	cmp	r6, r4
 800b57e:	fb05 f202 	mul.w	r2, r5, r2
 800b582:	d1f9      	bne.n	800b578 <forward_sm+0x30>
 800b584:	e9cd 3700 	strd	r3, r7, [sp]
 800b588:	f7ff fe4e 	bl	800b228 <nl_func_sm_array_f32>
 800b58c:	b003      	add	sp, #12
 800b58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	deff      	udf	#255	; 0xff
 800b594:	2300      	movs	r3, #0
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	deff      	udf	#255	; 0xff
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	deff      	udf	#255	; 0xff
 800b59e:	2201      	movs	r2, #1
 800b5a0:	e9cd 3700 	strd	r3, r7, [sp]
 800b5a4:	f7ff fe40 	bl	800b228 <nl_func_sm_array_f32>
 800b5a8:	b003      	add	sp, #12
 800b5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5ac <forward_ap>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	6983      	ldr	r3, [r0, #24]
 800b5b2:	b09d      	sub	sp, #116	; 0x74
 800b5b4:	881a      	ldrh	r2, [r3, #0]
 800b5b6:	900a      	str	r0, [sp, #40]	; 0x28
 800b5b8:	2a00      	cmp	r2, #0
 800b5ba:	f000 8110 	beq.w	800b7de <forward_ap+0x232>
 800b5be:	6859      	ldr	r1, [r3, #4]
 800b5c0:	684b      	ldr	r3, [r1, #4]
 800b5c2:	b103      	cbz	r3, 800b5c6 <forward_ap+0x1a>
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2a01      	cmp	r2, #1
 800b5c8:	f240 8106 	bls.w	800b7d8 <forward_ap+0x22c>
 800b5cc:	690a      	ldr	r2, [r1, #16]
 800b5ce:	2a00      	cmp	r2, #0
 800b5d0:	f000 8100 	beq.w	800b7d4 <forward_ap+0x228>
 800b5d4:	6812      	ldr	r2, [r2, #0]
 800b5d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b5d8:	68d4      	ldr	r4, [r2, #12]
 800b5da:	6995      	ldr	r5, [r2, #24]
 800b5dc:	6b31      	ldr	r1, [r6, #48]	; 0x30
 800b5de:	68d8      	ldr	r0, [r3, #12]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	68e2      	ldr	r2, [r4, #12]
 800b5e4:	68ad      	ldr	r5, [r5, #8]
 800b5e6:	9214      	str	r2, [sp, #80]	; 0x50
 800b5e8:	9513      	str	r5, [sp, #76]	; 0x4c
 800b5ea:	680a      	ldr	r2, [r1, #0]
 800b5ec:	684d      	ldr	r5, [r1, #4]
 800b5ee:	6899      	ldr	r1, [r3, #8]
 800b5f0:	910e      	str	r1, [sp, #56]	; 0x38
 800b5f2:	e9d0 7102 	ldrd	r7, r1, [r0, #8]
 800b5f6:	4633      	mov	r3, r6
 800b5f8:	9715      	str	r7, [sp, #84]	; 0x54
 800b5fa:	6847      	ldr	r7, [r0, #4]
 800b5fc:	69f0      	ldr	r0, [r6, #28]
 800b5fe:	6a36      	ldr	r6, [r6, #32]
 800b600:	9616      	str	r6, [sp, #88]	; 0x58
 800b602:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800b604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b606:	9318      	str	r3, [sp, #96]	; 0x60
 800b608:	4253      	negs	r3, r2
 800b60a:	9311      	str	r3, [sp, #68]	; 0x44
 800b60c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b60e:	68a4      	ldr	r4, [r4, #8]
 800b610:	9409      	str	r4, [sp, #36]	; 0x24
 800b612:	9519      	str	r5, [sp, #100]	; 0x64
 800b614:	900c      	str	r0, [sp, #48]	; 0x30
 800b616:	960d      	str	r6, [sp, #52]	; 0x34
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 80c9 	beq.w	800b7b0 <forward_ap+0x204>
 800b61e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b620:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800b622:	fb07 f303 	mul.w	r3, r7, r3
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	9303      	str	r3, [sp, #12]
 800b62a:	fb06 f300 	mul.w	r3, r6, r0
 800b62e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800b632:	188a      	adds	r2, r1, r2
 800b634:	930f      	str	r3, [sp, #60]	; 0x3c
 800b636:	426b      	negs	r3, r5
 800b638:	9212      	str	r2, [sp, #72]	; 0x48
 800b63a:	931a      	str	r3, [sp, #104]	; 0x68
 800b63c:	fb04 f20b 	mul.w	r2, r4, fp
 800b640:	2300      	movs	r3, #0
 800b642:	921b      	str	r2, [sp, #108]	; 0x6c
 800b644:	9317      	str	r3, [sp, #92]	; 0x5c
 800b646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b64a:	46da      	mov	sl, fp
 800b64c:	463e      	mov	r6, r7
 800b64e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b650:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b652:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b654:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b658:	42a0      	cmp	r0, r4
 800b65a:	bf94      	ite	ls
 800b65c:	1812      	addls	r2, r2, r0
 800b65e:	1912      	addhi	r2, r2, r4
 800b660:	4611      	mov	r1, r2
 800b662:	9201      	str	r2, [sp, #4]
 800b664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b666:	9308      	str	r3, [sp, #32]
 800b668:	2a00      	cmp	r2, #0
 800b66a:	f000 8093 	beq.w	800b794 <forward_ap+0x1e8>
 800b66e:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b670:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800b674:	fb00 f203 	mul.w	r2, r0, r3
 800b678:	1a5b      	subs	r3, r3, r1
 800b67a:	9310      	str	r3, [sp, #64]	; 0x40
 800b67c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b67e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b680:	18c3      	adds	r3, r0, r3
 800b682:	9304      	str	r3, [sp, #16]
 800b684:	2200      	movs	r2, #0
 800b686:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b688:	9207      	str	r2, [sp, #28]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	9306      	str	r3, [sp, #24]
 800b68e:	f2c0 809a 	blt.w	800b7c6 <forward_ap+0x21a>
 800b692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b694:	18d0      	adds	r0, r2, r3
 800b696:	461a      	mov	r2, r3
 800b698:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b69a:	9c04      	ldr	r4, [sp, #16]
 800b69c:	42a1      	cmp	r1, r4
 800b69e:	bf94      	ite	ls
 800b6a0:	1852      	addls	r2, r2, r1
 800b6a2:	1912      	addhi	r2, r2, r4
 800b6a4:	eba3 0902 	sub.w	r9, r3, r2
 800b6a8:	4690      	mov	r8, r2
 800b6aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b6ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b6b2:	eba8 0803 	sub.w	r8, r8, r3
 800b6b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6b8:	fb01 f909 	mul.w	r9, r1, r9
 800b6bc:	2a00      	cmp	r2, #0
 800b6be:	bf08      	it	eq
 800b6c0:	464b      	moveq	r3, r9
 800b6c2:	9305      	str	r3, [sp, #20]
 800b6c4:	9a08      	ldr	r2, [sp, #32]
 800b6c6:	9b01      	ldr	r3, [sp, #4]
 800b6c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	fb00 100a 	mla	r0, r0, sl, r1
 800b6d0:	dd7d      	ble.n	800b7ce <forward_ap+0x222>
 800b6d2:	fb0a f308 	mul.w	r3, sl, r8
 800b6d6:	4694      	mov	ip, r2
 800b6d8:	9302      	str	r3, [sp, #8]
 800b6da:	eb0a 050b 	add.w	r5, sl, fp
 800b6de:	46c6      	mov	lr, r8
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	9902      	ldr	r1, [sp, #8]
 800b6e4:	45f1      	cmp	r9, lr
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	eb01 0400 	add.w	r4, r1, r0
 800b6ec:	d065      	beq.n	800b7ba <forward_ap+0x20e>
 800b6ee:	4284      	cmp	r4, r0
 800b6f0:	d934      	bls.n	800b75c <forward_ap+0x1b0>
 800b6f2:	2700      	movs	r7, #0
 800b6f4:	b156      	cbz	r6, 800b70c <forward_ap+0x160>
 800b6f6:	2a00      	cmp	r2, #0
 800b6f8:	d063      	beq.n	800b7c2 <forward_ap+0x216>
 800b6fa:	eb00 010a 	add.w	r1, r0, sl
 800b6fe:	465a      	mov	r2, fp
 800b700:	ecf3 7a01 	vldmia	r3!, {s15}
 800b704:	4299      	cmp	r1, r3
 800b706:	ece2 7a01 	vstmia	r2!, {s15}
 800b70a:	d1f9      	bne.n	800b700 <forward_ap+0x154>
 800b70c:	eb00 010a 	add.w	r1, r0, sl
 800b710:	42a1      	cmp	r1, r4
 800b712:	460b      	mov	r3, r1
 800b714:	d211      	bcs.n	800b73a <forward_ap+0x18e>
 800b716:	2e00      	cmp	r6, #0
 800b718:	d04d      	beq.n	800b7b6 <forward_ap+0x20a>
 800b71a:	eb03 010a 	add.w	r1, r3, sl
 800b71e:	465a      	mov	r2, fp
 800b720:	ecf3 7a01 	vldmia	r3!, {s15}
 800b724:	ed92 7a00 	vldr	s14, [r2]
 800b728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b72c:	4299      	cmp	r1, r3
 800b72e:	ece2 7a01 	vstmia	r2!, {s15}
 800b732:	d1f5      	bne.n	800b720 <forward_ap+0x174>
 800b734:	42a1      	cmp	r1, r4
 800b736:	460b      	mov	r3, r1
 800b738:	d3ed      	bcc.n	800b716 <forward_ap+0x16a>
 800b73a:	b17f      	cbz	r7, 800b75c <forward_ap+0x1b0>
 800b73c:	ee07 7a90 	vmov	s15, r7
 800b740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b748:	b146      	cbz	r6, 800b75c <forward_ap+0x1b0>
 800b74a:	465b      	mov	r3, fp
 800b74c:	edd3 7a00 	vldr	s15, [r3]
 800b750:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b754:	ece3 7a01 	vstmia	r3!, {s15}
 800b758:	429d      	cmp	r5, r3
 800b75a:	d1f7      	bne.n	800b74c <forward_ap+0x1a0>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	4418      	add	r0, r3
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	f10c 0c01 	add.w	ip, ip, #1
 800b766:	4563      	cmp	r3, ip
 800b768:	44c6      	add	lr, r8
 800b76a:	f04f 0200 	mov.w	r2, #0
 800b76e:	d1b8      	bne.n	800b6e2 <forward_ap+0x136>
 800b770:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b772:	9b04      	ldr	r3, [sp, #16]
 800b774:	9a07      	ldr	r2, [sp, #28]
 800b776:	1a5b      	subs	r3, r3, r1
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	9b06      	ldr	r3, [sp, #24]
 800b77c:	440b      	add	r3, r1
 800b77e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b780:	3201      	adds	r2, #1
 800b782:	4291      	cmp	r1, r2
 800b784:	9207      	str	r2, [sp, #28]
 800b786:	46ab      	mov	fp, r5
 800b788:	f47f af7f 	bne.w	800b68a <forward_ap+0xde>
 800b78c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b78e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b790:	4413      	add	r3, r2
 800b792:	9313      	str	r3, [sp, #76]	; 0x4c
 800b794:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b796:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b79a:	1a89      	subs	r1, r1, r2
 800b79c:	9112      	str	r1, [sp, #72]	; 0x48
 800b79e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b7a0:	4411      	add	r1, r2
 800b7a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7a4:	9111      	str	r1, [sp, #68]	; 0x44
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7ac:	f47f af4f 	bne.w	800b64e <forward_ap+0xa2>
 800b7b0:	b01d      	add	sp, #116	; 0x74
 800b7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b6:	4451      	add	r1, sl
 800b7b8:	e7aa      	b.n	800b710 <forward_ap+0x164>
 800b7ba:	4284      	cmp	r4, r0
 800b7bc:	9f05      	ldr	r7, [sp, #20]
 800b7be:	d899      	bhi.n	800b6f4 <forward_ap+0x148>
 800b7c0:	e7bb      	b.n	800b73a <forward_ap+0x18e>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	e7a9      	b.n	800b71a <forward_ap+0x16e>
 800b7c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b7c8:	9a06      	ldr	r2, [sp, #24]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e764      	b.n	800b698 <forward_ap+0xec>
 800b7ce:	eb0a 050b 	add.w	r5, sl, fp
 800b7d2:	e7cd      	b.n	800b770 <forward_ap+0x1c4>
 800b7d4:	68d3      	ldr	r3, [r2, #12]
 800b7d6:	deff      	udf	#255	; 0xff
 800b7d8:	2300      	movs	r3, #0
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	deff      	udf	#255	; 0xff
 800b7de:	6853      	ldr	r3, [r2, #4]
 800b7e0:	deff      	udf	#255	; 0xff
 800b7e2:	bf00      	nop

0800b7e4 <ai_check_custom_types>:
 800b7e4:	4b13      	ldr	r3, [pc, #76]	; (800b834 <ai_check_custom_types+0x50>)
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	b118      	cbz	r0, 800b7f6 <ai_check_custom_types+0x12>
 800b7ee:	7803      	ldrb	r3, [r0, #0]
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d002      	beq.n	800b7fa <ai_check_custom_types+0x16>
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	b002      	add	sp, #8
 800b7f8:	4770      	bx	lr
 800b7fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d004      	beq.n	800b80c <ai_check_custom_types+0x28>
 800b802:	2001      	movs	r0, #1
 800b804:	f080 0001 	eor.w	r0, r0, #1
 800b808:	b002      	add	sp, #8
 800b80a:	4770      	bx	lr
 800b80c:	7842      	ldrb	r2, [r0, #1]
 800b80e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b812:	429a      	cmp	r2, r3
 800b814:	f100 0001 	add.w	r0, r0, #1
 800b818:	d1f3      	bne.n	800b802 <ai_check_custom_types+0x1e>
 800b81a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b81e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b822:	429a      	cmp	r2, r3
 800b824:	d1ed      	bne.n	800b802 <ai_check_custom_types+0x1e>
 800b826:	7842      	ldrb	r2, [r0, #1]
 800b828:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d1e8      	bne.n	800b802 <ai_check_custom_types+0x1e>
 800b830:	2000      	movs	r0, #0
 800b832:	e7e7      	b.n	800b804 <ai_check_custom_types+0x20>
 800b834:	0800f004 	.word	0x0800f004

0800b838 <ai_layers_init_all>:
 800b838:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b83a:	b17a      	cbz	r2, 800b85c <ai_layers_init_all+0x24>
 800b83c:	6913      	ldr	r3, [r2, #16]
 800b83e:	60d0      	str	r0, [r2, #12]
 800b840:	429a      	cmp	r2, r3
 800b842:	f04f 0201 	mov.w	r2, #1
 800b846:	d009      	beq.n	800b85c <ai_layers_init_all+0x24>
 800b848:	b143      	cbz	r3, 800b85c <ai_layers_init_all+0x24>
 800b84a:	6919      	ldr	r1, [r3, #16]
 800b84c:	60d8      	str	r0, [r3, #12]
 800b84e:	4299      	cmp	r1, r3
 800b850:	f102 0201 	add.w	r2, r2, #1
 800b854:	d002      	beq.n	800b85c <ai_layers_init_all+0x24>
 800b856:	460b      	mov	r3, r1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1f6      	bne.n	800b84a <ai_layers_init_all+0x12>
 800b85c:	4610      	mov	r0, r2
 800b85e:	4770      	bx	lr

0800b860 <ai_layers_post_init_all>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b864:	b18c      	cbz	r4, 800b88a <ai_layers_post_init_all+0x2a>
 800b866:	2500      	movs	r5, #0
 800b868:	6863      	ldr	r3, [r4, #4]
 800b86a:	f013 0f01 	tst.w	r3, #1
 800b86e:	4620      	mov	r0, r4
 800b870:	d003      	beq.n	800b87a <ai_layers_post_init_all+0x1a>
 800b872:	6a23      	ldr	r3, [r4, #32]
 800b874:	b10b      	cbz	r3, 800b87a <ai_layers_post_init_all+0x1a>
 800b876:	4798      	blx	r3
 800b878:	3501      	adds	r5, #1
 800b87a:	6923      	ldr	r3, [r4, #16]
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	d002      	beq.n	800b886 <ai_layers_post_init_all+0x26>
 800b880:	461c      	mov	r4, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1f0      	bne.n	800b868 <ai_layers_post_init_all+0x8>
 800b886:	4628      	mov	r0, r5
 800b888:	bd38      	pop	{r3, r4, r5, pc}
 800b88a:	4625      	mov	r5, r4
 800b88c:	e7fb      	b.n	800b886 <ai_layers_post_init_all+0x26>
 800b88e:	bf00      	nop

0800b890 <ai_layers_forward_all>:
 800b890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b894:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800b896:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b898:	4604      	mov	r4, r0
 800b89a:	2f00      	cmp	r7, #0
 800b89c:	d02c      	beq.n	800b8f8 <ai_layers_forward_all+0x68>
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	d03f      	beq.n	800b922 <ai_layers_forward_all+0x92>
 800b8a2:	6385      	str	r5, [r0, #56]	; 0x38
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b8a8:	2001      	movs	r0, #1
 800b8aa:	47b8      	blx	r7
 800b8ac:	2600      	movs	r6, #0
 800b8ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8b0:	46b0      	mov	r8, r6
 800b8b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b8b4:	2002      	movs	r0, #2
 800b8b6:	47b8      	blx	r7
 800b8b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800b8ba:	696b      	ldr	r3, [r5, #20]
 800b8bc:	4628      	mov	r0, r5
 800b8be:	4798      	blx	r3
 800b8c0:	692b      	ldr	r3, [r5, #16]
 800b8c2:	429d      	cmp	r5, r3
 800b8c4:	f04f 0003 	mov.w	r0, #3
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	d009      	beq.n	800b8e0 <ai_layers_forward_all+0x50>
 800b8cc:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b8d0:	47b8      	blx	r7
 800b8d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8d4:	3601      	adds	r6, #1
 800b8d6:	2900      	cmp	r1, #0
 800b8d8:	d1eb      	bne.n	800b8b2 <ai_layers_forward_all+0x22>
 800b8da:	4630      	mov	r0, r6
 800b8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800b8e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b8e8:	47b8      	blx	r7
 800b8ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8ec:	3601      	adds	r6, #1
 800b8ee:	2900      	cmp	r1, #0
 800b8f0:	d1df      	bne.n	800b8b2 <ai_layers_forward_all+0x22>
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	b19d      	cbz	r5, 800b922 <ai_layers_forward_all+0x92>
 800b8fa:	6385      	str	r5, [r0, #56]	; 0x38
 800b8fc:	463e      	mov	r6, r7
 800b8fe:	696b      	ldr	r3, [r5, #20]
 800b900:	4628      	mov	r0, r5
 800b902:	4798      	blx	r3
 800b904:	692b      	ldr	r3, [r5, #16]
 800b906:	42ab      	cmp	r3, r5
 800b908:	f106 0601 	add.w	r6, r6, #1
 800b90c:	d004      	beq.n	800b918 <ai_layers_forward_all+0x88>
 800b90e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b910:	461d      	mov	r5, r3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1f3      	bne.n	800b8fe <ai_layers_forward_all+0x6e>
 800b916:	e7e0      	b.n	800b8da <ai_layers_forward_all+0x4a>
 800b918:	2300      	movs	r3, #0
 800b91a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b91c:	4630      	mov	r0, r6
 800b91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b922:	462e      	mov	r6, r5
 800b924:	4630      	mov	r0, r6
 800b926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b92a:	bf00      	nop

0800b92c <ai_array_to_buffer_fmt>:
 800b92c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b930:	2b02      	cmp	r3, #2
 800b932:	d029      	beq.n	800b988 <ai_array_to_buffer_fmt+0x5c>
 800b934:	4a22      	ldr	r2, [pc, #136]	; (800b9c0 <ai_array_to_buffer_fmt+0x94>)
 800b936:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d010      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b93e:	dd13      	ble.n	800b968 <ai_array_to_buffer_fmt+0x3c>
 800b940:	4a20      	ldr	r2, [pc, #128]	; (800b9c4 <ai_array_to_buffer_fmt+0x98>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d00c      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b946:	dc27      	bgt.n	800b998 <ai_array_to_buffer_fmt+0x6c>
 800b948:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d007      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b950:	3207      	adds	r2, #7
 800b952:	4293      	cmp	r3, r2
 800b954:	d004      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b956:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d000      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b95e:	2340      	movs	r3, #64	; 0x40
 800b960:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b964:	4318      	orrs	r0, r3
 800b966:	4770      	bx	lr
 800b968:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <ai_array_to_buffer_fmt+0x9c>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d0f8      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b96e:	dd1e      	ble.n	800b9ae <ai_array_to_buffer_fmt+0x82>
 800b970:	4a16      	ldr	r2, [pc, #88]	; (800b9cc <ai_array_to_buffer_fmt+0xa0>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d0f4      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b976:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d0f0      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b97e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800b982:	4293      	cmp	r3, r2
 800b984:	d1eb      	bne.n	800b95e <ai_array_to_buffer_fmt+0x32>
 800b986:	e7eb      	b.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b988:	4b11      	ldr	r3, [pc, #68]	; (800b9d0 <ai_array_to_buffer_fmt+0xa4>)
 800b98a:	4003      	ands	r3, r0
 800b98c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b990:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b994:	4318      	orrs	r0, r3
 800b996:	4770      	bx	lr
 800b998:	4a0e      	ldr	r2, [pc, #56]	; (800b9d4 <ai_array_to_buffer_fmt+0xa8>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d0e0      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b99e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d0dc      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b9a6:	4a0c      	ldr	r2, [pc, #48]	; (800b9d8 <ai_array_to_buffer_fmt+0xac>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d1d8      	bne.n	800b95e <ai_array_to_buffer_fmt+0x32>
 800b9ac:	e7d8      	b.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b9ae:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d0d4      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b9b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d0d0      	beq.n	800b960 <ai_array_to_buffer_fmt+0x34>
 800b9be:	e7ce      	b.n	800b95e <ai_array_to_buffer_fmt+0x32>
 800b9c0:	00060440 	.word	0x00060440
 800b9c4:	00840840 	.word	0x00840840
 800b9c8:	00040447 	.word	0x00040447
 800b9cc:	0004084f 	.word	0x0004084f
 800b9d0:	00803fff 	.word	0x00803fff
 800b9d4:	00841040 	.word	0x00841040
 800b9d8:	0084084f 	.word	0x0084084f

0800b9dc <ai_array_get_byte_size>:
 800b9dc:	b1c1      	cbz	r1, 800ba10 <ai_array_get_byte_size+0x34>
 800b9de:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800b9e2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b9e6:	4413      	add	r3, r2
 800b9e8:	fb01 f103 	mul.w	r1, r1, r3
 800b9ec:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800b9f0:	3107      	adds	r1, #7
 800b9f2:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800b9f6:	f021 0107 	bic.w	r1, r1, #7
 800b9fa:	2804      	cmp	r0, #4
 800b9fc:	fa21 f102 	lsr.w	r1, r1, r2
 800ba00:	d008      	beq.n	800ba14 <ai_array_get_byte_size+0x38>
 800ba02:	2808      	cmp	r0, #8
 800ba04:	d101      	bne.n	800ba0a <ai_array_get_byte_size+0x2e>
 800ba06:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ba0a:	3107      	adds	r1, #7
 800ba0c:	08c8      	lsrs	r0, r1, #3
 800ba0e:	4770      	bx	lr
 800ba10:	4608      	mov	r0, r1
 800ba12:	4770      	bx	lr
 800ba14:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800ba18:	3107      	adds	r1, #7
 800ba1a:	08c8      	lsrs	r0, r1, #3
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop

0800ba20 <__errno>:
 800ba20:	4b01      	ldr	r3, [pc, #4]	; (800ba28 <__errno+0x8>)
 800ba22:	6818      	ldr	r0, [r3, #0]
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	20000c74 	.word	0x20000c74

0800ba2c <__libc_init_array>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	4d0d      	ldr	r5, [pc, #52]	; (800ba64 <__libc_init_array+0x38>)
 800ba30:	4c0d      	ldr	r4, [pc, #52]	; (800ba68 <__libc_init_array+0x3c>)
 800ba32:	1b64      	subs	r4, r4, r5
 800ba34:	10a4      	asrs	r4, r4, #2
 800ba36:	2600      	movs	r6, #0
 800ba38:	42a6      	cmp	r6, r4
 800ba3a:	d109      	bne.n	800ba50 <__libc_init_array+0x24>
 800ba3c:	4d0b      	ldr	r5, [pc, #44]	; (800ba6c <__libc_init_array+0x40>)
 800ba3e:	4c0c      	ldr	r4, [pc, #48]	; (800ba70 <__libc_init_array+0x44>)
 800ba40:	f003 f9e0 	bl	800ee04 <_init>
 800ba44:	1b64      	subs	r4, r4, r5
 800ba46:	10a4      	asrs	r4, r4, #2
 800ba48:	2600      	movs	r6, #0
 800ba4a:	42a6      	cmp	r6, r4
 800ba4c:	d105      	bne.n	800ba5a <__libc_init_array+0x2e>
 800ba4e:	bd70      	pop	{r4, r5, r6, pc}
 800ba50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba54:	4798      	blx	r3
 800ba56:	3601      	adds	r6, #1
 800ba58:	e7ee      	b.n	800ba38 <__libc_init_array+0xc>
 800ba5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba5e:	4798      	blx	r3
 800ba60:	3601      	adds	r6, #1
 800ba62:	e7f2      	b.n	800ba4a <__libc_init_array+0x1e>
 800ba64:	08019d1c 	.word	0x08019d1c
 800ba68:	08019d1c 	.word	0x08019d1c
 800ba6c:	08019d1c 	.word	0x08019d1c
 800ba70:	08019d20 	.word	0x08019d20

0800ba74 <malloc>:
 800ba74:	4b02      	ldr	r3, [pc, #8]	; (800ba80 <malloc+0xc>)
 800ba76:	4601      	mov	r1, r0
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	f000 b88b 	b.w	800bb94 <_malloc_r>
 800ba7e:	bf00      	nop
 800ba80:	20000c74 	.word	0x20000c74

0800ba84 <free>:
 800ba84:	4b02      	ldr	r3, [pc, #8]	; (800ba90 <free+0xc>)
 800ba86:	4601      	mov	r1, r0
 800ba88:	6818      	ldr	r0, [r3, #0]
 800ba8a:	f000 b833 	b.w	800baf4 <_free_r>
 800ba8e:	bf00      	nop
 800ba90:	20000c74 	.word	0x20000c74

0800ba94 <memcpy>:
 800ba94:	440a      	add	r2, r1
 800ba96:	4291      	cmp	r1, r2
 800ba98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba9c:	d100      	bne.n	800baa0 <memcpy+0xc>
 800ba9e:	4770      	bx	lr
 800baa0:	b510      	push	{r4, lr}
 800baa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baaa:	4291      	cmp	r1, r2
 800baac:	d1f9      	bne.n	800baa2 <memcpy+0xe>
 800baae:	bd10      	pop	{r4, pc}

0800bab0 <memmove>:
 800bab0:	4288      	cmp	r0, r1
 800bab2:	b510      	push	{r4, lr}
 800bab4:	eb01 0402 	add.w	r4, r1, r2
 800bab8:	d902      	bls.n	800bac0 <memmove+0x10>
 800baba:	4284      	cmp	r4, r0
 800babc:	4623      	mov	r3, r4
 800babe:	d807      	bhi.n	800bad0 <memmove+0x20>
 800bac0:	1e43      	subs	r3, r0, #1
 800bac2:	42a1      	cmp	r1, r4
 800bac4:	d008      	beq.n	800bad8 <memmove+0x28>
 800bac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bace:	e7f8      	b.n	800bac2 <memmove+0x12>
 800bad0:	4402      	add	r2, r0
 800bad2:	4601      	mov	r1, r0
 800bad4:	428a      	cmp	r2, r1
 800bad6:	d100      	bne.n	800bada <memmove+0x2a>
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bae2:	e7f7      	b.n	800bad4 <memmove+0x24>

0800bae4 <memset>:
 800bae4:	4402      	add	r2, r0
 800bae6:	4603      	mov	r3, r0
 800bae8:	4293      	cmp	r3, r2
 800baea:	d100      	bne.n	800baee <memset+0xa>
 800baec:	4770      	bx	lr
 800baee:	f803 1b01 	strb.w	r1, [r3], #1
 800baf2:	e7f9      	b.n	800bae8 <memset+0x4>

0800baf4 <_free_r>:
 800baf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baf6:	2900      	cmp	r1, #0
 800baf8:	d048      	beq.n	800bb8c <_free_r+0x98>
 800bafa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bafe:	9001      	str	r0, [sp, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f1a1 0404 	sub.w	r4, r1, #4
 800bb06:	bfb8      	it	lt
 800bb08:	18e4      	addlt	r4, r4, r3
 800bb0a:	f001 fbb5 	bl	800d278 <__malloc_lock>
 800bb0e:	4a20      	ldr	r2, [pc, #128]	; (800bb90 <_free_r+0x9c>)
 800bb10:	9801      	ldr	r0, [sp, #4]
 800bb12:	6813      	ldr	r3, [r2, #0]
 800bb14:	4615      	mov	r5, r2
 800bb16:	b933      	cbnz	r3, 800bb26 <_free_r+0x32>
 800bb18:	6063      	str	r3, [r4, #4]
 800bb1a:	6014      	str	r4, [r2, #0]
 800bb1c:	b003      	add	sp, #12
 800bb1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb22:	f001 bbaf 	b.w	800d284 <__malloc_unlock>
 800bb26:	42a3      	cmp	r3, r4
 800bb28:	d90b      	bls.n	800bb42 <_free_r+0x4e>
 800bb2a:	6821      	ldr	r1, [r4, #0]
 800bb2c:	1862      	adds	r2, r4, r1
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	bf04      	itt	eq
 800bb32:	681a      	ldreq	r2, [r3, #0]
 800bb34:	685b      	ldreq	r3, [r3, #4]
 800bb36:	6063      	str	r3, [r4, #4]
 800bb38:	bf04      	itt	eq
 800bb3a:	1852      	addeq	r2, r2, r1
 800bb3c:	6022      	streq	r2, [r4, #0]
 800bb3e:	602c      	str	r4, [r5, #0]
 800bb40:	e7ec      	b.n	800bb1c <_free_r+0x28>
 800bb42:	461a      	mov	r2, r3
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	b10b      	cbz	r3, 800bb4c <_free_r+0x58>
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	d9fa      	bls.n	800bb42 <_free_r+0x4e>
 800bb4c:	6811      	ldr	r1, [r2, #0]
 800bb4e:	1855      	adds	r5, r2, r1
 800bb50:	42a5      	cmp	r5, r4
 800bb52:	d10b      	bne.n	800bb6c <_free_r+0x78>
 800bb54:	6824      	ldr	r4, [r4, #0]
 800bb56:	4421      	add	r1, r4
 800bb58:	1854      	adds	r4, r2, r1
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	6011      	str	r1, [r2, #0]
 800bb5e:	d1dd      	bne.n	800bb1c <_free_r+0x28>
 800bb60:	681c      	ldr	r4, [r3, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	6053      	str	r3, [r2, #4]
 800bb66:	4421      	add	r1, r4
 800bb68:	6011      	str	r1, [r2, #0]
 800bb6a:	e7d7      	b.n	800bb1c <_free_r+0x28>
 800bb6c:	d902      	bls.n	800bb74 <_free_r+0x80>
 800bb6e:	230c      	movs	r3, #12
 800bb70:	6003      	str	r3, [r0, #0]
 800bb72:	e7d3      	b.n	800bb1c <_free_r+0x28>
 800bb74:	6825      	ldr	r5, [r4, #0]
 800bb76:	1961      	adds	r1, r4, r5
 800bb78:	428b      	cmp	r3, r1
 800bb7a:	bf04      	itt	eq
 800bb7c:	6819      	ldreq	r1, [r3, #0]
 800bb7e:	685b      	ldreq	r3, [r3, #4]
 800bb80:	6063      	str	r3, [r4, #4]
 800bb82:	bf04      	itt	eq
 800bb84:	1949      	addeq	r1, r1, r5
 800bb86:	6021      	streq	r1, [r4, #0]
 800bb88:	6054      	str	r4, [r2, #4]
 800bb8a:	e7c7      	b.n	800bb1c <_free_r+0x28>
 800bb8c:	b003      	add	sp, #12
 800bb8e:	bd30      	pop	{r4, r5, pc}
 800bb90:	2000903c 	.word	0x2000903c

0800bb94 <_malloc_r>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	1ccd      	adds	r5, r1, #3
 800bb98:	f025 0503 	bic.w	r5, r5, #3
 800bb9c:	3508      	adds	r5, #8
 800bb9e:	2d0c      	cmp	r5, #12
 800bba0:	bf38      	it	cc
 800bba2:	250c      	movcc	r5, #12
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	4606      	mov	r6, r0
 800bba8:	db01      	blt.n	800bbae <_malloc_r+0x1a>
 800bbaa:	42a9      	cmp	r1, r5
 800bbac:	d903      	bls.n	800bbb6 <_malloc_r+0x22>
 800bbae:	230c      	movs	r3, #12
 800bbb0:	6033      	str	r3, [r6, #0]
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb6:	f001 fb5f 	bl	800d278 <__malloc_lock>
 800bbba:	4921      	ldr	r1, [pc, #132]	; (800bc40 <_malloc_r+0xac>)
 800bbbc:	680a      	ldr	r2, [r1, #0]
 800bbbe:	4614      	mov	r4, r2
 800bbc0:	b99c      	cbnz	r4, 800bbea <_malloc_r+0x56>
 800bbc2:	4f20      	ldr	r7, [pc, #128]	; (800bc44 <_malloc_r+0xb0>)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	b923      	cbnz	r3, 800bbd2 <_malloc_r+0x3e>
 800bbc8:	4621      	mov	r1, r4
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f000 fca6 	bl	800c51c <_sbrk_r>
 800bbd0:	6038      	str	r0, [r7, #0]
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f000 fca1 	bl	800c51c <_sbrk_r>
 800bbda:	1c43      	adds	r3, r0, #1
 800bbdc:	d123      	bne.n	800bc26 <_malloc_r+0x92>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	6033      	str	r3, [r6, #0]
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f001 fb4e 	bl	800d284 <__malloc_unlock>
 800bbe8:	e7e3      	b.n	800bbb2 <_malloc_r+0x1e>
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	1b5b      	subs	r3, r3, r5
 800bbee:	d417      	bmi.n	800bc20 <_malloc_r+0x8c>
 800bbf0:	2b0b      	cmp	r3, #11
 800bbf2:	d903      	bls.n	800bbfc <_malloc_r+0x68>
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	441c      	add	r4, r3
 800bbf8:	6025      	str	r5, [r4, #0]
 800bbfa:	e004      	b.n	800bc06 <_malloc_r+0x72>
 800bbfc:	6863      	ldr	r3, [r4, #4]
 800bbfe:	42a2      	cmp	r2, r4
 800bc00:	bf0c      	ite	eq
 800bc02:	600b      	streq	r3, [r1, #0]
 800bc04:	6053      	strne	r3, [r2, #4]
 800bc06:	4630      	mov	r0, r6
 800bc08:	f001 fb3c 	bl	800d284 <__malloc_unlock>
 800bc0c:	f104 000b 	add.w	r0, r4, #11
 800bc10:	1d23      	adds	r3, r4, #4
 800bc12:	f020 0007 	bic.w	r0, r0, #7
 800bc16:	1ac2      	subs	r2, r0, r3
 800bc18:	d0cc      	beq.n	800bbb4 <_malloc_r+0x20>
 800bc1a:	1a1b      	subs	r3, r3, r0
 800bc1c:	50a3      	str	r3, [r4, r2]
 800bc1e:	e7c9      	b.n	800bbb4 <_malloc_r+0x20>
 800bc20:	4622      	mov	r2, r4
 800bc22:	6864      	ldr	r4, [r4, #4]
 800bc24:	e7cc      	b.n	800bbc0 <_malloc_r+0x2c>
 800bc26:	1cc4      	adds	r4, r0, #3
 800bc28:	f024 0403 	bic.w	r4, r4, #3
 800bc2c:	42a0      	cmp	r0, r4
 800bc2e:	d0e3      	beq.n	800bbf8 <_malloc_r+0x64>
 800bc30:	1a21      	subs	r1, r4, r0
 800bc32:	4630      	mov	r0, r6
 800bc34:	f000 fc72 	bl	800c51c <_sbrk_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d1dd      	bne.n	800bbf8 <_malloc_r+0x64>
 800bc3c:	e7cf      	b.n	800bbde <_malloc_r+0x4a>
 800bc3e:	bf00      	nop
 800bc40:	2000903c 	.word	0x2000903c
 800bc44:	20009040 	.word	0x20009040

0800bc48 <__cvt>:
 800bc48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc4c:	ec55 4b10 	vmov	r4, r5, d0
 800bc50:	2d00      	cmp	r5, #0
 800bc52:	460e      	mov	r6, r1
 800bc54:	4619      	mov	r1, r3
 800bc56:	462b      	mov	r3, r5
 800bc58:	bfbb      	ittet	lt
 800bc5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc5e:	461d      	movlt	r5, r3
 800bc60:	2300      	movge	r3, #0
 800bc62:	232d      	movlt	r3, #45	; 0x2d
 800bc64:	700b      	strb	r3, [r1, #0]
 800bc66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc6c:	4691      	mov	r9, r2
 800bc6e:	f023 0820 	bic.w	r8, r3, #32
 800bc72:	bfbc      	itt	lt
 800bc74:	4622      	movlt	r2, r4
 800bc76:	4614      	movlt	r4, r2
 800bc78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc7c:	d005      	beq.n	800bc8a <__cvt+0x42>
 800bc7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bc82:	d100      	bne.n	800bc86 <__cvt+0x3e>
 800bc84:	3601      	adds	r6, #1
 800bc86:	2102      	movs	r1, #2
 800bc88:	e000      	b.n	800bc8c <__cvt+0x44>
 800bc8a:	2103      	movs	r1, #3
 800bc8c:	ab03      	add	r3, sp, #12
 800bc8e:	9301      	str	r3, [sp, #4]
 800bc90:	ab02      	add	r3, sp, #8
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	ec45 4b10 	vmov	d0, r4, r5
 800bc98:	4653      	mov	r3, sl
 800bc9a:	4632      	mov	r2, r6
 800bc9c:	f000 fcfc 	bl	800c698 <_dtoa_r>
 800bca0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bca4:	4607      	mov	r7, r0
 800bca6:	d102      	bne.n	800bcae <__cvt+0x66>
 800bca8:	f019 0f01 	tst.w	r9, #1
 800bcac:	d022      	beq.n	800bcf4 <__cvt+0xac>
 800bcae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcb2:	eb07 0906 	add.w	r9, r7, r6
 800bcb6:	d110      	bne.n	800bcda <__cvt+0x92>
 800bcb8:	783b      	ldrb	r3, [r7, #0]
 800bcba:	2b30      	cmp	r3, #48	; 0x30
 800bcbc:	d10a      	bne.n	800bcd4 <__cvt+0x8c>
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	f7f4 ff07 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcca:	b918      	cbnz	r0, 800bcd4 <__cvt+0x8c>
 800bccc:	f1c6 0601 	rsb	r6, r6, #1
 800bcd0:	f8ca 6000 	str.w	r6, [sl]
 800bcd4:	f8da 3000 	ldr.w	r3, [sl]
 800bcd8:	4499      	add	r9, r3
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fef9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bce6:	b108      	cbz	r0, 800bcec <__cvt+0xa4>
 800bce8:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcec:	2230      	movs	r2, #48	; 0x30
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	454b      	cmp	r3, r9
 800bcf2:	d307      	bcc.n	800bd04 <__cvt+0xbc>
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcf8:	1bdb      	subs	r3, r3, r7
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	b004      	add	sp, #16
 800bd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd04:	1c59      	adds	r1, r3, #1
 800bd06:	9103      	str	r1, [sp, #12]
 800bd08:	701a      	strb	r2, [r3, #0]
 800bd0a:	e7f0      	b.n	800bcee <__cvt+0xa6>

0800bd0c <__exponent>:
 800bd0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2900      	cmp	r1, #0
 800bd12:	bfb8      	it	lt
 800bd14:	4249      	neglt	r1, r1
 800bd16:	f803 2b02 	strb.w	r2, [r3], #2
 800bd1a:	bfb4      	ite	lt
 800bd1c:	222d      	movlt	r2, #45	; 0x2d
 800bd1e:	222b      	movge	r2, #43	; 0x2b
 800bd20:	2909      	cmp	r1, #9
 800bd22:	7042      	strb	r2, [r0, #1]
 800bd24:	dd2a      	ble.n	800bd7c <__exponent+0x70>
 800bd26:	f10d 0407 	add.w	r4, sp, #7
 800bd2a:	46a4      	mov	ip, r4
 800bd2c:	270a      	movs	r7, #10
 800bd2e:	46a6      	mov	lr, r4
 800bd30:	460a      	mov	r2, r1
 800bd32:	fb91 f6f7 	sdiv	r6, r1, r7
 800bd36:	fb07 1516 	mls	r5, r7, r6, r1
 800bd3a:	3530      	adds	r5, #48	; 0x30
 800bd3c:	2a63      	cmp	r2, #99	; 0x63
 800bd3e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bd46:	4631      	mov	r1, r6
 800bd48:	dcf1      	bgt.n	800bd2e <__exponent+0x22>
 800bd4a:	3130      	adds	r1, #48	; 0x30
 800bd4c:	f1ae 0502 	sub.w	r5, lr, #2
 800bd50:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bd54:	1c44      	adds	r4, r0, #1
 800bd56:	4629      	mov	r1, r5
 800bd58:	4561      	cmp	r1, ip
 800bd5a:	d30a      	bcc.n	800bd72 <__exponent+0x66>
 800bd5c:	f10d 0209 	add.w	r2, sp, #9
 800bd60:	eba2 020e 	sub.w	r2, r2, lr
 800bd64:	4565      	cmp	r5, ip
 800bd66:	bf88      	it	hi
 800bd68:	2200      	movhi	r2, #0
 800bd6a:	4413      	add	r3, r2
 800bd6c:	1a18      	subs	r0, r3, r0
 800bd6e:	b003      	add	sp, #12
 800bd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd76:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bd7a:	e7ed      	b.n	800bd58 <__exponent+0x4c>
 800bd7c:	2330      	movs	r3, #48	; 0x30
 800bd7e:	3130      	adds	r1, #48	; 0x30
 800bd80:	7083      	strb	r3, [r0, #2]
 800bd82:	70c1      	strb	r1, [r0, #3]
 800bd84:	1d03      	adds	r3, r0, #4
 800bd86:	e7f1      	b.n	800bd6c <__exponent+0x60>

0800bd88 <_printf_float>:
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	ed2d 8b02 	vpush	{d8}
 800bd90:	b08d      	sub	sp, #52	; 0x34
 800bd92:	460c      	mov	r4, r1
 800bd94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd98:	4616      	mov	r6, r2
 800bd9a:	461f      	mov	r7, r3
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	f001 fa67 	bl	800d270 <_localeconv_r>
 800bda2:	f8d0 a000 	ldr.w	sl, [r0]
 800bda6:	4650      	mov	r0, sl
 800bda8:	f7f4 fa1a 	bl	80001e0 <strlen>
 800bdac:	2300      	movs	r3, #0
 800bdae:	930a      	str	r3, [sp, #40]	; 0x28
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	f8d8 3000 	ldr.w	r3, [r8]
 800bdb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bdbc:	3307      	adds	r3, #7
 800bdbe:	f023 0307 	bic.w	r3, r3, #7
 800bdc2:	f103 0208 	add.w	r2, r3, #8
 800bdc6:	f8c8 2000 	str.w	r2, [r8]
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bdd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bdd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bdda:	9307      	str	r3, [sp, #28]
 800bddc:	f8cd 8018 	str.w	r8, [sp, #24]
 800bde0:	ee08 0a10 	vmov	s16, r0
 800bde4:	4b9f      	ldr	r3, [pc, #636]	; (800c064 <_printf_float+0x2dc>)
 800bde6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdea:	f04f 32ff 	mov.w	r2, #4294967295
 800bdee:	f7f4 fea5 	bl	8000b3c <__aeabi_dcmpun>
 800bdf2:	bb88      	cbnz	r0, 800be58 <_printf_float+0xd0>
 800bdf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdf8:	4b9a      	ldr	r3, [pc, #616]	; (800c064 <_printf_float+0x2dc>)
 800bdfa:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfe:	f7f4 fe7f 	bl	8000b00 <__aeabi_dcmple>
 800be02:	bb48      	cbnz	r0, 800be58 <_printf_float+0xd0>
 800be04:	2200      	movs	r2, #0
 800be06:	2300      	movs	r3, #0
 800be08:	4640      	mov	r0, r8
 800be0a:	4649      	mov	r1, r9
 800be0c:	f7f4 fe6e 	bl	8000aec <__aeabi_dcmplt>
 800be10:	b110      	cbz	r0, 800be18 <_printf_float+0x90>
 800be12:	232d      	movs	r3, #45	; 0x2d
 800be14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be18:	4b93      	ldr	r3, [pc, #588]	; (800c068 <_printf_float+0x2e0>)
 800be1a:	4894      	ldr	r0, [pc, #592]	; (800c06c <_printf_float+0x2e4>)
 800be1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be20:	bf94      	ite	ls
 800be22:	4698      	movls	r8, r3
 800be24:	4680      	movhi	r8, r0
 800be26:	2303      	movs	r3, #3
 800be28:	6123      	str	r3, [r4, #16]
 800be2a:	9b05      	ldr	r3, [sp, #20]
 800be2c:	f023 0204 	bic.w	r2, r3, #4
 800be30:	6022      	str	r2, [r4, #0]
 800be32:	f04f 0900 	mov.w	r9, #0
 800be36:	9700      	str	r7, [sp, #0]
 800be38:	4633      	mov	r3, r6
 800be3a:	aa0b      	add	r2, sp, #44	; 0x2c
 800be3c:	4621      	mov	r1, r4
 800be3e:	4628      	mov	r0, r5
 800be40:	f000 f9d8 	bl	800c1f4 <_printf_common>
 800be44:	3001      	adds	r0, #1
 800be46:	f040 8090 	bne.w	800bf6a <_printf_float+0x1e2>
 800be4a:	f04f 30ff 	mov.w	r0, #4294967295
 800be4e:	b00d      	add	sp, #52	; 0x34
 800be50:	ecbd 8b02 	vpop	{d8}
 800be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be58:	4642      	mov	r2, r8
 800be5a:	464b      	mov	r3, r9
 800be5c:	4640      	mov	r0, r8
 800be5e:	4649      	mov	r1, r9
 800be60:	f7f4 fe6c 	bl	8000b3c <__aeabi_dcmpun>
 800be64:	b140      	cbz	r0, 800be78 <_printf_float+0xf0>
 800be66:	464b      	mov	r3, r9
 800be68:	2b00      	cmp	r3, #0
 800be6a:	bfbc      	itt	lt
 800be6c:	232d      	movlt	r3, #45	; 0x2d
 800be6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800be72:	487f      	ldr	r0, [pc, #508]	; (800c070 <_printf_float+0x2e8>)
 800be74:	4b7f      	ldr	r3, [pc, #508]	; (800c074 <_printf_float+0x2ec>)
 800be76:	e7d1      	b.n	800be1c <_printf_float+0x94>
 800be78:	6863      	ldr	r3, [r4, #4]
 800be7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800be7e:	9206      	str	r2, [sp, #24]
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	d13f      	bne.n	800bf04 <_printf_float+0x17c>
 800be84:	2306      	movs	r3, #6
 800be86:	6063      	str	r3, [r4, #4]
 800be88:	9b05      	ldr	r3, [sp, #20]
 800be8a:	6861      	ldr	r1, [r4, #4]
 800be8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800be90:	2300      	movs	r3, #0
 800be92:	9303      	str	r3, [sp, #12]
 800be94:	ab0a      	add	r3, sp, #40	; 0x28
 800be96:	e9cd b301 	strd	fp, r3, [sp, #4]
 800be9a:	ab09      	add	r3, sp, #36	; 0x24
 800be9c:	ec49 8b10 	vmov	d0, r8, r9
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	6022      	str	r2, [r4, #0]
 800bea4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bea8:	4628      	mov	r0, r5
 800beaa:	f7ff fecd 	bl	800bc48 <__cvt>
 800beae:	9b06      	ldr	r3, [sp, #24]
 800beb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800beb2:	2b47      	cmp	r3, #71	; 0x47
 800beb4:	4680      	mov	r8, r0
 800beb6:	d108      	bne.n	800beca <_printf_float+0x142>
 800beb8:	1cc8      	adds	r0, r1, #3
 800beba:	db02      	blt.n	800bec2 <_printf_float+0x13a>
 800bebc:	6863      	ldr	r3, [r4, #4]
 800bebe:	4299      	cmp	r1, r3
 800bec0:	dd41      	ble.n	800bf46 <_printf_float+0x1be>
 800bec2:	f1ab 0b02 	sub.w	fp, fp, #2
 800bec6:	fa5f fb8b 	uxtb.w	fp, fp
 800beca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bece:	d820      	bhi.n	800bf12 <_printf_float+0x18a>
 800bed0:	3901      	subs	r1, #1
 800bed2:	465a      	mov	r2, fp
 800bed4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bed8:	9109      	str	r1, [sp, #36]	; 0x24
 800beda:	f7ff ff17 	bl	800bd0c <__exponent>
 800bede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bee0:	1813      	adds	r3, r2, r0
 800bee2:	2a01      	cmp	r2, #1
 800bee4:	4681      	mov	r9, r0
 800bee6:	6123      	str	r3, [r4, #16]
 800bee8:	dc02      	bgt.n	800bef0 <_printf_float+0x168>
 800beea:	6822      	ldr	r2, [r4, #0]
 800beec:	07d2      	lsls	r2, r2, #31
 800beee:	d501      	bpl.n	800bef4 <_printf_float+0x16c>
 800bef0:	3301      	adds	r3, #1
 800bef2:	6123      	str	r3, [r4, #16]
 800bef4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d09c      	beq.n	800be36 <_printf_float+0xae>
 800befc:	232d      	movs	r3, #45	; 0x2d
 800befe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf02:	e798      	b.n	800be36 <_printf_float+0xae>
 800bf04:	9a06      	ldr	r2, [sp, #24]
 800bf06:	2a47      	cmp	r2, #71	; 0x47
 800bf08:	d1be      	bne.n	800be88 <_printf_float+0x100>
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1bc      	bne.n	800be88 <_printf_float+0x100>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e7b9      	b.n	800be86 <_printf_float+0xfe>
 800bf12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf16:	d118      	bne.n	800bf4a <_printf_float+0x1c2>
 800bf18:	2900      	cmp	r1, #0
 800bf1a:	6863      	ldr	r3, [r4, #4]
 800bf1c:	dd0b      	ble.n	800bf36 <_printf_float+0x1ae>
 800bf1e:	6121      	str	r1, [r4, #16]
 800bf20:	b913      	cbnz	r3, 800bf28 <_printf_float+0x1a0>
 800bf22:	6822      	ldr	r2, [r4, #0]
 800bf24:	07d0      	lsls	r0, r2, #31
 800bf26:	d502      	bpl.n	800bf2e <_printf_float+0x1a6>
 800bf28:	3301      	adds	r3, #1
 800bf2a:	440b      	add	r3, r1
 800bf2c:	6123      	str	r3, [r4, #16]
 800bf2e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bf30:	f04f 0900 	mov.w	r9, #0
 800bf34:	e7de      	b.n	800bef4 <_printf_float+0x16c>
 800bf36:	b913      	cbnz	r3, 800bf3e <_printf_float+0x1b6>
 800bf38:	6822      	ldr	r2, [r4, #0]
 800bf3a:	07d2      	lsls	r2, r2, #31
 800bf3c:	d501      	bpl.n	800bf42 <_printf_float+0x1ba>
 800bf3e:	3302      	adds	r3, #2
 800bf40:	e7f4      	b.n	800bf2c <_printf_float+0x1a4>
 800bf42:	2301      	movs	r3, #1
 800bf44:	e7f2      	b.n	800bf2c <_printf_float+0x1a4>
 800bf46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bf4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf4c:	4299      	cmp	r1, r3
 800bf4e:	db05      	blt.n	800bf5c <_printf_float+0x1d4>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	6121      	str	r1, [r4, #16]
 800bf54:	07d8      	lsls	r0, r3, #31
 800bf56:	d5ea      	bpl.n	800bf2e <_printf_float+0x1a6>
 800bf58:	1c4b      	adds	r3, r1, #1
 800bf5a:	e7e7      	b.n	800bf2c <_printf_float+0x1a4>
 800bf5c:	2900      	cmp	r1, #0
 800bf5e:	bfd4      	ite	le
 800bf60:	f1c1 0202 	rsble	r2, r1, #2
 800bf64:	2201      	movgt	r2, #1
 800bf66:	4413      	add	r3, r2
 800bf68:	e7e0      	b.n	800bf2c <_printf_float+0x1a4>
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	055a      	lsls	r2, r3, #21
 800bf6e:	d407      	bmi.n	800bf80 <_printf_float+0x1f8>
 800bf70:	6923      	ldr	r3, [r4, #16]
 800bf72:	4642      	mov	r2, r8
 800bf74:	4631      	mov	r1, r6
 800bf76:	4628      	mov	r0, r5
 800bf78:	47b8      	blx	r7
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	d12c      	bne.n	800bfd8 <_printf_float+0x250>
 800bf7e:	e764      	b.n	800be4a <_printf_float+0xc2>
 800bf80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf84:	f240 80e0 	bls.w	800c148 <_printf_float+0x3c0>
 800bf88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f7f4 fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d034      	beq.n	800c002 <_printf_float+0x27a>
 800bf98:	4a37      	ldr	r2, [pc, #220]	; (800c078 <_printf_float+0x2f0>)
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	47b8      	blx	r7
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	f43f af51 	beq.w	800be4a <_printf_float+0xc2>
 800bfa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfac:	429a      	cmp	r2, r3
 800bfae:	db02      	blt.n	800bfb6 <_printf_float+0x22e>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	07d8      	lsls	r0, r3, #31
 800bfb4:	d510      	bpl.n	800bfd8 <_printf_float+0x250>
 800bfb6:	ee18 3a10 	vmov	r3, s16
 800bfba:	4652      	mov	r2, sl
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	47b8      	blx	r7
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	f43f af41 	beq.w	800be4a <_printf_float+0xc2>
 800bfc8:	f04f 0800 	mov.w	r8, #0
 800bfcc:	f104 091a 	add.w	r9, r4, #26
 800bfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	4543      	cmp	r3, r8
 800bfd6:	dc09      	bgt.n	800bfec <_printf_float+0x264>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	079b      	lsls	r3, r3, #30
 800bfdc:	f100 8105 	bmi.w	800c1ea <_printf_float+0x462>
 800bfe0:	68e0      	ldr	r0, [r4, #12]
 800bfe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe4:	4298      	cmp	r0, r3
 800bfe6:	bfb8      	it	lt
 800bfe8:	4618      	movlt	r0, r3
 800bfea:	e730      	b.n	800be4e <_printf_float+0xc6>
 800bfec:	2301      	movs	r3, #1
 800bfee:	464a      	mov	r2, r9
 800bff0:	4631      	mov	r1, r6
 800bff2:	4628      	mov	r0, r5
 800bff4:	47b8      	blx	r7
 800bff6:	3001      	adds	r0, #1
 800bff8:	f43f af27 	beq.w	800be4a <_printf_float+0xc2>
 800bffc:	f108 0801 	add.w	r8, r8, #1
 800c000:	e7e6      	b.n	800bfd0 <_printf_float+0x248>
 800c002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c004:	2b00      	cmp	r3, #0
 800c006:	dc39      	bgt.n	800c07c <_printf_float+0x2f4>
 800c008:	4a1b      	ldr	r2, [pc, #108]	; (800c078 <_printf_float+0x2f0>)
 800c00a:	2301      	movs	r3, #1
 800c00c:	4631      	mov	r1, r6
 800c00e:	4628      	mov	r0, r5
 800c010:	47b8      	blx	r7
 800c012:	3001      	adds	r0, #1
 800c014:	f43f af19 	beq.w	800be4a <_printf_float+0xc2>
 800c018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c01c:	4313      	orrs	r3, r2
 800c01e:	d102      	bne.n	800c026 <_printf_float+0x29e>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	07d9      	lsls	r1, r3, #31
 800c024:	d5d8      	bpl.n	800bfd8 <_printf_float+0x250>
 800c026:	ee18 3a10 	vmov	r3, s16
 800c02a:	4652      	mov	r2, sl
 800c02c:	4631      	mov	r1, r6
 800c02e:	4628      	mov	r0, r5
 800c030:	47b8      	blx	r7
 800c032:	3001      	adds	r0, #1
 800c034:	f43f af09 	beq.w	800be4a <_printf_float+0xc2>
 800c038:	f04f 0900 	mov.w	r9, #0
 800c03c:	f104 0a1a 	add.w	sl, r4, #26
 800c040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c042:	425b      	negs	r3, r3
 800c044:	454b      	cmp	r3, r9
 800c046:	dc01      	bgt.n	800c04c <_printf_float+0x2c4>
 800c048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c04a:	e792      	b.n	800bf72 <_printf_float+0x1ea>
 800c04c:	2301      	movs	r3, #1
 800c04e:	4652      	mov	r2, sl
 800c050:	4631      	mov	r1, r6
 800c052:	4628      	mov	r0, r5
 800c054:	47b8      	blx	r7
 800c056:	3001      	adds	r0, #1
 800c058:	f43f aef7 	beq.w	800be4a <_printf_float+0xc2>
 800c05c:	f109 0901 	add.w	r9, r9, #1
 800c060:	e7ee      	b.n	800c040 <_printf_float+0x2b8>
 800c062:	bf00      	nop
 800c064:	7fefffff 	.word	0x7fefffff
 800c068:	08019920 	.word	0x08019920
 800c06c:	08019924 	.word	0x08019924
 800c070:	0801992c 	.word	0x0801992c
 800c074:	08019928 	.word	0x08019928
 800c078:	08019930 	.word	0x08019930
 800c07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c07e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c080:	429a      	cmp	r2, r3
 800c082:	bfa8      	it	ge
 800c084:	461a      	movge	r2, r3
 800c086:	2a00      	cmp	r2, #0
 800c088:	4691      	mov	r9, r2
 800c08a:	dc37      	bgt.n	800c0fc <_printf_float+0x374>
 800c08c:	f04f 0b00 	mov.w	fp, #0
 800c090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c094:	f104 021a 	add.w	r2, r4, #26
 800c098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c09a:	9305      	str	r3, [sp, #20]
 800c09c:	eba3 0309 	sub.w	r3, r3, r9
 800c0a0:	455b      	cmp	r3, fp
 800c0a2:	dc33      	bgt.n	800c10c <_printf_float+0x384>
 800c0a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	db3b      	blt.n	800c124 <_printf_float+0x39c>
 800c0ac:	6823      	ldr	r3, [r4, #0]
 800c0ae:	07da      	lsls	r2, r3, #31
 800c0b0:	d438      	bmi.n	800c124 <_printf_float+0x39c>
 800c0b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0b4:	9b05      	ldr	r3, [sp, #20]
 800c0b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	eba2 0901 	sub.w	r9, r2, r1
 800c0be:	4599      	cmp	r9, r3
 800c0c0:	bfa8      	it	ge
 800c0c2:	4699      	movge	r9, r3
 800c0c4:	f1b9 0f00 	cmp.w	r9, #0
 800c0c8:	dc35      	bgt.n	800c136 <_printf_float+0x3ae>
 800c0ca:	f04f 0800 	mov.w	r8, #0
 800c0ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0d2:	f104 0a1a 	add.w	sl, r4, #26
 800c0d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0da:	1a9b      	subs	r3, r3, r2
 800c0dc:	eba3 0309 	sub.w	r3, r3, r9
 800c0e0:	4543      	cmp	r3, r8
 800c0e2:	f77f af79 	ble.w	800bfd8 <_printf_float+0x250>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4652      	mov	r2, sl
 800c0ea:	4631      	mov	r1, r6
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	47b8      	blx	r7
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	f43f aeaa 	beq.w	800be4a <_printf_float+0xc2>
 800c0f6:	f108 0801 	add.w	r8, r8, #1
 800c0fa:	e7ec      	b.n	800c0d6 <_printf_float+0x34e>
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	4631      	mov	r1, r6
 800c100:	4642      	mov	r2, r8
 800c102:	4628      	mov	r0, r5
 800c104:	47b8      	blx	r7
 800c106:	3001      	adds	r0, #1
 800c108:	d1c0      	bne.n	800c08c <_printf_float+0x304>
 800c10a:	e69e      	b.n	800be4a <_printf_float+0xc2>
 800c10c:	2301      	movs	r3, #1
 800c10e:	4631      	mov	r1, r6
 800c110:	4628      	mov	r0, r5
 800c112:	9205      	str	r2, [sp, #20]
 800c114:	47b8      	blx	r7
 800c116:	3001      	adds	r0, #1
 800c118:	f43f ae97 	beq.w	800be4a <_printf_float+0xc2>
 800c11c:	9a05      	ldr	r2, [sp, #20]
 800c11e:	f10b 0b01 	add.w	fp, fp, #1
 800c122:	e7b9      	b.n	800c098 <_printf_float+0x310>
 800c124:	ee18 3a10 	vmov	r3, s16
 800c128:	4652      	mov	r2, sl
 800c12a:	4631      	mov	r1, r6
 800c12c:	4628      	mov	r0, r5
 800c12e:	47b8      	blx	r7
 800c130:	3001      	adds	r0, #1
 800c132:	d1be      	bne.n	800c0b2 <_printf_float+0x32a>
 800c134:	e689      	b.n	800be4a <_printf_float+0xc2>
 800c136:	9a05      	ldr	r2, [sp, #20]
 800c138:	464b      	mov	r3, r9
 800c13a:	4442      	add	r2, r8
 800c13c:	4631      	mov	r1, r6
 800c13e:	4628      	mov	r0, r5
 800c140:	47b8      	blx	r7
 800c142:	3001      	adds	r0, #1
 800c144:	d1c1      	bne.n	800c0ca <_printf_float+0x342>
 800c146:	e680      	b.n	800be4a <_printf_float+0xc2>
 800c148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c14a:	2a01      	cmp	r2, #1
 800c14c:	dc01      	bgt.n	800c152 <_printf_float+0x3ca>
 800c14e:	07db      	lsls	r3, r3, #31
 800c150:	d538      	bpl.n	800c1c4 <_printf_float+0x43c>
 800c152:	2301      	movs	r3, #1
 800c154:	4642      	mov	r2, r8
 800c156:	4631      	mov	r1, r6
 800c158:	4628      	mov	r0, r5
 800c15a:	47b8      	blx	r7
 800c15c:	3001      	adds	r0, #1
 800c15e:	f43f ae74 	beq.w	800be4a <_printf_float+0xc2>
 800c162:	ee18 3a10 	vmov	r3, s16
 800c166:	4652      	mov	r2, sl
 800c168:	4631      	mov	r1, r6
 800c16a:	4628      	mov	r0, r5
 800c16c:	47b8      	blx	r7
 800c16e:	3001      	adds	r0, #1
 800c170:	f43f ae6b 	beq.w	800be4a <_printf_float+0xc2>
 800c174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c178:	2200      	movs	r2, #0
 800c17a:	2300      	movs	r3, #0
 800c17c:	f7f4 fcac 	bl	8000ad8 <__aeabi_dcmpeq>
 800c180:	b9d8      	cbnz	r0, 800c1ba <_printf_float+0x432>
 800c182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c184:	f108 0201 	add.w	r2, r8, #1
 800c188:	3b01      	subs	r3, #1
 800c18a:	4631      	mov	r1, r6
 800c18c:	4628      	mov	r0, r5
 800c18e:	47b8      	blx	r7
 800c190:	3001      	adds	r0, #1
 800c192:	d10e      	bne.n	800c1b2 <_printf_float+0x42a>
 800c194:	e659      	b.n	800be4a <_printf_float+0xc2>
 800c196:	2301      	movs	r3, #1
 800c198:	4652      	mov	r2, sl
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f43f ae52 	beq.w	800be4a <_printf_float+0xc2>
 800c1a6:	f108 0801 	add.w	r8, r8, #1
 800c1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	4543      	cmp	r3, r8
 800c1b0:	dcf1      	bgt.n	800c196 <_printf_float+0x40e>
 800c1b2:	464b      	mov	r3, r9
 800c1b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c1b8:	e6dc      	b.n	800bf74 <_printf_float+0x1ec>
 800c1ba:	f04f 0800 	mov.w	r8, #0
 800c1be:	f104 0a1a 	add.w	sl, r4, #26
 800c1c2:	e7f2      	b.n	800c1aa <_printf_float+0x422>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4642      	mov	r2, r8
 800c1c8:	e7df      	b.n	800c18a <_printf_float+0x402>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	464a      	mov	r2, r9
 800c1ce:	4631      	mov	r1, r6
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	47b8      	blx	r7
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	f43f ae38 	beq.w	800be4a <_printf_float+0xc2>
 800c1da:	f108 0801 	add.w	r8, r8, #1
 800c1de:	68e3      	ldr	r3, [r4, #12]
 800c1e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1e2:	1a5b      	subs	r3, r3, r1
 800c1e4:	4543      	cmp	r3, r8
 800c1e6:	dcf0      	bgt.n	800c1ca <_printf_float+0x442>
 800c1e8:	e6fa      	b.n	800bfe0 <_printf_float+0x258>
 800c1ea:	f04f 0800 	mov.w	r8, #0
 800c1ee:	f104 0919 	add.w	r9, r4, #25
 800c1f2:	e7f4      	b.n	800c1de <_printf_float+0x456>

0800c1f4 <_printf_common>:
 800c1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	4699      	mov	r9, r3
 800c1fc:	688a      	ldr	r2, [r1, #8]
 800c1fe:	690b      	ldr	r3, [r1, #16]
 800c200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c204:	4293      	cmp	r3, r2
 800c206:	bfb8      	it	lt
 800c208:	4613      	movlt	r3, r2
 800c20a:	6033      	str	r3, [r6, #0]
 800c20c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c210:	4607      	mov	r7, r0
 800c212:	460c      	mov	r4, r1
 800c214:	b10a      	cbz	r2, 800c21a <_printf_common+0x26>
 800c216:	3301      	adds	r3, #1
 800c218:	6033      	str	r3, [r6, #0]
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	0699      	lsls	r1, r3, #26
 800c21e:	bf42      	ittt	mi
 800c220:	6833      	ldrmi	r3, [r6, #0]
 800c222:	3302      	addmi	r3, #2
 800c224:	6033      	strmi	r3, [r6, #0]
 800c226:	6825      	ldr	r5, [r4, #0]
 800c228:	f015 0506 	ands.w	r5, r5, #6
 800c22c:	d106      	bne.n	800c23c <_printf_common+0x48>
 800c22e:	f104 0a19 	add.w	sl, r4, #25
 800c232:	68e3      	ldr	r3, [r4, #12]
 800c234:	6832      	ldr	r2, [r6, #0]
 800c236:	1a9b      	subs	r3, r3, r2
 800c238:	42ab      	cmp	r3, r5
 800c23a:	dc26      	bgt.n	800c28a <_printf_common+0x96>
 800c23c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c240:	1e13      	subs	r3, r2, #0
 800c242:	6822      	ldr	r2, [r4, #0]
 800c244:	bf18      	it	ne
 800c246:	2301      	movne	r3, #1
 800c248:	0692      	lsls	r2, r2, #26
 800c24a:	d42b      	bmi.n	800c2a4 <_printf_common+0xb0>
 800c24c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c250:	4649      	mov	r1, r9
 800c252:	4638      	mov	r0, r7
 800c254:	47c0      	blx	r8
 800c256:	3001      	adds	r0, #1
 800c258:	d01e      	beq.n	800c298 <_printf_common+0xa4>
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	68e5      	ldr	r5, [r4, #12]
 800c25e:	6832      	ldr	r2, [r6, #0]
 800c260:	f003 0306 	and.w	r3, r3, #6
 800c264:	2b04      	cmp	r3, #4
 800c266:	bf08      	it	eq
 800c268:	1aad      	subeq	r5, r5, r2
 800c26a:	68a3      	ldr	r3, [r4, #8]
 800c26c:	6922      	ldr	r2, [r4, #16]
 800c26e:	bf0c      	ite	eq
 800c270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c274:	2500      	movne	r5, #0
 800c276:	4293      	cmp	r3, r2
 800c278:	bfc4      	itt	gt
 800c27a:	1a9b      	subgt	r3, r3, r2
 800c27c:	18ed      	addgt	r5, r5, r3
 800c27e:	2600      	movs	r6, #0
 800c280:	341a      	adds	r4, #26
 800c282:	42b5      	cmp	r5, r6
 800c284:	d11a      	bne.n	800c2bc <_printf_common+0xc8>
 800c286:	2000      	movs	r0, #0
 800c288:	e008      	b.n	800c29c <_printf_common+0xa8>
 800c28a:	2301      	movs	r3, #1
 800c28c:	4652      	mov	r2, sl
 800c28e:	4649      	mov	r1, r9
 800c290:	4638      	mov	r0, r7
 800c292:	47c0      	blx	r8
 800c294:	3001      	adds	r0, #1
 800c296:	d103      	bne.n	800c2a0 <_printf_common+0xac>
 800c298:	f04f 30ff 	mov.w	r0, #4294967295
 800c29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a0:	3501      	adds	r5, #1
 800c2a2:	e7c6      	b.n	800c232 <_printf_common+0x3e>
 800c2a4:	18e1      	adds	r1, r4, r3
 800c2a6:	1c5a      	adds	r2, r3, #1
 800c2a8:	2030      	movs	r0, #48	; 0x30
 800c2aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2ae:	4422      	add	r2, r4
 800c2b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2b8:	3302      	adds	r3, #2
 800c2ba:	e7c7      	b.n	800c24c <_printf_common+0x58>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	4622      	mov	r2, r4
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	47c0      	blx	r8
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	d0e6      	beq.n	800c298 <_printf_common+0xa4>
 800c2ca:	3601      	adds	r6, #1
 800c2cc:	e7d9      	b.n	800c282 <_printf_common+0x8e>
	...

0800c2d0 <_printf_i>:
 800c2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	4691      	mov	r9, r2
 800c2d8:	7e27      	ldrb	r7, [r4, #24]
 800c2da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c2dc:	2f78      	cmp	r7, #120	; 0x78
 800c2de:	4680      	mov	r8, r0
 800c2e0:	469a      	mov	sl, r3
 800c2e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2e6:	d807      	bhi.n	800c2f8 <_printf_i+0x28>
 800c2e8:	2f62      	cmp	r7, #98	; 0x62
 800c2ea:	d80a      	bhi.n	800c302 <_printf_i+0x32>
 800c2ec:	2f00      	cmp	r7, #0
 800c2ee:	f000 80d8 	beq.w	800c4a2 <_printf_i+0x1d2>
 800c2f2:	2f58      	cmp	r7, #88	; 0x58
 800c2f4:	f000 80a3 	beq.w	800c43e <_printf_i+0x16e>
 800c2f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c2fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c300:	e03a      	b.n	800c378 <_printf_i+0xa8>
 800c302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c306:	2b15      	cmp	r3, #21
 800c308:	d8f6      	bhi.n	800c2f8 <_printf_i+0x28>
 800c30a:	a001      	add	r0, pc, #4	; (adr r0, 800c310 <_printf_i+0x40>)
 800c30c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c310:	0800c369 	.word	0x0800c369
 800c314:	0800c37d 	.word	0x0800c37d
 800c318:	0800c2f9 	.word	0x0800c2f9
 800c31c:	0800c2f9 	.word	0x0800c2f9
 800c320:	0800c2f9 	.word	0x0800c2f9
 800c324:	0800c2f9 	.word	0x0800c2f9
 800c328:	0800c37d 	.word	0x0800c37d
 800c32c:	0800c2f9 	.word	0x0800c2f9
 800c330:	0800c2f9 	.word	0x0800c2f9
 800c334:	0800c2f9 	.word	0x0800c2f9
 800c338:	0800c2f9 	.word	0x0800c2f9
 800c33c:	0800c489 	.word	0x0800c489
 800c340:	0800c3ad 	.word	0x0800c3ad
 800c344:	0800c46b 	.word	0x0800c46b
 800c348:	0800c2f9 	.word	0x0800c2f9
 800c34c:	0800c2f9 	.word	0x0800c2f9
 800c350:	0800c4ab 	.word	0x0800c4ab
 800c354:	0800c2f9 	.word	0x0800c2f9
 800c358:	0800c3ad 	.word	0x0800c3ad
 800c35c:	0800c2f9 	.word	0x0800c2f9
 800c360:	0800c2f9 	.word	0x0800c2f9
 800c364:	0800c473 	.word	0x0800c473
 800c368:	680b      	ldr	r3, [r1, #0]
 800c36a:	1d1a      	adds	r2, r3, #4
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	600a      	str	r2, [r1, #0]
 800c370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c378:	2301      	movs	r3, #1
 800c37a:	e0a3      	b.n	800c4c4 <_printf_i+0x1f4>
 800c37c:	6825      	ldr	r5, [r4, #0]
 800c37e:	6808      	ldr	r0, [r1, #0]
 800c380:	062e      	lsls	r6, r5, #24
 800c382:	f100 0304 	add.w	r3, r0, #4
 800c386:	d50a      	bpl.n	800c39e <_printf_i+0xce>
 800c388:	6805      	ldr	r5, [r0, #0]
 800c38a:	600b      	str	r3, [r1, #0]
 800c38c:	2d00      	cmp	r5, #0
 800c38e:	da03      	bge.n	800c398 <_printf_i+0xc8>
 800c390:	232d      	movs	r3, #45	; 0x2d
 800c392:	426d      	negs	r5, r5
 800c394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c398:	485e      	ldr	r0, [pc, #376]	; (800c514 <_printf_i+0x244>)
 800c39a:	230a      	movs	r3, #10
 800c39c:	e019      	b.n	800c3d2 <_printf_i+0x102>
 800c39e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c3a2:	6805      	ldr	r5, [r0, #0]
 800c3a4:	600b      	str	r3, [r1, #0]
 800c3a6:	bf18      	it	ne
 800c3a8:	b22d      	sxthne	r5, r5
 800c3aa:	e7ef      	b.n	800c38c <_printf_i+0xbc>
 800c3ac:	680b      	ldr	r3, [r1, #0]
 800c3ae:	6825      	ldr	r5, [r4, #0]
 800c3b0:	1d18      	adds	r0, r3, #4
 800c3b2:	6008      	str	r0, [r1, #0]
 800c3b4:	0628      	lsls	r0, r5, #24
 800c3b6:	d501      	bpl.n	800c3bc <_printf_i+0xec>
 800c3b8:	681d      	ldr	r5, [r3, #0]
 800c3ba:	e002      	b.n	800c3c2 <_printf_i+0xf2>
 800c3bc:	0669      	lsls	r1, r5, #25
 800c3be:	d5fb      	bpl.n	800c3b8 <_printf_i+0xe8>
 800c3c0:	881d      	ldrh	r5, [r3, #0]
 800c3c2:	4854      	ldr	r0, [pc, #336]	; (800c514 <_printf_i+0x244>)
 800c3c4:	2f6f      	cmp	r7, #111	; 0x6f
 800c3c6:	bf0c      	ite	eq
 800c3c8:	2308      	moveq	r3, #8
 800c3ca:	230a      	movne	r3, #10
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3d2:	6866      	ldr	r6, [r4, #4]
 800c3d4:	60a6      	str	r6, [r4, #8]
 800c3d6:	2e00      	cmp	r6, #0
 800c3d8:	bfa2      	ittt	ge
 800c3da:	6821      	ldrge	r1, [r4, #0]
 800c3dc:	f021 0104 	bicge.w	r1, r1, #4
 800c3e0:	6021      	strge	r1, [r4, #0]
 800c3e2:	b90d      	cbnz	r5, 800c3e8 <_printf_i+0x118>
 800c3e4:	2e00      	cmp	r6, #0
 800c3e6:	d04d      	beq.n	800c484 <_printf_i+0x1b4>
 800c3e8:	4616      	mov	r6, r2
 800c3ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3ee:	fb03 5711 	mls	r7, r3, r1, r5
 800c3f2:	5dc7      	ldrb	r7, [r0, r7]
 800c3f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3f8:	462f      	mov	r7, r5
 800c3fa:	42bb      	cmp	r3, r7
 800c3fc:	460d      	mov	r5, r1
 800c3fe:	d9f4      	bls.n	800c3ea <_printf_i+0x11a>
 800c400:	2b08      	cmp	r3, #8
 800c402:	d10b      	bne.n	800c41c <_printf_i+0x14c>
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	07df      	lsls	r7, r3, #31
 800c408:	d508      	bpl.n	800c41c <_printf_i+0x14c>
 800c40a:	6923      	ldr	r3, [r4, #16]
 800c40c:	6861      	ldr	r1, [r4, #4]
 800c40e:	4299      	cmp	r1, r3
 800c410:	bfde      	ittt	le
 800c412:	2330      	movle	r3, #48	; 0x30
 800c414:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c418:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c41c:	1b92      	subs	r2, r2, r6
 800c41e:	6122      	str	r2, [r4, #16]
 800c420:	f8cd a000 	str.w	sl, [sp]
 800c424:	464b      	mov	r3, r9
 800c426:	aa03      	add	r2, sp, #12
 800c428:	4621      	mov	r1, r4
 800c42a:	4640      	mov	r0, r8
 800c42c:	f7ff fee2 	bl	800c1f4 <_printf_common>
 800c430:	3001      	adds	r0, #1
 800c432:	d14c      	bne.n	800c4ce <_printf_i+0x1fe>
 800c434:	f04f 30ff 	mov.w	r0, #4294967295
 800c438:	b004      	add	sp, #16
 800c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43e:	4835      	ldr	r0, [pc, #212]	; (800c514 <_printf_i+0x244>)
 800c440:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	680e      	ldr	r6, [r1, #0]
 800c448:	061f      	lsls	r7, r3, #24
 800c44a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c44e:	600e      	str	r6, [r1, #0]
 800c450:	d514      	bpl.n	800c47c <_printf_i+0x1ac>
 800c452:	07d9      	lsls	r1, r3, #31
 800c454:	bf44      	itt	mi
 800c456:	f043 0320 	orrmi.w	r3, r3, #32
 800c45a:	6023      	strmi	r3, [r4, #0]
 800c45c:	b91d      	cbnz	r5, 800c466 <_printf_i+0x196>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	f023 0320 	bic.w	r3, r3, #32
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	2310      	movs	r3, #16
 800c468:	e7b0      	b.n	800c3cc <_printf_i+0xfc>
 800c46a:	6823      	ldr	r3, [r4, #0]
 800c46c:	f043 0320 	orr.w	r3, r3, #32
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	2378      	movs	r3, #120	; 0x78
 800c474:	4828      	ldr	r0, [pc, #160]	; (800c518 <_printf_i+0x248>)
 800c476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c47a:	e7e3      	b.n	800c444 <_printf_i+0x174>
 800c47c:	065e      	lsls	r6, r3, #25
 800c47e:	bf48      	it	mi
 800c480:	b2ad      	uxthmi	r5, r5
 800c482:	e7e6      	b.n	800c452 <_printf_i+0x182>
 800c484:	4616      	mov	r6, r2
 800c486:	e7bb      	b.n	800c400 <_printf_i+0x130>
 800c488:	680b      	ldr	r3, [r1, #0]
 800c48a:	6826      	ldr	r6, [r4, #0]
 800c48c:	6960      	ldr	r0, [r4, #20]
 800c48e:	1d1d      	adds	r5, r3, #4
 800c490:	600d      	str	r5, [r1, #0]
 800c492:	0635      	lsls	r5, r6, #24
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	d501      	bpl.n	800c49c <_printf_i+0x1cc>
 800c498:	6018      	str	r0, [r3, #0]
 800c49a:	e002      	b.n	800c4a2 <_printf_i+0x1d2>
 800c49c:	0671      	lsls	r1, r6, #25
 800c49e:	d5fb      	bpl.n	800c498 <_printf_i+0x1c8>
 800c4a0:	8018      	strh	r0, [r3, #0]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	6123      	str	r3, [r4, #16]
 800c4a6:	4616      	mov	r6, r2
 800c4a8:	e7ba      	b.n	800c420 <_printf_i+0x150>
 800c4aa:	680b      	ldr	r3, [r1, #0]
 800c4ac:	1d1a      	adds	r2, r3, #4
 800c4ae:	600a      	str	r2, [r1, #0]
 800c4b0:	681e      	ldr	r6, [r3, #0]
 800c4b2:	6862      	ldr	r2, [r4, #4]
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f7f3 fe9a 	bl	80001f0 <memchr>
 800c4bc:	b108      	cbz	r0, 800c4c2 <_printf_i+0x1f2>
 800c4be:	1b80      	subs	r0, r0, r6
 800c4c0:	6060      	str	r0, [r4, #4]
 800c4c2:	6863      	ldr	r3, [r4, #4]
 800c4c4:	6123      	str	r3, [r4, #16]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4cc:	e7a8      	b.n	800c420 <_printf_i+0x150>
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	4649      	mov	r1, r9
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	47d0      	blx	sl
 800c4d8:	3001      	adds	r0, #1
 800c4da:	d0ab      	beq.n	800c434 <_printf_i+0x164>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	079b      	lsls	r3, r3, #30
 800c4e0:	d413      	bmi.n	800c50a <_printf_i+0x23a>
 800c4e2:	68e0      	ldr	r0, [r4, #12]
 800c4e4:	9b03      	ldr	r3, [sp, #12]
 800c4e6:	4298      	cmp	r0, r3
 800c4e8:	bfb8      	it	lt
 800c4ea:	4618      	movlt	r0, r3
 800c4ec:	e7a4      	b.n	800c438 <_printf_i+0x168>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4632      	mov	r2, r6
 800c4f2:	4649      	mov	r1, r9
 800c4f4:	4640      	mov	r0, r8
 800c4f6:	47d0      	blx	sl
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	d09b      	beq.n	800c434 <_printf_i+0x164>
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	68e3      	ldr	r3, [r4, #12]
 800c500:	9903      	ldr	r1, [sp, #12]
 800c502:	1a5b      	subs	r3, r3, r1
 800c504:	42ab      	cmp	r3, r5
 800c506:	dcf2      	bgt.n	800c4ee <_printf_i+0x21e>
 800c508:	e7eb      	b.n	800c4e2 <_printf_i+0x212>
 800c50a:	2500      	movs	r5, #0
 800c50c:	f104 0619 	add.w	r6, r4, #25
 800c510:	e7f5      	b.n	800c4fe <_printf_i+0x22e>
 800c512:	bf00      	nop
 800c514:	08019932 	.word	0x08019932
 800c518:	08019943 	.word	0x08019943

0800c51c <_sbrk_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d06      	ldr	r5, [pc, #24]	; (800c538 <_sbrk_r+0x1c>)
 800c520:	2300      	movs	r3, #0
 800c522:	4604      	mov	r4, r0
 800c524:	4608      	mov	r0, r1
 800c526:	602b      	str	r3, [r5, #0]
 800c528:	f7f6 fa4c 	bl	80029c4 <_sbrk>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_sbrk_r+0x1a>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_sbrk_r+0x1a>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	200093c8 	.word	0x200093c8

0800c53c <siprintf>:
 800c53c:	b40e      	push	{r1, r2, r3}
 800c53e:	b500      	push	{lr}
 800c540:	b09c      	sub	sp, #112	; 0x70
 800c542:	ab1d      	add	r3, sp, #116	; 0x74
 800c544:	9002      	str	r0, [sp, #8]
 800c546:	9006      	str	r0, [sp, #24]
 800c548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c54c:	4809      	ldr	r0, [pc, #36]	; (800c574 <siprintf+0x38>)
 800c54e:	9107      	str	r1, [sp, #28]
 800c550:	9104      	str	r1, [sp, #16]
 800c552:	4909      	ldr	r1, [pc, #36]	; (800c578 <siprintf+0x3c>)
 800c554:	f853 2b04 	ldr.w	r2, [r3], #4
 800c558:	9105      	str	r1, [sp, #20]
 800c55a:	6800      	ldr	r0, [r0, #0]
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	a902      	add	r1, sp, #8
 800c560:	f001 faa4 	bl	800daac <_svfiprintf_r>
 800c564:	9b02      	ldr	r3, [sp, #8]
 800c566:	2200      	movs	r2, #0
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	b01c      	add	sp, #112	; 0x70
 800c56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c570:	b003      	add	sp, #12
 800c572:	4770      	bx	lr
 800c574:	20000c74 	.word	0x20000c74
 800c578:	ffff0208 	.word	0xffff0208

0800c57c <quorem>:
 800c57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	6903      	ldr	r3, [r0, #16]
 800c582:	690c      	ldr	r4, [r1, #16]
 800c584:	42a3      	cmp	r3, r4
 800c586:	4607      	mov	r7, r0
 800c588:	f2c0 8081 	blt.w	800c68e <quorem+0x112>
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f101 0814 	add.w	r8, r1, #20
 800c592:	f100 0514 	add.w	r5, r0, #20
 800c596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5b4:	d331      	bcc.n	800c61a <quorem+0x9e>
 800c5b6:	f04f 0e00 	mov.w	lr, #0
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	46ac      	mov	ip, r5
 800c5be:	46f2      	mov	sl, lr
 800c5c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5c4:	b293      	uxth	r3, r2
 800c5c6:	fb06 e303 	mla	r3, r6, r3, lr
 800c5ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	ebaa 0303 	sub.w	r3, sl, r3
 800c5d4:	0c12      	lsrs	r2, r2, #16
 800c5d6:	f8dc a000 	ldr.w	sl, [ip]
 800c5da:	fb06 e202 	mla	r2, r6, r2, lr
 800c5de:	fa13 f38a 	uxtah	r3, r3, sl
 800c5e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5e6:	fa1f fa82 	uxth.w	sl, r2
 800c5ea:	f8dc 2000 	ldr.w	r2, [ip]
 800c5ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c5f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5fc:	4581      	cmp	r9, r0
 800c5fe:	f84c 3b04 	str.w	r3, [ip], #4
 800c602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c606:	d2db      	bcs.n	800c5c0 <quorem+0x44>
 800c608:	f855 300b 	ldr.w	r3, [r5, fp]
 800c60c:	b92b      	cbnz	r3, 800c61a <quorem+0x9e>
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	3b04      	subs	r3, #4
 800c612:	429d      	cmp	r5, r3
 800c614:	461a      	mov	r2, r3
 800c616:	d32e      	bcc.n	800c676 <quorem+0xfa>
 800c618:	613c      	str	r4, [r7, #16]
 800c61a:	4638      	mov	r0, r7
 800c61c:	f001 f8b6 	bl	800d78c <__mcmp>
 800c620:	2800      	cmp	r0, #0
 800c622:	db24      	blt.n	800c66e <quorem+0xf2>
 800c624:	3601      	adds	r6, #1
 800c626:	4628      	mov	r0, r5
 800c628:	f04f 0c00 	mov.w	ip, #0
 800c62c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c630:	f8d0 e000 	ldr.w	lr, [r0]
 800c634:	b293      	uxth	r3, r2
 800c636:	ebac 0303 	sub.w	r3, ip, r3
 800c63a:	0c12      	lsrs	r2, r2, #16
 800c63c:	fa13 f38e 	uxtah	r3, r3, lr
 800c640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c648:	b29b      	uxth	r3, r3
 800c64a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c64e:	45c1      	cmp	r9, r8
 800c650:	f840 3b04 	str.w	r3, [r0], #4
 800c654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c658:	d2e8      	bcs.n	800c62c <quorem+0xb0>
 800c65a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c662:	b922      	cbnz	r2, 800c66e <quorem+0xf2>
 800c664:	3b04      	subs	r3, #4
 800c666:	429d      	cmp	r5, r3
 800c668:	461a      	mov	r2, r3
 800c66a:	d30a      	bcc.n	800c682 <quorem+0x106>
 800c66c:	613c      	str	r4, [r7, #16]
 800c66e:	4630      	mov	r0, r6
 800c670:	b003      	add	sp, #12
 800c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c676:	6812      	ldr	r2, [r2, #0]
 800c678:	3b04      	subs	r3, #4
 800c67a:	2a00      	cmp	r2, #0
 800c67c:	d1cc      	bne.n	800c618 <quorem+0x9c>
 800c67e:	3c01      	subs	r4, #1
 800c680:	e7c7      	b.n	800c612 <quorem+0x96>
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	3b04      	subs	r3, #4
 800c686:	2a00      	cmp	r2, #0
 800c688:	d1f0      	bne.n	800c66c <quorem+0xf0>
 800c68a:	3c01      	subs	r4, #1
 800c68c:	e7eb      	b.n	800c666 <quorem+0xea>
 800c68e:	2000      	movs	r0, #0
 800c690:	e7ee      	b.n	800c670 <quorem+0xf4>
 800c692:	0000      	movs	r0, r0
 800c694:	0000      	movs	r0, r0
	...

0800c698 <_dtoa_r>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	ed2d 8b02 	vpush	{d8}
 800c6a0:	ec57 6b10 	vmov	r6, r7, d0
 800c6a4:	b095      	sub	sp, #84	; 0x54
 800c6a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6ac:	9105      	str	r1, [sp, #20]
 800c6ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6b8:	b975      	cbnz	r5, 800c6d8 <_dtoa_r+0x40>
 800c6ba:	2010      	movs	r0, #16
 800c6bc:	f7ff f9da 	bl	800ba74 <malloc>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	6260      	str	r0, [r4, #36]	; 0x24
 800c6c4:	b920      	cbnz	r0, 800c6d0 <_dtoa_r+0x38>
 800c6c6:	4bb2      	ldr	r3, [pc, #712]	; (800c990 <_dtoa_r+0x2f8>)
 800c6c8:	21ea      	movs	r1, #234	; 0xea
 800c6ca:	48b2      	ldr	r0, [pc, #712]	; (800c994 <_dtoa_r+0x2fc>)
 800c6cc:	f001 faee 	bl	800dcac <__assert_func>
 800c6d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c6d4:	6005      	str	r5, [r0, #0]
 800c6d6:	60c5      	str	r5, [r0, #12]
 800c6d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6da:	6819      	ldr	r1, [r3, #0]
 800c6dc:	b151      	cbz	r1, 800c6f4 <_dtoa_r+0x5c>
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	604a      	str	r2, [r1, #4]
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4093      	lsls	r3, r2
 800c6e6:	608b      	str	r3, [r1, #8]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 fe11 	bl	800d310 <_Bfree>
 800c6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	601a      	str	r2, [r3, #0]
 800c6f4:	1e3b      	subs	r3, r7, #0
 800c6f6:	bfb9      	ittee	lt
 800c6f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c6fc:	9303      	strlt	r3, [sp, #12]
 800c6fe:	2300      	movge	r3, #0
 800c700:	f8c8 3000 	strge.w	r3, [r8]
 800c704:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c708:	4ba3      	ldr	r3, [pc, #652]	; (800c998 <_dtoa_r+0x300>)
 800c70a:	bfbc      	itt	lt
 800c70c:	2201      	movlt	r2, #1
 800c70e:	f8c8 2000 	strlt.w	r2, [r8]
 800c712:	ea33 0309 	bics.w	r3, r3, r9
 800c716:	d11b      	bne.n	800c750 <_dtoa_r+0xb8>
 800c718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c71a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c724:	4333      	orrs	r3, r6
 800c726:	f000 857a 	beq.w	800d21e <_dtoa_r+0xb86>
 800c72a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c72c:	b963      	cbnz	r3, 800c748 <_dtoa_r+0xb0>
 800c72e:	4b9b      	ldr	r3, [pc, #620]	; (800c99c <_dtoa_r+0x304>)
 800c730:	e024      	b.n	800c77c <_dtoa_r+0xe4>
 800c732:	4b9b      	ldr	r3, [pc, #620]	; (800c9a0 <_dtoa_r+0x308>)
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	3308      	adds	r3, #8
 800c738:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c73a:	6013      	str	r3, [r2, #0]
 800c73c:	9800      	ldr	r0, [sp, #0]
 800c73e:	b015      	add	sp, #84	; 0x54
 800c740:	ecbd 8b02 	vpop	{d8}
 800c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	4b94      	ldr	r3, [pc, #592]	; (800c99c <_dtoa_r+0x304>)
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	3303      	adds	r3, #3
 800c74e:	e7f3      	b.n	800c738 <_dtoa_r+0xa0>
 800c750:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c754:	2200      	movs	r2, #0
 800c756:	ec51 0b17 	vmov	r0, r1, d7
 800c75a:	2300      	movs	r3, #0
 800c75c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c760:	f7f4 f9ba 	bl	8000ad8 <__aeabi_dcmpeq>
 800c764:	4680      	mov	r8, r0
 800c766:	b158      	cbz	r0, 800c780 <_dtoa_r+0xe8>
 800c768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c76a:	2301      	movs	r3, #1
 800c76c:	6013      	str	r3, [r2, #0]
 800c76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 8551 	beq.w	800d218 <_dtoa_r+0xb80>
 800c776:	488b      	ldr	r0, [pc, #556]	; (800c9a4 <_dtoa_r+0x30c>)
 800c778:	6018      	str	r0, [r3, #0]
 800c77a:	1e43      	subs	r3, r0, #1
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	e7dd      	b.n	800c73c <_dtoa_r+0xa4>
 800c780:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c784:	aa12      	add	r2, sp, #72	; 0x48
 800c786:	a913      	add	r1, sp, #76	; 0x4c
 800c788:	4620      	mov	r0, r4
 800c78a:	f001 f8a3 	bl	800d8d4 <__d2b>
 800c78e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c792:	4683      	mov	fp, r0
 800c794:	2d00      	cmp	r5, #0
 800c796:	d07c      	beq.n	800c892 <_dtoa_r+0x1fa>
 800c798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c79a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c79e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c7a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c7aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c7ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7b2:	4b7d      	ldr	r3, [pc, #500]	; (800c9a8 <_dtoa_r+0x310>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	f7f3 fd6d 	bl	8000298 <__aeabi_dsub>
 800c7be:	a36e      	add	r3, pc, #440	; (adr r3, 800c978 <_dtoa_r+0x2e0>)
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f3 ff20 	bl	8000608 <__aeabi_dmul>
 800c7c8:	a36d      	add	r3, pc, #436	; (adr r3, 800c980 <_dtoa_r+0x2e8>)
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	f7f3 fd65 	bl	800029c <__adddf3>
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	460f      	mov	r7, r1
 800c7d8:	f7f3 feac 	bl	8000534 <__aeabi_i2d>
 800c7dc:	a36a      	add	r3, pc, #424	; (adr r3, 800c988 <_dtoa_r+0x2f0>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	f7f3 ff11 	bl	8000608 <__aeabi_dmul>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	4639      	mov	r1, r7
 800c7ee:	f7f3 fd55 	bl	800029c <__adddf3>
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	460f      	mov	r7, r1
 800c7f6:	f7f4 f9b7 	bl	8000b68 <__aeabi_d2iz>
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	4682      	mov	sl, r0
 800c7fe:	2300      	movs	r3, #0
 800c800:	4630      	mov	r0, r6
 800c802:	4639      	mov	r1, r7
 800c804:	f7f4 f972 	bl	8000aec <__aeabi_dcmplt>
 800c808:	b148      	cbz	r0, 800c81e <_dtoa_r+0x186>
 800c80a:	4650      	mov	r0, sl
 800c80c:	f7f3 fe92 	bl	8000534 <__aeabi_i2d>
 800c810:	4632      	mov	r2, r6
 800c812:	463b      	mov	r3, r7
 800c814:	f7f4 f960 	bl	8000ad8 <__aeabi_dcmpeq>
 800c818:	b908      	cbnz	r0, 800c81e <_dtoa_r+0x186>
 800c81a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c81e:	f1ba 0f16 	cmp.w	sl, #22
 800c822:	d854      	bhi.n	800c8ce <_dtoa_r+0x236>
 800c824:	4b61      	ldr	r3, [pc, #388]	; (800c9ac <_dtoa_r+0x314>)
 800c826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c832:	f7f4 f95b 	bl	8000aec <__aeabi_dcmplt>
 800c836:	2800      	cmp	r0, #0
 800c838:	d04b      	beq.n	800c8d2 <_dtoa_r+0x23a>
 800c83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c83e:	2300      	movs	r3, #0
 800c840:	930e      	str	r3, [sp, #56]	; 0x38
 800c842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c844:	1b5d      	subs	r5, r3, r5
 800c846:	1e6b      	subs	r3, r5, #1
 800c848:	9304      	str	r3, [sp, #16]
 800c84a:	bf43      	ittte	mi
 800c84c:	2300      	movmi	r3, #0
 800c84e:	f1c5 0801 	rsbmi	r8, r5, #1
 800c852:	9304      	strmi	r3, [sp, #16]
 800c854:	f04f 0800 	movpl.w	r8, #0
 800c858:	f1ba 0f00 	cmp.w	sl, #0
 800c85c:	db3b      	blt.n	800c8d6 <_dtoa_r+0x23e>
 800c85e:	9b04      	ldr	r3, [sp, #16]
 800c860:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c864:	4453      	add	r3, sl
 800c866:	9304      	str	r3, [sp, #16]
 800c868:	2300      	movs	r3, #0
 800c86a:	9306      	str	r3, [sp, #24]
 800c86c:	9b05      	ldr	r3, [sp, #20]
 800c86e:	2b09      	cmp	r3, #9
 800c870:	d869      	bhi.n	800c946 <_dtoa_r+0x2ae>
 800c872:	2b05      	cmp	r3, #5
 800c874:	bfc4      	itt	gt
 800c876:	3b04      	subgt	r3, #4
 800c878:	9305      	strgt	r3, [sp, #20]
 800c87a:	9b05      	ldr	r3, [sp, #20]
 800c87c:	f1a3 0302 	sub.w	r3, r3, #2
 800c880:	bfcc      	ite	gt
 800c882:	2500      	movgt	r5, #0
 800c884:	2501      	movle	r5, #1
 800c886:	2b03      	cmp	r3, #3
 800c888:	d869      	bhi.n	800c95e <_dtoa_r+0x2c6>
 800c88a:	e8df f003 	tbb	[pc, r3]
 800c88e:	4e2c      	.short	0x4e2c
 800c890:	5a4c      	.short	0x5a4c
 800c892:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c896:	441d      	add	r5, r3
 800c898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c89c:	2b20      	cmp	r3, #32
 800c89e:	bfc1      	itttt	gt
 800c8a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c8a8:	fa09 f303 	lslgt.w	r3, r9, r3
 800c8ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8b0:	bfda      	itte	le
 800c8b2:	f1c3 0320 	rsble	r3, r3, #32
 800c8b6:	fa06 f003 	lslle.w	r0, r6, r3
 800c8ba:	4318      	orrgt	r0, r3
 800c8bc:	f7f3 fe2a 	bl	8000514 <__aeabi_ui2d>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c8c8:	3d01      	subs	r5, #1
 800c8ca:	9310      	str	r3, [sp, #64]	; 0x40
 800c8cc:	e771      	b.n	800c7b2 <_dtoa_r+0x11a>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e7b6      	b.n	800c840 <_dtoa_r+0x1a8>
 800c8d2:	900e      	str	r0, [sp, #56]	; 0x38
 800c8d4:	e7b5      	b.n	800c842 <_dtoa_r+0x1aa>
 800c8d6:	f1ca 0300 	rsb	r3, sl, #0
 800c8da:	9306      	str	r3, [sp, #24]
 800c8dc:	2300      	movs	r3, #0
 800c8de:	eba8 080a 	sub.w	r8, r8, sl
 800c8e2:	930d      	str	r3, [sp, #52]	; 0x34
 800c8e4:	e7c2      	b.n	800c86c <_dtoa_r+0x1d4>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	9308      	str	r3, [sp, #32]
 800c8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dc39      	bgt.n	800c964 <_dtoa_r+0x2cc>
 800c8f0:	f04f 0901 	mov.w	r9, #1
 800c8f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8f8:	464b      	mov	r3, r9
 800c8fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c8fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c900:	2200      	movs	r2, #0
 800c902:	6042      	str	r2, [r0, #4]
 800c904:	2204      	movs	r2, #4
 800c906:	f102 0614 	add.w	r6, r2, #20
 800c90a:	429e      	cmp	r6, r3
 800c90c:	6841      	ldr	r1, [r0, #4]
 800c90e:	d92f      	bls.n	800c970 <_dtoa_r+0x2d8>
 800c910:	4620      	mov	r0, r4
 800c912:	f000 fcbd 	bl	800d290 <_Balloc>
 800c916:	9000      	str	r0, [sp, #0]
 800c918:	2800      	cmp	r0, #0
 800c91a:	d14b      	bne.n	800c9b4 <_dtoa_r+0x31c>
 800c91c:	4b24      	ldr	r3, [pc, #144]	; (800c9b0 <_dtoa_r+0x318>)
 800c91e:	4602      	mov	r2, r0
 800c920:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c924:	e6d1      	b.n	800c6ca <_dtoa_r+0x32>
 800c926:	2301      	movs	r3, #1
 800c928:	e7de      	b.n	800c8e8 <_dtoa_r+0x250>
 800c92a:	2300      	movs	r3, #0
 800c92c:	9308      	str	r3, [sp, #32]
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	eb0a 0903 	add.w	r9, sl, r3
 800c934:	f109 0301 	add.w	r3, r9, #1
 800c938:	2b01      	cmp	r3, #1
 800c93a:	9301      	str	r3, [sp, #4]
 800c93c:	bfb8      	it	lt
 800c93e:	2301      	movlt	r3, #1
 800c940:	e7dd      	b.n	800c8fe <_dtoa_r+0x266>
 800c942:	2301      	movs	r3, #1
 800c944:	e7f2      	b.n	800c92c <_dtoa_r+0x294>
 800c946:	2501      	movs	r5, #1
 800c948:	2300      	movs	r3, #0
 800c94a:	9305      	str	r3, [sp, #20]
 800c94c:	9508      	str	r5, [sp, #32]
 800c94e:	f04f 39ff 	mov.w	r9, #4294967295
 800c952:	2200      	movs	r2, #0
 800c954:	f8cd 9004 	str.w	r9, [sp, #4]
 800c958:	2312      	movs	r3, #18
 800c95a:	9209      	str	r2, [sp, #36]	; 0x24
 800c95c:	e7cf      	b.n	800c8fe <_dtoa_r+0x266>
 800c95e:	2301      	movs	r3, #1
 800c960:	9308      	str	r3, [sp, #32]
 800c962:	e7f4      	b.n	800c94e <_dtoa_r+0x2b6>
 800c964:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c968:	f8cd 9004 	str.w	r9, [sp, #4]
 800c96c:	464b      	mov	r3, r9
 800c96e:	e7c6      	b.n	800c8fe <_dtoa_r+0x266>
 800c970:	3101      	adds	r1, #1
 800c972:	6041      	str	r1, [r0, #4]
 800c974:	0052      	lsls	r2, r2, #1
 800c976:	e7c6      	b.n	800c906 <_dtoa_r+0x26e>
 800c978:	636f4361 	.word	0x636f4361
 800c97c:	3fd287a7 	.word	0x3fd287a7
 800c980:	8b60c8b3 	.word	0x8b60c8b3
 800c984:	3fc68a28 	.word	0x3fc68a28
 800c988:	509f79fb 	.word	0x509f79fb
 800c98c:	3fd34413 	.word	0x3fd34413
 800c990:	08019961 	.word	0x08019961
 800c994:	08019978 	.word	0x08019978
 800c998:	7ff00000 	.word	0x7ff00000
 800c99c:	0801995d 	.word	0x0801995d
 800c9a0:	08019954 	.word	0x08019954
 800c9a4:	08019931 	.word	0x08019931
 800c9a8:	3ff80000 	.word	0x3ff80000
 800c9ac:	08019a70 	.word	0x08019a70
 800c9b0:	080199d7 	.word	0x080199d7
 800c9b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9b6:	9a00      	ldr	r2, [sp, #0]
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	9b01      	ldr	r3, [sp, #4]
 800c9bc:	2b0e      	cmp	r3, #14
 800c9be:	f200 80ad 	bhi.w	800cb1c <_dtoa_r+0x484>
 800c9c2:	2d00      	cmp	r5, #0
 800c9c4:	f000 80aa 	beq.w	800cb1c <_dtoa_r+0x484>
 800c9c8:	f1ba 0f00 	cmp.w	sl, #0
 800c9cc:	dd36      	ble.n	800ca3c <_dtoa_r+0x3a4>
 800c9ce:	4ac3      	ldr	r2, [pc, #780]	; (800ccdc <_dtoa_r+0x644>)
 800c9d0:	f00a 030f 	and.w	r3, sl, #15
 800c9d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9d8:	ed93 7b00 	vldr	d7, [r3]
 800c9dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c9e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c9e4:	eeb0 8a47 	vmov.f32	s16, s14
 800c9e8:	eef0 8a67 	vmov.f32	s17, s15
 800c9ec:	d016      	beq.n	800ca1c <_dtoa_r+0x384>
 800c9ee:	4bbc      	ldr	r3, [pc, #752]	; (800cce0 <_dtoa_r+0x648>)
 800c9f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c9f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9f8:	f7f3 ff30 	bl	800085c <__aeabi_ddiv>
 800c9fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca00:	f007 070f 	and.w	r7, r7, #15
 800ca04:	2503      	movs	r5, #3
 800ca06:	4eb6      	ldr	r6, [pc, #728]	; (800cce0 <_dtoa_r+0x648>)
 800ca08:	b957      	cbnz	r7, 800ca20 <_dtoa_r+0x388>
 800ca0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca0e:	ec53 2b18 	vmov	r2, r3, d8
 800ca12:	f7f3 ff23 	bl	800085c <__aeabi_ddiv>
 800ca16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca1a:	e029      	b.n	800ca70 <_dtoa_r+0x3d8>
 800ca1c:	2502      	movs	r5, #2
 800ca1e:	e7f2      	b.n	800ca06 <_dtoa_r+0x36e>
 800ca20:	07f9      	lsls	r1, r7, #31
 800ca22:	d508      	bpl.n	800ca36 <_dtoa_r+0x39e>
 800ca24:	ec51 0b18 	vmov	r0, r1, d8
 800ca28:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca2c:	f7f3 fdec 	bl	8000608 <__aeabi_dmul>
 800ca30:	ec41 0b18 	vmov	d8, r0, r1
 800ca34:	3501      	adds	r5, #1
 800ca36:	107f      	asrs	r7, r7, #1
 800ca38:	3608      	adds	r6, #8
 800ca3a:	e7e5      	b.n	800ca08 <_dtoa_r+0x370>
 800ca3c:	f000 80a6 	beq.w	800cb8c <_dtoa_r+0x4f4>
 800ca40:	f1ca 0600 	rsb	r6, sl, #0
 800ca44:	4ba5      	ldr	r3, [pc, #660]	; (800ccdc <_dtoa_r+0x644>)
 800ca46:	4fa6      	ldr	r7, [pc, #664]	; (800cce0 <_dtoa_r+0x648>)
 800ca48:	f006 020f 	and.w	r2, r6, #15
 800ca4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca58:	f7f3 fdd6 	bl	8000608 <__aeabi_dmul>
 800ca5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca60:	1136      	asrs	r6, r6, #4
 800ca62:	2300      	movs	r3, #0
 800ca64:	2502      	movs	r5, #2
 800ca66:	2e00      	cmp	r6, #0
 800ca68:	f040 8085 	bne.w	800cb76 <_dtoa_r+0x4de>
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1d2      	bne.n	800ca16 <_dtoa_r+0x37e>
 800ca70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 808c 	beq.w	800cb90 <_dtoa_r+0x4f8>
 800ca78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca7c:	4b99      	ldr	r3, [pc, #612]	; (800cce4 <_dtoa_r+0x64c>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f4 f832 	bl	8000aec <__aeabi_dcmplt>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	f000 8081 	beq.w	800cb90 <_dtoa_r+0x4f8>
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d07d      	beq.n	800cb90 <_dtoa_r+0x4f8>
 800ca94:	f1b9 0f00 	cmp.w	r9, #0
 800ca98:	dd3c      	ble.n	800cb14 <_dtoa_r+0x47c>
 800ca9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ca9e:	9307      	str	r3, [sp, #28]
 800caa0:	2200      	movs	r2, #0
 800caa2:	4b91      	ldr	r3, [pc, #580]	; (800cce8 <_dtoa_r+0x650>)
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 fdae 	bl	8000608 <__aeabi_dmul>
 800caac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cab0:	3501      	adds	r5, #1
 800cab2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cab6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800caba:	4628      	mov	r0, r5
 800cabc:	f7f3 fd3a 	bl	8000534 <__aeabi_i2d>
 800cac0:	4632      	mov	r2, r6
 800cac2:	463b      	mov	r3, r7
 800cac4:	f7f3 fda0 	bl	8000608 <__aeabi_dmul>
 800cac8:	4b88      	ldr	r3, [pc, #544]	; (800ccec <_dtoa_r+0x654>)
 800caca:	2200      	movs	r2, #0
 800cacc:	f7f3 fbe6 	bl	800029c <__adddf3>
 800cad0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cad8:	9303      	str	r3, [sp, #12]
 800cada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d15c      	bne.n	800cb9a <_dtoa_r+0x502>
 800cae0:	4b83      	ldr	r3, [pc, #524]	; (800ccf0 <_dtoa_r+0x658>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	4630      	mov	r0, r6
 800cae6:	4639      	mov	r1, r7
 800cae8:	f7f3 fbd6 	bl	8000298 <__aeabi_dsub>
 800caec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caf0:	4606      	mov	r6, r0
 800caf2:	460f      	mov	r7, r1
 800caf4:	f7f4 f818 	bl	8000b28 <__aeabi_dcmpgt>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	f040 8296 	bne.w	800d02a <_dtoa_r+0x992>
 800cafe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cb02:	4630      	mov	r0, r6
 800cb04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb08:	4639      	mov	r1, r7
 800cb0a:	f7f3 ffef 	bl	8000aec <__aeabi_dcmplt>
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	f040 8288 	bne.w	800d024 <_dtoa_r+0x98c>
 800cb14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f2c0 8158 	blt.w	800cdd4 <_dtoa_r+0x73c>
 800cb24:	f1ba 0f0e 	cmp.w	sl, #14
 800cb28:	f300 8154 	bgt.w	800cdd4 <_dtoa_r+0x73c>
 800cb2c:	4b6b      	ldr	r3, [pc, #428]	; (800ccdc <_dtoa_r+0x644>)
 800cb2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb32:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f280 80e3 	bge.w	800cd04 <_dtoa_r+0x66c>
 800cb3e:	9b01      	ldr	r3, [sp, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f300 80df 	bgt.w	800cd04 <_dtoa_r+0x66c>
 800cb46:	f040 826d 	bne.w	800d024 <_dtoa_r+0x98c>
 800cb4a:	4b69      	ldr	r3, [pc, #420]	; (800ccf0 <_dtoa_r+0x658>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4649      	mov	r1, r9
 800cb52:	f7f3 fd59 	bl	8000608 <__aeabi_dmul>
 800cb56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb5a:	f7f3 ffdb 	bl	8000b14 <__aeabi_dcmpge>
 800cb5e:	9e01      	ldr	r6, [sp, #4]
 800cb60:	4637      	mov	r7, r6
 800cb62:	2800      	cmp	r0, #0
 800cb64:	f040 8243 	bne.w	800cfee <_dtoa_r+0x956>
 800cb68:	9d00      	ldr	r5, [sp, #0]
 800cb6a:	2331      	movs	r3, #49	; 0x31
 800cb6c:	f805 3b01 	strb.w	r3, [r5], #1
 800cb70:	f10a 0a01 	add.w	sl, sl, #1
 800cb74:	e23f      	b.n	800cff6 <_dtoa_r+0x95e>
 800cb76:	07f2      	lsls	r2, r6, #31
 800cb78:	d505      	bpl.n	800cb86 <_dtoa_r+0x4ee>
 800cb7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb7e:	f7f3 fd43 	bl	8000608 <__aeabi_dmul>
 800cb82:	3501      	adds	r5, #1
 800cb84:	2301      	movs	r3, #1
 800cb86:	1076      	asrs	r6, r6, #1
 800cb88:	3708      	adds	r7, #8
 800cb8a:	e76c      	b.n	800ca66 <_dtoa_r+0x3ce>
 800cb8c:	2502      	movs	r5, #2
 800cb8e:	e76f      	b.n	800ca70 <_dtoa_r+0x3d8>
 800cb90:	9b01      	ldr	r3, [sp, #4]
 800cb92:	f8cd a01c 	str.w	sl, [sp, #28]
 800cb96:	930c      	str	r3, [sp, #48]	; 0x30
 800cb98:	e78d      	b.n	800cab6 <_dtoa_r+0x41e>
 800cb9a:	9900      	ldr	r1, [sp, #0]
 800cb9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cb9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cba0:	4b4e      	ldr	r3, [pc, #312]	; (800ccdc <_dtoa_r+0x644>)
 800cba2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cba6:	4401      	add	r1, r0
 800cba8:	9102      	str	r1, [sp, #8]
 800cbaa:	9908      	ldr	r1, [sp, #32]
 800cbac:	eeb0 8a47 	vmov.f32	s16, s14
 800cbb0:	eef0 8a67 	vmov.f32	s17, s15
 800cbb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	d045      	beq.n	800cc4c <_dtoa_r+0x5b4>
 800cbc0:	494c      	ldr	r1, [pc, #304]	; (800ccf4 <_dtoa_r+0x65c>)
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	f7f3 fe4a 	bl	800085c <__aeabi_ddiv>
 800cbc8:	ec53 2b18 	vmov	r2, r3, d8
 800cbcc:	f7f3 fb64 	bl	8000298 <__aeabi_dsub>
 800cbd0:	9d00      	ldr	r5, [sp, #0]
 800cbd2:	ec41 0b18 	vmov	d8, r0, r1
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f7f3 ffc5 	bl	8000b68 <__aeabi_d2iz>
 800cbde:	900c      	str	r0, [sp, #48]	; 0x30
 800cbe0:	f7f3 fca8 	bl	8000534 <__aeabi_i2d>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4630      	mov	r0, r6
 800cbea:	4639      	mov	r1, r7
 800cbec:	f7f3 fb54 	bl	8000298 <__aeabi_dsub>
 800cbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbf2:	3330      	adds	r3, #48	; 0x30
 800cbf4:	f805 3b01 	strb.w	r3, [r5], #1
 800cbf8:	ec53 2b18 	vmov	r2, r3, d8
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	460f      	mov	r7, r1
 800cc00:	f7f3 ff74 	bl	8000aec <__aeabi_dcmplt>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d165      	bne.n	800ccd4 <_dtoa_r+0x63c>
 800cc08:	4632      	mov	r2, r6
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	4935      	ldr	r1, [pc, #212]	; (800cce4 <_dtoa_r+0x64c>)
 800cc0e:	2000      	movs	r0, #0
 800cc10:	f7f3 fb42 	bl	8000298 <__aeabi_dsub>
 800cc14:	ec53 2b18 	vmov	r2, r3, d8
 800cc18:	f7f3 ff68 	bl	8000aec <__aeabi_dcmplt>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	f040 80b9 	bne.w	800cd94 <_dtoa_r+0x6fc>
 800cc22:	9b02      	ldr	r3, [sp, #8]
 800cc24:	429d      	cmp	r5, r3
 800cc26:	f43f af75 	beq.w	800cb14 <_dtoa_r+0x47c>
 800cc2a:	4b2f      	ldr	r3, [pc, #188]	; (800cce8 <_dtoa_r+0x650>)
 800cc2c:	ec51 0b18 	vmov	r0, r1, d8
 800cc30:	2200      	movs	r2, #0
 800cc32:	f7f3 fce9 	bl	8000608 <__aeabi_dmul>
 800cc36:	4b2c      	ldr	r3, [pc, #176]	; (800cce8 <_dtoa_r+0x650>)
 800cc38:	ec41 0b18 	vmov	d8, r0, r1
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	4630      	mov	r0, r6
 800cc40:	4639      	mov	r1, r7
 800cc42:	f7f3 fce1 	bl	8000608 <__aeabi_dmul>
 800cc46:	4606      	mov	r6, r0
 800cc48:	460f      	mov	r7, r1
 800cc4a:	e7c4      	b.n	800cbd6 <_dtoa_r+0x53e>
 800cc4c:	ec51 0b17 	vmov	r0, r1, d7
 800cc50:	f7f3 fcda 	bl	8000608 <__aeabi_dmul>
 800cc54:	9b02      	ldr	r3, [sp, #8]
 800cc56:	9d00      	ldr	r5, [sp, #0]
 800cc58:	930c      	str	r3, [sp, #48]	; 0x30
 800cc5a:	ec41 0b18 	vmov	d8, r0, r1
 800cc5e:	4639      	mov	r1, r7
 800cc60:	4630      	mov	r0, r6
 800cc62:	f7f3 ff81 	bl	8000b68 <__aeabi_d2iz>
 800cc66:	9011      	str	r0, [sp, #68]	; 0x44
 800cc68:	f7f3 fc64 	bl	8000534 <__aeabi_i2d>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4630      	mov	r0, r6
 800cc72:	4639      	mov	r1, r7
 800cc74:	f7f3 fb10 	bl	8000298 <__aeabi_dsub>
 800cc78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc7a:	3330      	adds	r3, #48	; 0x30
 800cc7c:	f805 3b01 	strb.w	r3, [r5], #1
 800cc80:	9b02      	ldr	r3, [sp, #8]
 800cc82:	429d      	cmp	r5, r3
 800cc84:	4606      	mov	r6, r0
 800cc86:	460f      	mov	r7, r1
 800cc88:	f04f 0200 	mov.w	r2, #0
 800cc8c:	d134      	bne.n	800ccf8 <_dtoa_r+0x660>
 800cc8e:	4b19      	ldr	r3, [pc, #100]	; (800ccf4 <_dtoa_r+0x65c>)
 800cc90:	ec51 0b18 	vmov	r0, r1, d8
 800cc94:	f7f3 fb02 	bl	800029c <__adddf3>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	f7f3 ff42 	bl	8000b28 <__aeabi_dcmpgt>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	d175      	bne.n	800cd94 <_dtoa_r+0x6fc>
 800cca8:	ec53 2b18 	vmov	r2, r3, d8
 800ccac:	4911      	ldr	r1, [pc, #68]	; (800ccf4 <_dtoa_r+0x65c>)
 800ccae:	2000      	movs	r0, #0
 800ccb0:	f7f3 faf2 	bl	8000298 <__aeabi_dsub>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f7f3 ff16 	bl	8000aec <__aeabi_dcmplt>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	f43f af27 	beq.w	800cb14 <_dtoa_r+0x47c>
 800ccc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ccc8:	1e6b      	subs	r3, r5, #1
 800ccca:	930c      	str	r3, [sp, #48]	; 0x30
 800cccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccd0:	2b30      	cmp	r3, #48	; 0x30
 800ccd2:	d0f8      	beq.n	800ccc6 <_dtoa_r+0x62e>
 800ccd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ccd8:	e04a      	b.n	800cd70 <_dtoa_r+0x6d8>
 800ccda:	bf00      	nop
 800ccdc:	08019a70 	.word	0x08019a70
 800cce0:	08019a48 	.word	0x08019a48
 800cce4:	3ff00000 	.word	0x3ff00000
 800cce8:	40240000 	.word	0x40240000
 800ccec:	401c0000 	.word	0x401c0000
 800ccf0:	40140000 	.word	0x40140000
 800ccf4:	3fe00000 	.word	0x3fe00000
 800ccf8:	4baf      	ldr	r3, [pc, #700]	; (800cfb8 <_dtoa_r+0x920>)
 800ccfa:	f7f3 fc85 	bl	8000608 <__aeabi_dmul>
 800ccfe:	4606      	mov	r6, r0
 800cd00:	460f      	mov	r7, r1
 800cd02:	e7ac      	b.n	800cc5e <_dtoa_r+0x5c6>
 800cd04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd08:	9d00      	ldr	r5, [sp, #0]
 800cd0a:	4642      	mov	r2, r8
 800cd0c:	464b      	mov	r3, r9
 800cd0e:	4630      	mov	r0, r6
 800cd10:	4639      	mov	r1, r7
 800cd12:	f7f3 fda3 	bl	800085c <__aeabi_ddiv>
 800cd16:	f7f3 ff27 	bl	8000b68 <__aeabi_d2iz>
 800cd1a:	9002      	str	r0, [sp, #8]
 800cd1c:	f7f3 fc0a 	bl	8000534 <__aeabi_i2d>
 800cd20:	4642      	mov	r2, r8
 800cd22:	464b      	mov	r3, r9
 800cd24:	f7f3 fc70 	bl	8000608 <__aeabi_dmul>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	4639      	mov	r1, r7
 800cd30:	f7f3 fab2 	bl	8000298 <__aeabi_dsub>
 800cd34:	9e02      	ldr	r6, [sp, #8]
 800cd36:	9f01      	ldr	r7, [sp, #4]
 800cd38:	3630      	adds	r6, #48	; 0x30
 800cd3a:	f805 6b01 	strb.w	r6, [r5], #1
 800cd3e:	9e00      	ldr	r6, [sp, #0]
 800cd40:	1bae      	subs	r6, r5, r6
 800cd42:	42b7      	cmp	r7, r6
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	d137      	bne.n	800cdba <_dtoa_r+0x722>
 800cd4a:	f7f3 faa7 	bl	800029c <__adddf3>
 800cd4e:	4642      	mov	r2, r8
 800cd50:	464b      	mov	r3, r9
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	f7f3 fee7 	bl	8000b28 <__aeabi_dcmpgt>
 800cd5a:	b9c8      	cbnz	r0, 800cd90 <_dtoa_r+0x6f8>
 800cd5c:	4642      	mov	r2, r8
 800cd5e:	464b      	mov	r3, r9
 800cd60:	4630      	mov	r0, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd68:	b110      	cbz	r0, 800cd70 <_dtoa_r+0x6d8>
 800cd6a:	9b02      	ldr	r3, [sp, #8]
 800cd6c:	07d9      	lsls	r1, r3, #31
 800cd6e:	d40f      	bmi.n	800cd90 <_dtoa_r+0x6f8>
 800cd70:	4620      	mov	r0, r4
 800cd72:	4659      	mov	r1, fp
 800cd74:	f000 facc 	bl	800d310 <_Bfree>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	702b      	strb	r3, [r5, #0]
 800cd7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd7e:	f10a 0001 	add.w	r0, sl, #1
 800cd82:	6018      	str	r0, [r3, #0]
 800cd84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f43f acd8 	beq.w	800c73c <_dtoa_r+0xa4>
 800cd8c:	601d      	str	r5, [r3, #0]
 800cd8e:	e4d5      	b.n	800c73c <_dtoa_r+0xa4>
 800cd90:	f8cd a01c 	str.w	sl, [sp, #28]
 800cd94:	462b      	mov	r3, r5
 800cd96:	461d      	mov	r5, r3
 800cd98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd9c:	2a39      	cmp	r2, #57	; 0x39
 800cd9e:	d108      	bne.n	800cdb2 <_dtoa_r+0x71a>
 800cda0:	9a00      	ldr	r2, [sp, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d1f7      	bne.n	800cd96 <_dtoa_r+0x6fe>
 800cda6:	9a07      	ldr	r2, [sp, #28]
 800cda8:	9900      	ldr	r1, [sp, #0]
 800cdaa:	3201      	adds	r2, #1
 800cdac:	9207      	str	r2, [sp, #28]
 800cdae:	2230      	movs	r2, #48	; 0x30
 800cdb0:	700a      	strb	r2, [r1, #0]
 800cdb2:	781a      	ldrb	r2, [r3, #0]
 800cdb4:	3201      	adds	r2, #1
 800cdb6:	701a      	strb	r2, [r3, #0]
 800cdb8:	e78c      	b.n	800ccd4 <_dtoa_r+0x63c>
 800cdba:	4b7f      	ldr	r3, [pc, #508]	; (800cfb8 <_dtoa_r+0x920>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f7f3 fc23 	bl	8000608 <__aeabi_dmul>
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	460f      	mov	r7, r1
 800cdca:	f7f3 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d09b      	beq.n	800cd0a <_dtoa_r+0x672>
 800cdd2:	e7cd      	b.n	800cd70 <_dtoa_r+0x6d8>
 800cdd4:	9a08      	ldr	r2, [sp, #32]
 800cdd6:	2a00      	cmp	r2, #0
 800cdd8:	f000 80c4 	beq.w	800cf64 <_dtoa_r+0x8cc>
 800cddc:	9a05      	ldr	r2, [sp, #20]
 800cdde:	2a01      	cmp	r2, #1
 800cde0:	f300 80a8 	bgt.w	800cf34 <_dtoa_r+0x89c>
 800cde4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cde6:	2a00      	cmp	r2, #0
 800cde8:	f000 80a0 	beq.w	800cf2c <_dtoa_r+0x894>
 800cdec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdf0:	9e06      	ldr	r6, [sp, #24]
 800cdf2:	4645      	mov	r5, r8
 800cdf4:	9a04      	ldr	r2, [sp, #16]
 800cdf6:	2101      	movs	r1, #1
 800cdf8:	441a      	add	r2, r3
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	4498      	add	r8, r3
 800cdfe:	9204      	str	r2, [sp, #16]
 800ce00:	f000 fb42 	bl	800d488 <__i2b>
 800ce04:	4607      	mov	r7, r0
 800ce06:	2d00      	cmp	r5, #0
 800ce08:	dd0b      	ble.n	800ce22 <_dtoa_r+0x78a>
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	dd08      	ble.n	800ce22 <_dtoa_r+0x78a>
 800ce10:	42ab      	cmp	r3, r5
 800ce12:	9a04      	ldr	r2, [sp, #16]
 800ce14:	bfa8      	it	ge
 800ce16:	462b      	movge	r3, r5
 800ce18:	eba8 0803 	sub.w	r8, r8, r3
 800ce1c:	1aed      	subs	r5, r5, r3
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	9304      	str	r3, [sp, #16]
 800ce22:	9b06      	ldr	r3, [sp, #24]
 800ce24:	b1fb      	cbz	r3, 800ce66 <_dtoa_r+0x7ce>
 800ce26:	9b08      	ldr	r3, [sp, #32]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 809f 	beq.w	800cf6c <_dtoa_r+0x8d4>
 800ce2e:	2e00      	cmp	r6, #0
 800ce30:	dd11      	ble.n	800ce56 <_dtoa_r+0x7be>
 800ce32:	4639      	mov	r1, r7
 800ce34:	4632      	mov	r2, r6
 800ce36:	4620      	mov	r0, r4
 800ce38:	f000 fbe2 	bl	800d600 <__pow5mult>
 800ce3c:	465a      	mov	r2, fp
 800ce3e:	4601      	mov	r1, r0
 800ce40:	4607      	mov	r7, r0
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 fb36 	bl	800d4b4 <__multiply>
 800ce48:	4659      	mov	r1, fp
 800ce4a:	9007      	str	r0, [sp, #28]
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 fa5f 	bl	800d310 <_Bfree>
 800ce52:	9b07      	ldr	r3, [sp, #28]
 800ce54:	469b      	mov	fp, r3
 800ce56:	9b06      	ldr	r3, [sp, #24]
 800ce58:	1b9a      	subs	r2, r3, r6
 800ce5a:	d004      	beq.n	800ce66 <_dtoa_r+0x7ce>
 800ce5c:	4659      	mov	r1, fp
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 fbce 	bl	800d600 <__pow5mult>
 800ce64:	4683      	mov	fp, r0
 800ce66:	2101      	movs	r1, #1
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f000 fb0d 	bl	800d488 <__i2b>
 800ce6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	4606      	mov	r6, r0
 800ce74:	dd7c      	ble.n	800cf70 <_dtoa_r+0x8d8>
 800ce76:	461a      	mov	r2, r3
 800ce78:	4601      	mov	r1, r0
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 fbc0 	bl	800d600 <__pow5mult>
 800ce80:	9b05      	ldr	r3, [sp, #20]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	4606      	mov	r6, r0
 800ce86:	dd76      	ble.n	800cf76 <_dtoa_r+0x8de>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	9306      	str	r3, [sp, #24]
 800ce8c:	6933      	ldr	r3, [r6, #16]
 800ce8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce92:	6918      	ldr	r0, [r3, #16]
 800ce94:	f000 faa8 	bl	800d3e8 <__hi0bits>
 800ce98:	f1c0 0020 	rsb	r0, r0, #32
 800ce9c:	9b04      	ldr	r3, [sp, #16]
 800ce9e:	4418      	add	r0, r3
 800cea0:	f010 001f 	ands.w	r0, r0, #31
 800cea4:	f000 8086 	beq.w	800cfb4 <_dtoa_r+0x91c>
 800cea8:	f1c0 0320 	rsb	r3, r0, #32
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	dd7f      	ble.n	800cfb0 <_dtoa_r+0x918>
 800ceb0:	f1c0 001c 	rsb	r0, r0, #28
 800ceb4:	9b04      	ldr	r3, [sp, #16]
 800ceb6:	4403      	add	r3, r0
 800ceb8:	4480      	add	r8, r0
 800ceba:	4405      	add	r5, r0
 800cebc:	9304      	str	r3, [sp, #16]
 800cebe:	f1b8 0f00 	cmp.w	r8, #0
 800cec2:	dd05      	ble.n	800ced0 <_dtoa_r+0x838>
 800cec4:	4659      	mov	r1, fp
 800cec6:	4642      	mov	r2, r8
 800cec8:	4620      	mov	r0, r4
 800ceca:	f000 fbf3 	bl	800d6b4 <__lshift>
 800cece:	4683      	mov	fp, r0
 800ced0:	9b04      	ldr	r3, [sp, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dd05      	ble.n	800cee2 <_dtoa_r+0x84a>
 800ced6:	4631      	mov	r1, r6
 800ced8:	461a      	mov	r2, r3
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 fbea 	bl	800d6b4 <__lshift>
 800cee0:	4606      	mov	r6, r0
 800cee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d069      	beq.n	800cfbc <_dtoa_r+0x924>
 800cee8:	4631      	mov	r1, r6
 800ceea:	4658      	mov	r0, fp
 800ceec:	f000 fc4e 	bl	800d78c <__mcmp>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	da63      	bge.n	800cfbc <_dtoa_r+0x924>
 800cef4:	2300      	movs	r3, #0
 800cef6:	4659      	mov	r1, fp
 800cef8:	220a      	movs	r2, #10
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 fa2a 	bl	800d354 <__multadd>
 800cf00:	9b08      	ldr	r3, [sp, #32]
 800cf02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf06:	4683      	mov	fp, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 818f 	beq.w	800d22c <_dtoa_r+0xb94>
 800cf0e:	4639      	mov	r1, r7
 800cf10:	2300      	movs	r3, #0
 800cf12:	220a      	movs	r2, #10
 800cf14:	4620      	mov	r0, r4
 800cf16:	f000 fa1d 	bl	800d354 <__multadd>
 800cf1a:	f1b9 0f00 	cmp.w	r9, #0
 800cf1e:	4607      	mov	r7, r0
 800cf20:	f300 808e 	bgt.w	800d040 <_dtoa_r+0x9a8>
 800cf24:	9b05      	ldr	r3, [sp, #20]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	dc50      	bgt.n	800cfcc <_dtoa_r+0x934>
 800cf2a:	e089      	b.n	800d040 <_dtoa_r+0x9a8>
 800cf2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf32:	e75d      	b.n	800cdf0 <_dtoa_r+0x758>
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	1e5e      	subs	r6, r3, #1
 800cf38:	9b06      	ldr	r3, [sp, #24]
 800cf3a:	42b3      	cmp	r3, r6
 800cf3c:	bfbf      	itttt	lt
 800cf3e:	9b06      	ldrlt	r3, [sp, #24]
 800cf40:	9606      	strlt	r6, [sp, #24]
 800cf42:	1af2      	sublt	r2, r6, r3
 800cf44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cf46:	bfb6      	itet	lt
 800cf48:	189b      	addlt	r3, r3, r2
 800cf4a:	1b9e      	subge	r6, r3, r6
 800cf4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	bfb8      	it	lt
 800cf52:	2600      	movlt	r6, #0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	bfb5      	itete	lt
 800cf58:	eba8 0503 	sublt.w	r5, r8, r3
 800cf5c:	9b01      	ldrge	r3, [sp, #4]
 800cf5e:	2300      	movlt	r3, #0
 800cf60:	4645      	movge	r5, r8
 800cf62:	e747      	b.n	800cdf4 <_dtoa_r+0x75c>
 800cf64:	9e06      	ldr	r6, [sp, #24]
 800cf66:	9f08      	ldr	r7, [sp, #32]
 800cf68:	4645      	mov	r5, r8
 800cf6a:	e74c      	b.n	800ce06 <_dtoa_r+0x76e>
 800cf6c:	9a06      	ldr	r2, [sp, #24]
 800cf6e:	e775      	b.n	800ce5c <_dtoa_r+0x7c4>
 800cf70:	9b05      	ldr	r3, [sp, #20]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	dc18      	bgt.n	800cfa8 <_dtoa_r+0x910>
 800cf76:	9b02      	ldr	r3, [sp, #8]
 800cf78:	b9b3      	cbnz	r3, 800cfa8 <_dtoa_r+0x910>
 800cf7a:	9b03      	ldr	r3, [sp, #12]
 800cf7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf80:	b9a3      	cbnz	r3, 800cfac <_dtoa_r+0x914>
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf88:	0d1b      	lsrs	r3, r3, #20
 800cf8a:	051b      	lsls	r3, r3, #20
 800cf8c:	b12b      	cbz	r3, 800cf9a <_dtoa_r+0x902>
 800cf8e:	9b04      	ldr	r3, [sp, #16]
 800cf90:	3301      	adds	r3, #1
 800cf92:	9304      	str	r3, [sp, #16]
 800cf94:	f108 0801 	add.w	r8, r8, #1
 800cf98:	2301      	movs	r3, #1
 800cf9a:	9306      	str	r3, [sp, #24]
 800cf9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f47f af74 	bne.w	800ce8c <_dtoa_r+0x7f4>
 800cfa4:	2001      	movs	r0, #1
 800cfa6:	e779      	b.n	800ce9c <_dtoa_r+0x804>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	e7f6      	b.n	800cf9a <_dtoa_r+0x902>
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	e7f4      	b.n	800cf9a <_dtoa_r+0x902>
 800cfb0:	d085      	beq.n	800cebe <_dtoa_r+0x826>
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	301c      	adds	r0, #28
 800cfb6:	e77d      	b.n	800ceb4 <_dtoa_r+0x81c>
 800cfb8:	40240000 	.word	0x40240000
 800cfbc:	9b01      	ldr	r3, [sp, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	dc38      	bgt.n	800d034 <_dtoa_r+0x99c>
 800cfc2:	9b05      	ldr	r3, [sp, #20]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	dd35      	ble.n	800d034 <_dtoa_r+0x99c>
 800cfc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cfcc:	f1b9 0f00 	cmp.w	r9, #0
 800cfd0:	d10d      	bne.n	800cfee <_dtoa_r+0x956>
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	464b      	mov	r3, r9
 800cfd6:	2205      	movs	r2, #5
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 f9bb 	bl	800d354 <__multadd>
 800cfde:	4601      	mov	r1, r0
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	4658      	mov	r0, fp
 800cfe4:	f000 fbd2 	bl	800d78c <__mcmp>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	f73f adbd 	bgt.w	800cb68 <_dtoa_r+0x4d0>
 800cfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff0:	9d00      	ldr	r5, [sp, #0]
 800cff2:	ea6f 0a03 	mvn.w	sl, r3
 800cff6:	f04f 0800 	mov.w	r8, #0
 800cffa:	4631      	mov	r1, r6
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 f987 	bl	800d310 <_Bfree>
 800d002:	2f00      	cmp	r7, #0
 800d004:	f43f aeb4 	beq.w	800cd70 <_dtoa_r+0x6d8>
 800d008:	f1b8 0f00 	cmp.w	r8, #0
 800d00c:	d005      	beq.n	800d01a <_dtoa_r+0x982>
 800d00e:	45b8      	cmp	r8, r7
 800d010:	d003      	beq.n	800d01a <_dtoa_r+0x982>
 800d012:	4641      	mov	r1, r8
 800d014:	4620      	mov	r0, r4
 800d016:	f000 f97b 	bl	800d310 <_Bfree>
 800d01a:	4639      	mov	r1, r7
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 f977 	bl	800d310 <_Bfree>
 800d022:	e6a5      	b.n	800cd70 <_dtoa_r+0x6d8>
 800d024:	2600      	movs	r6, #0
 800d026:	4637      	mov	r7, r6
 800d028:	e7e1      	b.n	800cfee <_dtoa_r+0x956>
 800d02a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d02c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d030:	4637      	mov	r7, r6
 800d032:	e599      	b.n	800cb68 <_dtoa_r+0x4d0>
 800d034:	9b08      	ldr	r3, [sp, #32]
 800d036:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 80fd 	beq.w	800d23a <_dtoa_r+0xba2>
 800d040:	2d00      	cmp	r5, #0
 800d042:	dd05      	ble.n	800d050 <_dtoa_r+0x9b8>
 800d044:	4639      	mov	r1, r7
 800d046:	462a      	mov	r2, r5
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 fb33 	bl	800d6b4 <__lshift>
 800d04e:	4607      	mov	r7, r0
 800d050:	9b06      	ldr	r3, [sp, #24]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d05c      	beq.n	800d110 <_dtoa_r+0xa78>
 800d056:	6879      	ldr	r1, [r7, #4]
 800d058:	4620      	mov	r0, r4
 800d05a:	f000 f919 	bl	800d290 <_Balloc>
 800d05e:	4605      	mov	r5, r0
 800d060:	b928      	cbnz	r0, 800d06e <_dtoa_r+0x9d6>
 800d062:	4b80      	ldr	r3, [pc, #512]	; (800d264 <_dtoa_r+0xbcc>)
 800d064:	4602      	mov	r2, r0
 800d066:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d06a:	f7ff bb2e 	b.w	800c6ca <_dtoa_r+0x32>
 800d06e:	693a      	ldr	r2, [r7, #16]
 800d070:	3202      	adds	r2, #2
 800d072:	0092      	lsls	r2, r2, #2
 800d074:	f107 010c 	add.w	r1, r7, #12
 800d078:	300c      	adds	r0, #12
 800d07a:	f7fe fd0b 	bl	800ba94 <memcpy>
 800d07e:	2201      	movs	r2, #1
 800d080:	4629      	mov	r1, r5
 800d082:	4620      	mov	r0, r4
 800d084:	f000 fb16 	bl	800d6b4 <__lshift>
 800d088:	9b00      	ldr	r3, [sp, #0]
 800d08a:	3301      	adds	r3, #1
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	9b00      	ldr	r3, [sp, #0]
 800d090:	444b      	add	r3, r9
 800d092:	9307      	str	r3, [sp, #28]
 800d094:	9b02      	ldr	r3, [sp, #8]
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	46b8      	mov	r8, r7
 800d09c:	9306      	str	r3, [sp, #24]
 800d09e:	4607      	mov	r7, r0
 800d0a0:	9b01      	ldr	r3, [sp, #4]
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	4658      	mov	r0, fp
 800d0a8:	9302      	str	r3, [sp, #8]
 800d0aa:	f7ff fa67 	bl	800c57c <quorem>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	3330      	adds	r3, #48	; 0x30
 800d0b2:	9004      	str	r0, [sp, #16]
 800d0b4:	4641      	mov	r1, r8
 800d0b6:	4658      	mov	r0, fp
 800d0b8:	9308      	str	r3, [sp, #32]
 800d0ba:	f000 fb67 	bl	800d78c <__mcmp>
 800d0be:	463a      	mov	r2, r7
 800d0c0:	4681      	mov	r9, r0
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 fb7d 	bl	800d7c4 <__mdiff>
 800d0ca:	68c2      	ldr	r2, [r0, #12]
 800d0cc:	9b08      	ldr	r3, [sp, #32]
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	bb02      	cbnz	r2, 800d114 <_dtoa_r+0xa7c>
 800d0d2:	4601      	mov	r1, r0
 800d0d4:	4658      	mov	r0, fp
 800d0d6:	f000 fb59 	bl	800d78c <__mcmp>
 800d0da:	9b08      	ldr	r3, [sp, #32]
 800d0dc:	4602      	mov	r2, r0
 800d0de:	4629      	mov	r1, r5
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d0e6:	f000 f913 	bl	800d310 <_Bfree>
 800d0ea:	9b05      	ldr	r3, [sp, #20]
 800d0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0ee:	9d01      	ldr	r5, [sp, #4]
 800d0f0:	ea43 0102 	orr.w	r1, r3, r2
 800d0f4:	9b06      	ldr	r3, [sp, #24]
 800d0f6:	430b      	orrs	r3, r1
 800d0f8:	9b08      	ldr	r3, [sp, #32]
 800d0fa:	d10d      	bne.n	800d118 <_dtoa_r+0xa80>
 800d0fc:	2b39      	cmp	r3, #57	; 0x39
 800d0fe:	d029      	beq.n	800d154 <_dtoa_r+0xabc>
 800d100:	f1b9 0f00 	cmp.w	r9, #0
 800d104:	dd01      	ble.n	800d10a <_dtoa_r+0xa72>
 800d106:	9b04      	ldr	r3, [sp, #16]
 800d108:	3331      	adds	r3, #49	; 0x31
 800d10a:	9a02      	ldr	r2, [sp, #8]
 800d10c:	7013      	strb	r3, [r2, #0]
 800d10e:	e774      	b.n	800cffa <_dtoa_r+0x962>
 800d110:	4638      	mov	r0, r7
 800d112:	e7b9      	b.n	800d088 <_dtoa_r+0x9f0>
 800d114:	2201      	movs	r2, #1
 800d116:	e7e2      	b.n	800d0de <_dtoa_r+0xa46>
 800d118:	f1b9 0f00 	cmp.w	r9, #0
 800d11c:	db06      	blt.n	800d12c <_dtoa_r+0xa94>
 800d11e:	9905      	ldr	r1, [sp, #20]
 800d120:	ea41 0909 	orr.w	r9, r1, r9
 800d124:	9906      	ldr	r1, [sp, #24]
 800d126:	ea59 0101 	orrs.w	r1, r9, r1
 800d12a:	d120      	bne.n	800d16e <_dtoa_r+0xad6>
 800d12c:	2a00      	cmp	r2, #0
 800d12e:	ddec      	ble.n	800d10a <_dtoa_r+0xa72>
 800d130:	4659      	mov	r1, fp
 800d132:	2201      	movs	r2, #1
 800d134:	4620      	mov	r0, r4
 800d136:	9301      	str	r3, [sp, #4]
 800d138:	f000 fabc 	bl	800d6b4 <__lshift>
 800d13c:	4631      	mov	r1, r6
 800d13e:	4683      	mov	fp, r0
 800d140:	f000 fb24 	bl	800d78c <__mcmp>
 800d144:	2800      	cmp	r0, #0
 800d146:	9b01      	ldr	r3, [sp, #4]
 800d148:	dc02      	bgt.n	800d150 <_dtoa_r+0xab8>
 800d14a:	d1de      	bne.n	800d10a <_dtoa_r+0xa72>
 800d14c:	07da      	lsls	r2, r3, #31
 800d14e:	d5dc      	bpl.n	800d10a <_dtoa_r+0xa72>
 800d150:	2b39      	cmp	r3, #57	; 0x39
 800d152:	d1d8      	bne.n	800d106 <_dtoa_r+0xa6e>
 800d154:	9a02      	ldr	r2, [sp, #8]
 800d156:	2339      	movs	r3, #57	; 0x39
 800d158:	7013      	strb	r3, [r2, #0]
 800d15a:	462b      	mov	r3, r5
 800d15c:	461d      	mov	r5, r3
 800d15e:	3b01      	subs	r3, #1
 800d160:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d164:	2a39      	cmp	r2, #57	; 0x39
 800d166:	d050      	beq.n	800d20a <_dtoa_r+0xb72>
 800d168:	3201      	adds	r2, #1
 800d16a:	701a      	strb	r2, [r3, #0]
 800d16c:	e745      	b.n	800cffa <_dtoa_r+0x962>
 800d16e:	2a00      	cmp	r2, #0
 800d170:	dd03      	ble.n	800d17a <_dtoa_r+0xae2>
 800d172:	2b39      	cmp	r3, #57	; 0x39
 800d174:	d0ee      	beq.n	800d154 <_dtoa_r+0xabc>
 800d176:	3301      	adds	r3, #1
 800d178:	e7c7      	b.n	800d10a <_dtoa_r+0xa72>
 800d17a:	9a01      	ldr	r2, [sp, #4]
 800d17c:	9907      	ldr	r1, [sp, #28]
 800d17e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d182:	428a      	cmp	r2, r1
 800d184:	d02a      	beq.n	800d1dc <_dtoa_r+0xb44>
 800d186:	4659      	mov	r1, fp
 800d188:	2300      	movs	r3, #0
 800d18a:	220a      	movs	r2, #10
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 f8e1 	bl	800d354 <__multadd>
 800d192:	45b8      	cmp	r8, r7
 800d194:	4683      	mov	fp, r0
 800d196:	f04f 0300 	mov.w	r3, #0
 800d19a:	f04f 020a 	mov.w	r2, #10
 800d19e:	4641      	mov	r1, r8
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	d107      	bne.n	800d1b4 <_dtoa_r+0xb1c>
 800d1a4:	f000 f8d6 	bl	800d354 <__multadd>
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	4607      	mov	r7, r0
 800d1ac:	9b01      	ldr	r3, [sp, #4]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	9301      	str	r3, [sp, #4]
 800d1b2:	e775      	b.n	800d0a0 <_dtoa_r+0xa08>
 800d1b4:	f000 f8ce 	bl	800d354 <__multadd>
 800d1b8:	4639      	mov	r1, r7
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	2300      	movs	r3, #0
 800d1be:	220a      	movs	r2, #10
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f000 f8c7 	bl	800d354 <__multadd>
 800d1c6:	4607      	mov	r7, r0
 800d1c8:	e7f0      	b.n	800d1ac <_dtoa_r+0xb14>
 800d1ca:	f1b9 0f00 	cmp.w	r9, #0
 800d1ce:	9a00      	ldr	r2, [sp, #0]
 800d1d0:	bfcc      	ite	gt
 800d1d2:	464d      	movgt	r5, r9
 800d1d4:	2501      	movle	r5, #1
 800d1d6:	4415      	add	r5, r2
 800d1d8:	f04f 0800 	mov.w	r8, #0
 800d1dc:	4659      	mov	r1, fp
 800d1de:	2201      	movs	r2, #1
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	f000 fa66 	bl	800d6b4 <__lshift>
 800d1e8:	4631      	mov	r1, r6
 800d1ea:	4683      	mov	fp, r0
 800d1ec:	f000 face 	bl	800d78c <__mcmp>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	dcb2      	bgt.n	800d15a <_dtoa_r+0xac2>
 800d1f4:	d102      	bne.n	800d1fc <_dtoa_r+0xb64>
 800d1f6:	9b01      	ldr	r3, [sp, #4]
 800d1f8:	07db      	lsls	r3, r3, #31
 800d1fa:	d4ae      	bmi.n	800d15a <_dtoa_r+0xac2>
 800d1fc:	462b      	mov	r3, r5
 800d1fe:	461d      	mov	r5, r3
 800d200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d204:	2a30      	cmp	r2, #48	; 0x30
 800d206:	d0fa      	beq.n	800d1fe <_dtoa_r+0xb66>
 800d208:	e6f7      	b.n	800cffa <_dtoa_r+0x962>
 800d20a:	9a00      	ldr	r2, [sp, #0]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d1a5      	bne.n	800d15c <_dtoa_r+0xac4>
 800d210:	f10a 0a01 	add.w	sl, sl, #1
 800d214:	2331      	movs	r3, #49	; 0x31
 800d216:	e779      	b.n	800d10c <_dtoa_r+0xa74>
 800d218:	4b13      	ldr	r3, [pc, #76]	; (800d268 <_dtoa_r+0xbd0>)
 800d21a:	f7ff baaf 	b.w	800c77c <_dtoa_r+0xe4>
 800d21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d220:	2b00      	cmp	r3, #0
 800d222:	f47f aa86 	bne.w	800c732 <_dtoa_r+0x9a>
 800d226:	4b11      	ldr	r3, [pc, #68]	; (800d26c <_dtoa_r+0xbd4>)
 800d228:	f7ff baa8 	b.w	800c77c <_dtoa_r+0xe4>
 800d22c:	f1b9 0f00 	cmp.w	r9, #0
 800d230:	dc03      	bgt.n	800d23a <_dtoa_r+0xba2>
 800d232:	9b05      	ldr	r3, [sp, #20]
 800d234:	2b02      	cmp	r3, #2
 800d236:	f73f aec9 	bgt.w	800cfcc <_dtoa_r+0x934>
 800d23a:	9d00      	ldr	r5, [sp, #0]
 800d23c:	4631      	mov	r1, r6
 800d23e:	4658      	mov	r0, fp
 800d240:	f7ff f99c 	bl	800c57c <quorem>
 800d244:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d248:	f805 3b01 	strb.w	r3, [r5], #1
 800d24c:	9a00      	ldr	r2, [sp, #0]
 800d24e:	1aaa      	subs	r2, r5, r2
 800d250:	4591      	cmp	r9, r2
 800d252:	ddba      	ble.n	800d1ca <_dtoa_r+0xb32>
 800d254:	4659      	mov	r1, fp
 800d256:	2300      	movs	r3, #0
 800d258:	220a      	movs	r2, #10
 800d25a:	4620      	mov	r0, r4
 800d25c:	f000 f87a 	bl	800d354 <__multadd>
 800d260:	4683      	mov	fp, r0
 800d262:	e7eb      	b.n	800d23c <_dtoa_r+0xba4>
 800d264:	080199d7 	.word	0x080199d7
 800d268:	08019930 	.word	0x08019930
 800d26c:	08019954 	.word	0x08019954

0800d270 <_localeconv_r>:
 800d270:	4800      	ldr	r0, [pc, #0]	; (800d274 <_localeconv_r+0x4>)
 800d272:	4770      	bx	lr
 800d274:	20000dc8 	.word	0x20000dc8

0800d278 <__malloc_lock>:
 800d278:	4801      	ldr	r0, [pc, #4]	; (800d280 <__malloc_lock+0x8>)
 800d27a:	f000 bd48 	b.w	800dd0e <__retarget_lock_acquire_recursive>
 800d27e:	bf00      	nop
 800d280:	200093d0 	.word	0x200093d0

0800d284 <__malloc_unlock>:
 800d284:	4801      	ldr	r0, [pc, #4]	; (800d28c <__malloc_unlock+0x8>)
 800d286:	f000 bd43 	b.w	800dd10 <__retarget_lock_release_recursive>
 800d28a:	bf00      	nop
 800d28c:	200093d0 	.word	0x200093d0

0800d290 <_Balloc>:
 800d290:	b570      	push	{r4, r5, r6, lr}
 800d292:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d294:	4604      	mov	r4, r0
 800d296:	460d      	mov	r5, r1
 800d298:	b976      	cbnz	r6, 800d2b8 <_Balloc+0x28>
 800d29a:	2010      	movs	r0, #16
 800d29c:	f7fe fbea 	bl	800ba74 <malloc>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	6260      	str	r0, [r4, #36]	; 0x24
 800d2a4:	b920      	cbnz	r0, 800d2b0 <_Balloc+0x20>
 800d2a6:	4b18      	ldr	r3, [pc, #96]	; (800d308 <_Balloc+0x78>)
 800d2a8:	4818      	ldr	r0, [pc, #96]	; (800d30c <_Balloc+0x7c>)
 800d2aa:	2166      	movs	r1, #102	; 0x66
 800d2ac:	f000 fcfe 	bl	800dcac <__assert_func>
 800d2b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2b4:	6006      	str	r6, [r0, #0]
 800d2b6:	60c6      	str	r6, [r0, #12]
 800d2b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d2ba:	68f3      	ldr	r3, [r6, #12]
 800d2bc:	b183      	cbz	r3, 800d2e0 <_Balloc+0x50>
 800d2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2c6:	b9b8      	cbnz	r0, 800d2f8 <_Balloc+0x68>
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d2ce:	1d72      	adds	r2, r6, #5
 800d2d0:	0092      	lsls	r2, r2, #2
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f000 fb5a 	bl	800d98c <_calloc_r>
 800d2d8:	b160      	cbz	r0, 800d2f4 <_Balloc+0x64>
 800d2da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2de:	e00e      	b.n	800d2fe <_Balloc+0x6e>
 800d2e0:	2221      	movs	r2, #33	; 0x21
 800d2e2:	2104      	movs	r1, #4
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f000 fb51 	bl	800d98c <_calloc_r>
 800d2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2ec:	60f0      	str	r0, [r6, #12]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1e4      	bne.n	800d2be <_Balloc+0x2e>
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}
 800d2f8:	6802      	ldr	r2, [r0, #0]
 800d2fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2fe:	2300      	movs	r3, #0
 800d300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d304:	e7f7      	b.n	800d2f6 <_Balloc+0x66>
 800d306:	bf00      	nop
 800d308:	08019961 	.word	0x08019961
 800d30c:	080199e8 	.word	0x080199e8

0800d310 <_Bfree>:
 800d310:	b570      	push	{r4, r5, r6, lr}
 800d312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d314:	4605      	mov	r5, r0
 800d316:	460c      	mov	r4, r1
 800d318:	b976      	cbnz	r6, 800d338 <_Bfree+0x28>
 800d31a:	2010      	movs	r0, #16
 800d31c:	f7fe fbaa 	bl	800ba74 <malloc>
 800d320:	4602      	mov	r2, r0
 800d322:	6268      	str	r0, [r5, #36]	; 0x24
 800d324:	b920      	cbnz	r0, 800d330 <_Bfree+0x20>
 800d326:	4b09      	ldr	r3, [pc, #36]	; (800d34c <_Bfree+0x3c>)
 800d328:	4809      	ldr	r0, [pc, #36]	; (800d350 <_Bfree+0x40>)
 800d32a:	218a      	movs	r1, #138	; 0x8a
 800d32c:	f000 fcbe 	bl	800dcac <__assert_func>
 800d330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d334:	6006      	str	r6, [r0, #0]
 800d336:	60c6      	str	r6, [r0, #12]
 800d338:	b13c      	cbz	r4, 800d34a <_Bfree+0x3a>
 800d33a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d33c:	6862      	ldr	r2, [r4, #4]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d344:	6021      	str	r1, [r4, #0]
 800d346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d34a:	bd70      	pop	{r4, r5, r6, pc}
 800d34c:	08019961 	.word	0x08019961
 800d350:	080199e8 	.word	0x080199e8

0800d354 <__multadd>:
 800d354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d358:	690e      	ldr	r6, [r1, #16]
 800d35a:	4607      	mov	r7, r0
 800d35c:	4698      	mov	r8, r3
 800d35e:	460c      	mov	r4, r1
 800d360:	f101 0014 	add.w	r0, r1, #20
 800d364:	2300      	movs	r3, #0
 800d366:	6805      	ldr	r5, [r0, #0]
 800d368:	b2a9      	uxth	r1, r5
 800d36a:	fb02 8101 	mla	r1, r2, r1, r8
 800d36e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d372:	0c2d      	lsrs	r5, r5, #16
 800d374:	fb02 c505 	mla	r5, r2, r5, ip
 800d378:	b289      	uxth	r1, r1
 800d37a:	3301      	adds	r3, #1
 800d37c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d380:	429e      	cmp	r6, r3
 800d382:	f840 1b04 	str.w	r1, [r0], #4
 800d386:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d38a:	dcec      	bgt.n	800d366 <__multadd+0x12>
 800d38c:	f1b8 0f00 	cmp.w	r8, #0
 800d390:	d022      	beq.n	800d3d8 <__multadd+0x84>
 800d392:	68a3      	ldr	r3, [r4, #8]
 800d394:	42b3      	cmp	r3, r6
 800d396:	dc19      	bgt.n	800d3cc <__multadd+0x78>
 800d398:	6861      	ldr	r1, [r4, #4]
 800d39a:	4638      	mov	r0, r7
 800d39c:	3101      	adds	r1, #1
 800d39e:	f7ff ff77 	bl	800d290 <_Balloc>
 800d3a2:	4605      	mov	r5, r0
 800d3a4:	b928      	cbnz	r0, 800d3b2 <__multadd+0x5e>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	4b0d      	ldr	r3, [pc, #52]	; (800d3e0 <__multadd+0x8c>)
 800d3aa:	480e      	ldr	r0, [pc, #56]	; (800d3e4 <__multadd+0x90>)
 800d3ac:	21b5      	movs	r1, #181	; 0xb5
 800d3ae:	f000 fc7d 	bl	800dcac <__assert_func>
 800d3b2:	6922      	ldr	r2, [r4, #16]
 800d3b4:	3202      	adds	r2, #2
 800d3b6:	f104 010c 	add.w	r1, r4, #12
 800d3ba:	0092      	lsls	r2, r2, #2
 800d3bc:	300c      	adds	r0, #12
 800d3be:	f7fe fb69 	bl	800ba94 <memcpy>
 800d3c2:	4621      	mov	r1, r4
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	f7ff ffa3 	bl	800d310 <_Bfree>
 800d3ca:	462c      	mov	r4, r5
 800d3cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d3d0:	3601      	adds	r6, #1
 800d3d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800d3d6:	6126      	str	r6, [r4, #16]
 800d3d8:	4620      	mov	r0, r4
 800d3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3de:	bf00      	nop
 800d3e0:	080199d7 	.word	0x080199d7
 800d3e4:	080199e8 	.word	0x080199e8

0800d3e8 <__hi0bits>:
 800d3e8:	0c03      	lsrs	r3, r0, #16
 800d3ea:	041b      	lsls	r3, r3, #16
 800d3ec:	b9d3      	cbnz	r3, 800d424 <__hi0bits+0x3c>
 800d3ee:	0400      	lsls	r0, r0, #16
 800d3f0:	2310      	movs	r3, #16
 800d3f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d3f6:	bf04      	itt	eq
 800d3f8:	0200      	lsleq	r0, r0, #8
 800d3fa:	3308      	addeq	r3, #8
 800d3fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d400:	bf04      	itt	eq
 800d402:	0100      	lsleq	r0, r0, #4
 800d404:	3304      	addeq	r3, #4
 800d406:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d40a:	bf04      	itt	eq
 800d40c:	0080      	lsleq	r0, r0, #2
 800d40e:	3302      	addeq	r3, #2
 800d410:	2800      	cmp	r0, #0
 800d412:	db05      	blt.n	800d420 <__hi0bits+0x38>
 800d414:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d418:	f103 0301 	add.w	r3, r3, #1
 800d41c:	bf08      	it	eq
 800d41e:	2320      	moveq	r3, #32
 800d420:	4618      	mov	r0, r3
 800d422:	4770      	bx	lr
 800d424:	2300      	movs	r3, #0
 800d426:	e7e4      	b.n	800d3f2 <__hi0bits+0xa>

0800d428 <__lo0bits>:
 800d428:	6803      	ldr	r3, [r0, #0]
 800d42a:	f013 0207 	ands.w	r2, r3, #7
 800d42e:	4601      	mov	r1, r0
 800d430:	d00b      	beq.n	800d44a <__lo0bits+0x22>
 800d432:	07da      	lsls	r2, r3, #31
 800d434:	d424      	bmi.n	800d480 <__lo0bits+0x58>
 800d436:	0798      	lsls	r0, r3, #30
 800d438:	bf49      	itett	mi
 800d43a:	085b      	lsrmi	r3, r3, #1
 800d43c:	089b      	lsrpl	r3, r3, #2
 800d43e:	2001      	movmi	r0, #1
 800d440:	600b      	strmi	r3, [r1, #0]
 800d442:	bf5c      	itt	pl
 800d444:	600b      	strpl	r3, [r1, #0]
 800d446:	2002      	movpl	r0, #2
 800d448:	4770      	bx	lr
 800d44a:	b298      	uxth	r0, r3
 800d44c:	b9b0      	cbnz	r0, 800d47c <__lo0bits+0x54>
 800d44e:	0c1b      	lsrs	r3, r3, #16
 800d450:	2010      	movs	r0, #16
 800d452:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d456:	bf04      	itt	eq
 800d458:	0a1b      	lsreq	r3, r3, #8
 800d45a:	3008      	addeq	r0, #8
 800d45c:	071a      	lsls	r2, r3, #28
 800d45e:	bf04      	itt	eq
 800d460:	091b      	lsreq	r3, r3, #4
 800d462:	3004      	addeq	r0, #4
 800d464:	079a      	lsls	r2, r3, #30
 800d466:	bf04      	itt	eq
 800d468:	089b      	lsreq	r3, r3, #2
 800d46a:	3002      	addeq	r0, #2
 800d46c:	07da      	lsls	r2, r3, #31
 800d46e:	d403      	bmi.n	800d478 <__lo0bits+0x50>
 800d470:	085b      	lsrs	r3, r3, #1
 800d472:	f100 0001 	add.w	r0, r0, #1
 800d476:	d005      	beq.n	800d484 <__lo0bits+0x5c>
 800d478:	600b      	str	r3, [r1, #0]
 800d47a:	4770      	bx	lr
 800d47c:	4610      	mov	r0, r2
 800d47e:	e7e8      	b.n	800d452 <__lo0bits+0x2a>
 800d480:	2000      	movs	r0, #0
 800d482:	4770      	bx	lr
 800d484:	2020      	movs	r0, #32
 800d486:	4770      	bx	lr

0800d488 <__i2b>:
 800d488:	b510      	push	{r4, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	2101      	movs	r1, #1
 800d48e:	f7ff feff 	bl	800d290 <_Balloc>
 800d492:	4602      	mov	r2, r0
 800d494:	b928      	cbnz	r0, 800d4a2 <__i2b+0x1a>
 800d496:	4b05      	ldr	r3, [pc, #20]	; (800d4ac <__i2b+0x24>)
 800d498:	4805      	ldr	r0, [pc, #20]	; (800d4b0 <__i2b+0x28>)
 800d49a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d49e:	f000 fc05 	bl	800dcac <__assert_func>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	6144      	str	r4, [r0, #20]
 800d4a6:	6103      	str	r3, [r0, #16]
 800d4a8:	bd10      	pop	{r4, pc}
 800d4aa:	bf00      	nop
 800d4ac:	080199d7 	.word	0x080199d7
 800d4b0:	080199e8 	.word	0x080199e8

0800d4b4 <__multiply>:
 800d4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b8:	4614      	mov	r4, r2
 800d4ba:	690a      	ldr	r2, [r1, #16]
 800d4bc:	6923      	ldr	r3, [r4, #16]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	bfb8      	it	lt
 800d4c2:	460b      	movlt	r3, r1
 800d4c4:	460d      	mov	r5, r1
 800d4c6:	bfbc      	itt	lt
 800d4c8:	4625      	movlt	r5, r4
 800d4ca:	461c      	movlt	r4, r3
 800d4cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d4d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d4d4:	68ab      	ldr	r3, [r5, #8]
 800d4d6:	6869      	ldr	r1, [r5, #4]
 800d4d8:	eb0a 0709 	add.w	r7, sl, r9
 800d4dc:	42bb      	cmp	r3, r7
 800d4de:	b085      	sub	sp, #20
 800d4e0:	bfb8      	it	lt
 800d4e2:	3101      	addlt	r1, #1
 800d4e4:	f7ff fed4 	bl	800d290 <_Balloc>
 800d4e8:	b930      	cbnz	r0, 800d4f8 <__multiply+0x44>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	4b42      	ldr	r3, [pc, #264]	; (800d5f8 <__multiply+0x144>)
 800d4ee:	4843      	ldr	r0, [pc, #268]	; (800d5fc <__multiply+0x148>)
 800d4f0:	f240 115d 	movw	r1, #349	; 0x15d
 800d4f4:	f000 fbda 	bl	800dcac <__assert_func>
 800d4f8:	f100 0614 	add.w	r6, r0, #20
 800d4fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d500:	4633      	mov	r3, r6
 800d502:	2200      	movs	r2, #0
 800d504:	4543      	cmp	r3, r8
 800d506:	d31e      	bcc.n	800d546 <__multiply+0x92>
 800d508:	f105 0c14 	add.w	ip, r5, #20
 800d50c:	f104 0314 	add.w	r3, r4, #20
 800d510:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d514:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d518:	9202      	str	r2, [sp, #8]
 800d51a:	ebac 0205 	sub.w	r2, ip, r5
 800d51e:	3a15      	subs	r2, #21
 800d520:	f022 0203 	bic.w	r2, r2, #3
 800d524:	3204      	adds	r2, #4
 800d526:	f105 0115 	add.w	r1, r5, #21
 800d52a:	458c      	cmp	ip, r1
 800d52c:	bf38      	it	cc
 800d52e:	2204      	movcc	r2, #4
 800d530:	9201      	str	r2, [sp, #4]
 800d532:	9a02      	ldr	r2, [sp, #8]
 800d534:	9303      	str	r3, [sp, #12]
 800d536:	429a      	cmp	r2, r3
 800d538:	d808      	bhi.n	800d54c <__multiply+0x98>
 800d53a:	2f00      	cmp	r7, #0
 800d53c:	dc55      	bgt.n	800d5ea <__multiply+0x136>
 800d53e:	6107      	str	r7, [r0, #16]
 800d540:	b005      	add	sp, #20
 800d542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d546:	f843 2b04 	str.w	r2, [r3], #4
 800d54a:	e7db      	b.n	800d504 <__multiply+0x50>
 800d54c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d550:	f1ba 0f00 	cmp.w	sl, #0
 800d554:	d020      	beq.n	800d598 <__multiply+0xe4>
 800d556:	f105 0e14 	add.w	lr, r5, #20
 800d55a:	46b1      	mov	r9, r6
 800d55c:	2200      	movs	r2, #0
 800d55e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d562:	f8d9 b000 	ldr.w	fp, [r9]
 800d566:	b2a1      	uxth	r1, r4
 800d568:	fa1f fb8b 	uxth.w	fp, fp
 800d56c:	fb0a b101 	mla	r1, sl, r1, fp
 800d570:	4411      	add	r1, r2
 800d572:	f8d9 2000 	ldr.w	r2, [r9]
 800d576:	0c24      	lsrs	r4, r4, #16
 800d578:	0c12      	lsrs	r2, r2, #16
 800d57a:	fb0a 2404 	mla	r4, sl, r4, r2
 800d57e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d582:	b289      	uxth	r1, r1
 800d584:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d588:	45f4      	cmp	ip, lr
 800d58a:	f849 1b04 	str.w	r1, [r9], #4
 800d58e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d592:	d8e4      	bhi.n	800d55e <__multiply+0xaa>
 800d594:	9901      	ldr	r1, [sp, #4]
 800d596:	5072      	str	r2, [r6, r1]
 800d598:	9a03      	ldr	r2, [sp, #12]
 800d59a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d59e:	3304      	adds	r3, #4
 800d5a0:	f1b9 0f00 	cmp.w	r9, #0
 800d5a4:	d01f      	beq.n	800d5e6 <__multiply+0x132>
 800d5a6:	6834      	ldr	r4, [r6, #0]
 800d5a8:	f105 0114 	add.w	r1, r5, #20
 800d5ac:	46b6      	mov	lr, r6
 800d5ae:	f04f 0a00 	mov.w	sl, #0
 800d5b2:	880a      	ldrh	r2, [r1, #0]
 800d5b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d5b8:	fb09 b202 	mla	r2, r9, r2, fp
 800d5bc:	4492      	add	sl, r2
 800d5be:	b2a4      	uxth	r4, r4
 800d5c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d5c4:	f84e 4b04 	str.w	r4, [lr], #4
 800d5c8:	f851 4b04 	ldr.w	r4, [r1], #4
 800d5cc:	f8be 2000 	ldrh.w	r2, [lr]
 800d5d0:	0c24      	lsrs	r4, r4, #16
 800d5d2:	fb09 2404 	mla	r4, r9, r4, r2
 800d5d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d5da:	458c      	cmp	ip, r1
 800d5dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d5e0:	d8e7      	bhi.n	800d5b2 <__multiply+0xfe>
 800d5e2:	9a01      	ldr	r2, [sp, #4]
 800d5e4:	50b4      	str	r4, [r6, r2]
 800d5e6:	3604      	adds	r6, #4
 800d5e8:	e7a3      	b.n	800d532 <__multiply+0x7e>
 800d5ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1a5      	bne.n	800d53e <__multiply+0x8a>
 800d5f2:	3f01      	subs	r7, #1
 800d5f4:	e7a1      	b.n	800d53a <__multiply+0x86>
 800d5f6:	bf00      	nop
 800d5f8:	080199d7 	.word	0x080199d7
 800d5fc:	080199e8 	.word	0x080199e8

0800d600 <__pow5mult>:
 800d600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d604:	4615      	mov	r5, r2
 800d606:	f012 0203 	ands.w	r2, r2, #3
 800d60a:	4606      	mov	r6, r0
 800d60c:	460f      	mov	r7, r1
 800d60e:	d007      	beq.n	800d620 <__pow5mult+0x20>
 800d610:	4c25      	ldr	r4, [pc, #148]	; (800d6a8 <__pow5mult+0xa8>)
 800d612:	3a01      	subs	r2, #1
 800d614:	2300      	movs	r3, #0
 800d616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d61a:	f7ff fe9b 	bl	800d354 <__multadd>
 800d61e:	4607      	mov	r7, r0
 800d620:	10ad      	asrs	r5, r5, #2
 800d622:	d03d      	beq.n	800d6a0 <__pow5mult+0xa0>
 800d624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d626:	b97c      	cbnz	r4, 800d648 <__pow5mult+0x48>
 800d628:	2010      	movs	r0, #16
 800d62a:	f7fe fa23 	bl	800ba74 <malloc>
 800d62e:	4602      	mov	r2, r0
 800d630:	6270      	str	r0, [r6, #36]	; 0x24
 800d632:	b928      	cbnz	r0, 800d640 <__pow5mult+0x40>
 800d634:	4b1d      	ldr	r3, [pc, #116]	; (800d6ac <__pow5mult+0xac>)
 800d636:	481e      	ldr	r0, [pc, #120]	; (800d6b0 <__pow5mult+0xb0>)
 800d638:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d63c:	f000 fb36 	bl	800dcac <__assert_func>
 800d640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d644:	6004      	str	r4, [r0, #0]
 800d646:	60c4      	str	r4, [r0, #12]
 800d648:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d64c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d650:	b94c      	cbnz	r4, 800d666 <__pow5mult+0x66>
 800d652:	f240 2171 	movw	r1, #625	; 0x271
 800d656:	4630      	mov	r0, r6
 800d658:	f7ff ff16 	bl	800d488 <__i2b>
 800d65c:	2300      	movs	r3, #0
 800d65e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d662:	4604      	mov	r4, r0
 800d664:	6003      	str	r3, [r0, #0]
 800d666:	f04f 0900 	mov.w	r9, #0
 800d66a:	07eb      	lsls	r3, r5, #31
 800d66c:	d50a      	bpl.n	800d684 <__pow5mult+0x84>
 800d66e:	4639      	mov	r1, r7
 800d670:	4622      	mov	r2, r4
 800d672:	4630      	mov	r0, r6
 800d674:	f7ff ff1e 	bl	800d4b4 <__multiply>
 800d678:	4639      	mov	r1, r7
 800d67a:	4680      	mov	r8, r0
 800d67c:	4630      	mov	r0, r6
 800d67e:	f7ff fe47 	bl	800d310 <_Bfree>
 800d682:	4647      	mov	r7, r8
 800d684:	106d      	asrs	r5, r5, #1
 800d686:	d00b      	beq.n	800d6a0 <__pow5mult+0xa0>
 800d688:	6820      	ldr	r0, [r4, #0]
 800d68a:	b938      	cbnz	r0, 800d69c <__pow5mult+0x9c>
 800d68c:	4622      	mov	r2, r4
 800d68e:	4621      	mov	r1, r4
 800d690:	4630      	mov	r0, r6
 800d692:	f7ff ff0f 	bl	800d4b4 <__multiply>
 800d696:	6020      	str	r0, [r4, #0]
 800d698:	f8c0 9000 	str.w	r9, [r0]
 800d69c:	4604      	mov	r4, r0
 800d69e:	e7e4      	b.n	800d66a <__pow5mult+0x6a>
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6a6:	bf00      	nop
 800d6a8:	08019b38 	.word	0x08019b38
 800d6ac:	08019961 	.word	0x08019961
 800d6b0:	080199e8 	.word	0x080199e8

0800d6b4 <__lshift>:
 800d6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6b8:	460c      	mov	r4, r1
 800d6ba:	6849      	ldr	r1, [r1, #4]
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6c2:	68a3      	ldr	r3, [r4, #8]
 800d6c4:	4607      	mov	r7, r0
 800d6c6:	4691      	mov	r9, r2
 800d6c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6cc:	f108 0601 	add.w	r6, r8, #1
 800d6d0:	42b3      	cmp	r3, r6
 800d6d2:	db0b      	blt.n	800d6ec <__lshift+0x38>
 800d6d4:	4638      	mov	r0, r7
 800d6d6:	f7ff fddb 	bl	800d290 <_Balloc>
 800d6da:	4605      	mov	r5, r0
 800d6dc:	b948      	cbnz	r0, 800d6f2 <__lshift+0x3e>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	4b28      	ldr	r3, [pc, #160]	; (800d784 <__lshift+0xd0>)
 800d6e2:	4829      	ldr	r0, [pc, #164]	; (800d788 <__lshift+0xd4>)
 800d6e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d6e8:	f000 fae0 	bl	800dcac <__assert_func>
 800d6ec:	3101      	adds	r1, #1
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	e7ee      	b.n	800d6d0 <__lshift+0x1c>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f100 0114 	add.w	r1, r0, #20
 800d6f8:	f100 0210 	add.w	r2, r0, #16
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	4553      	cmp	r3, sl
 800d700:	db33      	blt.n	800d76a <__lshift+0xb6>
 800d702:	6920      	ldr	r0, [r4, #16]
 800d704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d708:	f104 0314 	add.w	r3, r4, #20
 800d70c:	f019 091f 	ands.w	r9, r9, #31
 800d710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d714:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d718:	d02b      	beq.n	800d772 <__lshift+0xbe>
 800d71a:	f1c9 0e20 	rsb	lr, r9, #32
 800d71e:	468a      	mov	sl, r1
 800d720:	2200      	movs	r2, #0
 800d722:	6818      	ldr	r0, [r3, #0]
 800d724:	fa00 f009 	lsl.w	r0, r0, r9
 800d728:	4302      	orrs	r2, r0
 800d72a:	f84a 2b04 	str.w	r2, [sl], #4
 800d72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d732:	459c      	cmp	ip, r3
 800d734:	fa22 f20e 	lsr.w	r2, r2, lr
 800d738:	d8f3      	bhi.n	800d722 <__lshift+0x6e>
 800d73a:	ebac 0304 	sub.w	r3, ip, r4
 800d73e:	3b15      	subs	r3, #21
 800d740:	f023 0303 	bic.w	r3, r3, #3
 800d744:	3304      	adds	r3, #4
 800d746:	f104 0015 	add.w	r0, r4, #21
 800d74a:	4584      	cmp	ip, r0
 800d74c:	bf38      	it	cc
 800d74e:	2304      	movcc	r3, #4
 800d750:	50ca      	str	r2, [r1, r3]
 800d752:	b10a      	cbz	r2, 800d758 <__lshift+0xa4>
 800d754:	f108 0602 	add.w	r6, r8, #2
 800d758:	3e01      	subs	r6, #1
 800d75a:	4638      	mov	r0, r7
 800d75c:	612e      	str	r6, [r5, #16]
 800d75e:	4621      	mov	r1, r4
 800d760:	f7ff fdd6 	bl	800d310 <_Bfree>
 800d764:	4628      	mov	r0, r5
 800d766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d76a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d76e:	3301      	adds	r3, #1
 800d770:	e7c5      	b.n	800d6fe <__lshift+0x4a>
 800d772:	3904      	subs	r1, #4
 800d774:	f853 2b04 	ldr.w	r2, [r3], #4
 800d778:	f841 2f04 	str.w	r2, [r1, #4]!
 800d77c:	459c      	cmp	ip, r3
 800d77e:	d8f9      	bhi.n	800d774 <__lshift+0xc0>
 800d780:	e7ea      	b.n	800d758 <__lshift+0xa4>
 800d782:	bf00      	nop
 800d784:	080199d7 	.word	0x080199d7
 800d788:	080199e8 	.word	0x080199e8

0800d78c <__mcmp>:
 800d78c:	b530      	push	{r4, r5, lr}
 800d78e:	6902      	ldr	r2, [r0, #16]
 800d790:	690c      	ldr	r4, [r1, #16]
 800d792:	1b12      	subs	r2, r2, r4
 800d794:	d10e      	bne.n	800d7b4 <__mcmp+0x28>
 800d796:	f100 0314 	add.w	r3, r0, #20
 800d79a:	3114      	adds	r1, #20
 800d79c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d7a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d7a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d7ac:	42a5      	cmp	r5, r4
 800d7ae:	d003      	beq.n	800d7b8 <__mcmp+0x2c>
 800d7b0:	d305      	bcc.n	800d7be <__mcmp+0x32>
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	bd30      	pop	{r4, r5, pc}
 800d7b8:	4283      	cmp	r3, r0
 800d7ba:	d3f3      	bcc.n	800d7a4 <__mcmp+0x18>
 800d7bc:	e7fa      	b.n	800d7b4 <__mcmp+0x28>
 800d7be:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c2:	e7f7      	b.n	800d7b4 <__mcmp+0x28>

0800d7c4 <__mdiff>:
 800d7c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c8:	460c      	mov	r4, r1
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	4617      	mov	r7, r2
 800d7d2:	f7ff ffdb 	bl	800d78c <__mcmp>
 800d7d6:	1e05      	subs	r5, r0, #0
 800d7d8:	d110      	bne.n	800d7fc <__mdiff+0x38>
 800d7da:	4629      	mov	r1, r5
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f7ff fd57 	bl	800d290 <_Balloc>
 800d7e2:	b930      	cbnz	r0, 800d7f2 <__mdiff+0x2e>
 800d7e4:	4b39      	ldr	r3, [pc, #228]	; (800d8cc <__mdiff+0x108>)
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	f240 2132 	movw	r1, #562	; 0x232
 800d7ec:	4838      	ldr	r0, [pc, #224]	; (800d8d0 <__mdiff+0x10c>)
 800d7ee:	f000 fa5d 	bl	800dcac <__assert_func>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fc:	bfa4      	itt	ge
 800d7fe:	463b      	movge	r3, r7
 800d800:	4627      	movge	r7, r4
 800d802:	4630      	mov	r0, r6
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	bfa6      	itte	ge
 800d808:	461c      	movge	r4, r3
 800d80a:	2500      	movge	r5, #0
 800d80c:	2501      	movlt	r5, #1
 800d80e:	f7ff fd3f 	bl	800d290 <_Balloc>
 800d812:	b920      	cbnz	r0, 800d81e <__mdiff+0x5a>
 800d814:	4b2d      	ldr	r3, [pc, #180]	; (800d8cc <__mdiff+0x108>)
 800d816:	4602      	mov	r2, r0
 800d818:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d81c:	e7e6      	b.n	800d7ec <__mdiff+0x28>
 800d81e:	693e      	ldr	r6, [r7, #16]
 800d820:	60c5      	str	r5, [r0, #12]
 800d822:	6925      	ldr	r5, [r4, #16]
 800d824:	f107 0114 	add.w	r1, r7, #20
 800d828:	f104 0914 	add.w	r9, r4, #20
 800d82c:	f100 0e14 	add.w	lr, r0, #20
 800d830:	f107 0210 	add.w	r2, r7, #16
 800d834:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d838:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d83c:	46f2      	mov	sl, lr
 800d83e:	2700      	movs	r7, #0
 800d840:	f859 3b04 	ldr.w	r3, [r9], #4
 800d844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d848:	fa1f f883 	uxth.w	r8, r3
 800d84c:	fa17 f78b 	uxtah	r7, r7, fp
 800d850:	0c1b      	lsrs	r3, r3, #16
 800d852:	eba7 0808 	sub.w	r8, r7, r8
 800d856:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d85a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d85e:	fa1f f888 	uxth.w	r8, r8
 800d862:	141f      	asrs	r7, r3, #16
 800d864:	454d      	cmp	r5, r9
 800d866:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d86a:	f84a 3b04 	str.w	r3, [sl], #4
 800d86e:	d8e7      	bhi.n	800d840 <__mdiff+0x7c>
 800d870:	1b2b      	subs	r3, r5, r4
 800d872:	3b15      	subs	r3, #21
 800d874:	f023 0303 	bic.w	r3, r3, #3
 800d878:	3304      	adds	r3, #4
 800d87a:	3415      	adds	r4, #21
 800d87c:	42a5      	cmp	r5, r4
 800d87e:	bf38      	it	cc
 800d880:	2304      	movcc	r3, #4
 800d882:	4419      	add	r1, r3
 800d884:	4473      	add	r3, lr
 800d886:	469e      	mov	lr, r3
 800d888:	460d      	mov	r5, r1
 800d88a:	4565      	cmp	r5, ip
 800d88c:	d30e      	bcc.n	800d8ac <__mdiff+0xe8>
 800d88e:	f10c 0203 	add.w	r2, ip, #3
 800d892:	1a52      	subs	r2, r2, r1
 800d894:	f022 0203 	bic.w	r2, r2, #3
 800d898:	3903      	subs	r1, #3
 800d89a:	458c      	cmp	ip, r1
 800d89c:	bf38      	it	cc
 800d89e:	2200      	movcc	r2, #0
 800d8a0:	441a      	add	r2, r3
 800d8a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d8a6:	b17b      	cbz	r3, 800d8c8 <__mdiff+0x104>
 800d8a8:	6106      	str	r6, [r0, #16]
 800d8aa:	e7a5      	b.n	800d7f8 <__mdiff+0x34>
 800d8ac:	f855 8b04 	ldr.w	r8, [r5], #4
 800d8b0:	fa17 f488 	uxtah	r4, r7, r8
 800d8b4:	1422      	asrs	r2, r4, #16
 800d8b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d8ba:	b2a4      	uxth	r4, r4
 800d8bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d8c0:	f84e 4b04 	str.w	r4, [lr], #4
 800d8c4:	1417      	asrs	r7, r2, #16
 800d8c6:	e7e0      	b.n	800d88a <__mdiff+0xc6>
 800d8c8:	3e01      	subs	r6, #1
 800d8ca:	e7ea      	b.n	800d8a2 <__mdiff+0xde>
 800d8cc:	080199d7 	.word	0x080199d7
 800d8d0:	080199e8 	.word	0x080199e8

0800d8d4 <__d2b>:
 800d8d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8d8:	4689      	mov	r9, r1
 800d8da:	2101      	movs	r1, #1
 800d8dc:	ec57 6b10 	vmov	r6, r7, d0
 800d8e0:	4690      	mov	r8, r2
 800d8e2:	f7ff fcd5 	bl	800d290 <_Balloc>
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	b930      	cbnz	r0, 800d8f8 <__d2b+0x24>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	4b25      	ldr	r3, [pc, #148]	; (800d984 <__d2b+0xb0>)
 800d8ee:	4826      	ldr	r0, [pc, #152]	; (800d988 <__d2b+0xb4>)
 800d8f0:	f240 310a 	movw	r1, #778	; 0x30a
 800d8f4:	f000 f9da 	bl	800dcac <__assert_func>
 800d8f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d8fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d900:	bb35      	cbnz	r5, 800d950 <__d2b+0x7c>
 800d902:	2e00      	cmp	r6, #0
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	d028      	beq.n	800d95a <__d2b+0x86>
 800d908:	4668      	mov	r0, sp
 800d90a:	9600      	str	r6, [sp, #0]
 800d90c:	f7ff fd8c 	bl	800d428 <__lo0bits>
 800d910:	9900      	ldr	r1, [sp, #0]
 800d912:	b300      	cbz	r0, 800d956 <__d2b+0x82>
 800d914:	9a01      	ldr	r2, [sp, #4]
 800d916:	f1c0 0320 	rsb	r3, r0, #32
 800d91a:	fa02 f303 	lsl.w	r3, r2, r3
 800d91e:	430b      	orrs	r3, r1
 800d920:	40c2      	lsrs	r2, r0
 800d922:	6163      	str	r3, [r4, #20]
 800d924:	9201      	str	r2, [sp, #4]
 800d926:	9b01      	ldr	r3, [sp, #4]
 800d928:	61a3      	str	r3, [r4, #24]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	bf14      	ite	ne
 800d92e:	2202      	movne	r2, #2
 800d930:	2201      	moveq	r2, #1
 800d932:	6122      	str	r2, [r4, #16]
 800d934:	b1d5      	cbz	r5, 800d96c <__d2b+0x98>
 800d936:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d93a:	4405      	add	r5, r0
 800d93c:	f8c9 5000 	str.w	r5, [r9]
 800d940:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d944:	f8c8 0000 	str.w	r0, [r8]
 800d948:	4620      	mov	r0, r4
 800d94a:	b003      	add	sp, #12
 800d94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d954:	e7d5      	b.n	800d902 <__d2b+0x2e>
 800d956:	6161      	str	r1, [r4, #20]
 800d958:	e7e5      	b.n	800d926 <__d2b+0x52>
 800d95a:	a801      	add	r0, sp, #4
 800d95c:	f7ff fd64 	bl	800d428 <__lo0bits>
 800d960:	9b01      	ldr	r3, [sp, #4]
 800d962:	6163      	str	r3, [r4, #20]
 800d964:	2201      	movs	r2, #1
 800d966:	6122      	str	r2, [r4, #16]
 800d968:	3020      	adds	r0, #32
 800d96a:	e7e3      	b.n	800d934 <__d2b+0x60>
 800d96c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d970:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d974:	f8c9 0000 	str.w	r0, [r9]
 800d978:	6918      	ldr	r0, [r3, #16]
 800d97a:	f7ff fd35 	bl	800d3e8 <__hi0bits>
 800d97e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d982:	e7df      	b.n	800d944 <__d2b+0x70>
 800d984:	080199d7 	.word	0x080199d7
 800d988:	080199e8 	.word	0x080199e8

0800d98c <_calloc_r>:
 800d98c:	b513      	push	{r0, r1, r4, lr}
 800d98e:	434a      	muls	r2, r1
 800d990:	4611      	mov	r1, r2
 800d992:	9201      	str	r2, [sp, #4]
 800d994:	f7fe f8fe 	bl	800bb94 <_malloc_r>
 800d998:	4604      	mov	r4, r0
 800d99a:	b118      	cbz	r0, 800d9a4 <_calloc_r+0x18>
 800d99c:	9a01      	ldr	r2, [sp, #4]
 800d99e:	2100      	movs	r1, #0
 800d9a0:	f7fe f8a0 	bl	800bae4 <memset>
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	b002      	add	sp, #8
 800d9a8:	bd10      	pop	{r4, pc}

0800d9aa <_realloc_r>:
 800d9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ac:	4607      	mov	r7, r0
 800d9ae:	4614      	mov	r4, r2
 800d9b0:	460e      	mov	r6, r1
 800d9b2:	b921      	cbnz	r1, 800d9be <_realloc_r+0x14>
 800d9b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	f7fe b8eb 	b.w	800bb94 <_malloc_r>
 800d9be:	b922      	cbnz	r2, 800d9ca <_realloc_r+0x20>
 800d9c0:	f7fe f898 	bl	800baf4 <_free_r>
 800d9c4:	4625      	mov	r5, r4
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ca:	f000 f9b4 	bl	800dd36 <_malloc_usable_size_r>
 800d9ce:	42a0      	cmp	r0, r4
 800d9d0:	d20f      	bcs.n	800d9f2 <_realloc_r+0x48>
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f7fe f8dd 	bl	800bb94 <_malloc_r>
 800d9da:	4605      	mov	r5, r0
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d0f2      	beq.n	800d9c6 <_realloc_r+0x1c>
 800d9e0:	4631      	mov	r1, r6
 800d9e2:	4622      	mov	r2, r4
 800d9e4:	f7fe f856 	bl	800ba94 <memcpy>
 800d9e8:	4631      	mov	r1, r6
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	f7fe f882 	bl	800baf4 <_free_r>
 800d9f0:	e7e9      	b.n	800d9c6 <_realloc_r+0x1c>
 800d9f2:	4635      	mov	r5, r6
 800d9f4:	e7e7      	b.n	800d9c6 <_realloc_r+0x1c>

0800d9f6 <__ssputs_r>:
 800d9f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9fa:	688e      	ldr	r6, [r1, #8]
 800d9fc:	429e      	cmp	r6, r3
 800d9fe:	4682      	mov	sl, r0
 800da00:	460c      	mov	r4, r1
 800da02:	4690      	mov	r8, r2
 800da04:	461f      	mov	r7, r3
 800da06:	d838      	bhi.n	800da7a <__ssputs_r+0x84>
 800da08:	898a      	ldrh	r2, [r1, #12]
 800da0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da0e:	d032      	beq.n	800da76 <__ssputs_r+0x80>
 800da10:	6825      	ldr	r5, [r4, #0]
 800da12:	6909      	ldr	r1, [r1, #16]
 800da14:	eba5 0901 	sub.w	r9, r5, r1
 800da18:	6965      	ldr	r5, [r4, #20]
 800da1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da22:	3301      	adds	r3, #1
 800da24:	444b      	add	r3, r9
 800da26:	106d      	asrs	r5, r5, #1
 800da28:	429d      	cmp	r5, r3
 800da2a:	bf38      	it	cc
 800da2c:	461d      	movcc	r5, r3
 800da2e:	0553      	lsls	r3, r2, #21
 800da30:	d531      	bpl.n	800da96 <__ssputs_r+0xa0>
 800da32:	4629      	mov	r1, r5
 800da34:	f7fe f8ae 	bl	800bb94 <_malloc_r>
 800da38:	4606      	mov	r6, r0
 800da3a:	b950      	cbnz	r0, 800da52 <__ssputs_r+0x5c>
 800da3c:	230c      	movs	r3, #12
 800da3e:	f8ca 3000 	str.w	r3, [sl]
 800da42:	89a3      	ldrh	r3, [r4, #12]
 800da44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da48:	81a3      	strh	r3, [r4, #12]
 800da4a:	f04f 30ff 	mov.w	r0, #4294967295
 800da4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da52:	6921      	ldr	r1, [r4, #16]
 800da54:	464a      	mov	r2, r9
 800da56:	f7fe f81d 	bl	800ba94 <memcpy>
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da64:	81a3      	strh	r3, [r4, #12]
 800da66:	6126      	str	r6, [r4, #16]
 800da68:	6165      	str	r5, [r4, #20]
 800da6a:	444e      	add	r6, r9
 800da6c:	eba5 0509 	sub.w	r5, r5, r9
 800da70:	6026      	str	r6, [r4, #0]
 800da72:	60a5      	str	r5, [r4, #8]
 800da74:	463e      	mov	r6, r7
 800da76:	42be      	cmp	r6, r7
 800da78:	d900      	bls.n	800da7c <__ssputs_r+0x86>
 800da7a:	463e      	mov	r6, r7
 800da7c:	4632      	mov	r2, r6
 800da7e:	6820      	ldr	r0, [r4, #0]
 800da80:	4641      	mov	r1, r8
 800da82:	f7fe f815 	bl	800bab0 <memmove>
 800da86:	68a3      	ldr	r3, [r4, #8]
 800da88:	6822      	ldr	r2, [r4, #0]
 800da8a:	1b9b      	subs	r3, r3, r6
 800da8c:	4432      	add	r2, r6
 800da8e:	60a3      	str	r3, [r4, #8]
 800da90:	6022      	str	r2, [r4, #0]
 800da92:	2000      	movs	r0, #0
 800da94:	e7db      	b.n	800da4e <__ssputs_r+0x58>
 800da96:	462a      	mov	r2, r5
 800da98:	f7ff ff87 	bl	800d9aa <_realloc_r>
 800da9c:	4606      	mov	r6, r0
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d1e1      	bne.n	800da66 <__ssputs_r+0x70>
 800daa2:	6921      	ldr	r1, [r4, #16]
 800daa4:	4650      	mov	r0, sl
 800daa6:	f7fe f825 	bl	800baf4 <_free_r>
 800daaa:	e7c7      	b.n	800da3c <__ssputs_r+0x46>

0800daac <_svfiprintf_r>:
 800daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab0:	4698      	mov	r8, r3
 800dab2:	898b      	ldrh	r3, [r1, #12]
 800dab4:	061b      	lsls	r3, r3, #24
 800dab6:	b09d      	sub	sp, #116	; 0x74
 800dab8:	4607      	mov	r7, r0
 800daba:	460d      	mov	r5, r1
 800dabc:	4614      	mov	r4, r2
 800dabe:	d50e      	bpl.n	800dade <_svfiprintf_r+0x32>
 800dac0:	690b      	ldr	r3, [r1, #16]
 800dac2:	b963      	cbnz	r3, 800dade <_svfiprintf_r+0x32>
 800dac4:	2140      	movs	r1, #64	; 0x40
 800dac6:	f7fe f865 	bl	800bb94 <_malloc_r>
 800daca:	6028      	str	r0, [r5, #0]
 800dacc:	6128      	str	r0, [r5, #16]
 800dace:	b920      	cbnz	r0, 800dada <_svfiprintf_r+0x2e>
 800dad0:	230c      	movs	r3, #12
 800dad2:	603b      	str	r3, [r7, #0]
 800dad4:	f04f 30ff 	mov.w	r0, #4294967295
 800dad8:	e0d1      	b.n	800dc7e <_svfiprintf_r+0x1d2>
 800dada:	2340      	movs	r3, #64	; 0x40
 800dadc:	616b      	str	r3, [r5, #20]
 800dade:	2300      	movs	r3, #0
 800dae0:	9309      	str	r3, [sp, #36]	; 0x24
 800dae2:	2320      	movs	r3, #32
 800dae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dae8:	f8cd 800c 	str.w	r8, [sp, #12]
 800daec:	2330      	movs	r3, #48	; 0x30
 800daee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc98 <_svfiprintf_r+0x1ec>
 800daf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daf6:	f04f 0901 	mov.w	r9, #1
 800dafa:	4623      	mov	r3, r4
 800dafc:	469a      	mov	sl, r3
 800dafe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db02:	b10a      	cbz	r2, 800db08 <_svfiprintf_r+0x5c>
 800db04:	2a25      	cmp	r2, #37	; 0x25
 800db06:	d1f9      	bne.n	800dafc <_svfiprintf_r+0x50>
 800db08:	ebba 0b04 	subs.w	fp, sl, r4
 800db0c:	d00b      	beq.n	800db26 <_svfiprintf_r+0x7a>
 800db0e:	465b      	mov	r3, fp
 800db10:	4622      	mov	r2, r4
 800db12:	4629      	mov	r1, r5
 800db14:	4638      	mov	r0, r7
 800db16:	f7ff ff6e 	bl	800d9f6 <__ssputs_r>
 800db1a:	3001      	adds	r0, #1
 800db1c:	f000 80aa 	beq.w	800dc74 <_svfiprintf_r+0x1c8>
 800db20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db22:	445a      	add	r2, fp
 800db24:	9209      	str	r2, [sp, #36]	; 0x24
 800db26:	f89a 3000 	ldrb.w	r3, [sl]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 80a2 	beq.w	800dc74 <_svfiprintf_r+0x1c8>
 800db30:	2300      	movs	r3, #0
 800db32:	f04f 32ff 	mov.w	r2, #4294967295
 800db36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db3a:	f10a 0a01 	add.w	sl, sl, #1
 800db3e:	9304      	str	r3, [sp, #16]
 800db40:	9307      	str	r3, [sp, #28]
 800db42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db46:	931a      	str	r3, [sp, #104]	; 0x68
 800db48:	4654      	mov	r4, sl
 800db4a:	2205      	movs	r2, #5
 800db4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db50:	4851      	ldr	r0, [pc, #324]	; (800dc98 <_svfiprintf_r+0x1ec>)
 800db52:	f7f2 fb4d 	bl	80001f0 <memchr>
 800db56:	9a04      	ldr	r2, [sp, #16]
 800db58:	b9d8      	cbnz	r0, 800db92 <_svfiprintf_r+0xe6>
 800db5a:	06d0      	lsls	r0, r2, #27
 800db5c:	bf44      	itt	mi
 800db5e:	2320      	movmi	r3, #32
 800db60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db64:	0711      	lsls	r1, r2, #28
 800db66:	bf44      	itt	mi
 800db68:	232b      	movmi	r3, #43	; 0x2b
 800db6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db6e:	f89a 3000 	ldrb.w	r3, [sl]
 800db72:	2b2a      	cmp	r3, #42	; 0x2a
 800db74:	d015      	beq.n	800dba2 <_svfiprintf_r+0xf6>
 800db76:	9a07      	ldr	r2, [sp, #28]
 800db78:	4654      	mov	r4, sl
 800db7a:	2000      	movs	r0, #0
 800db7c:	f04f 0c0a 	mov.w	ip, #10
 800db80:	4621      	mov	r1, r4
 800db82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db86:	3b30      	subs	r3, #48	; 0x30
 800db88:	2b09      	cmp	r3, #9
 800db8a:	d94e      	bls.n	800dc2a <_svfiprintf_r+0x17e>
 800db8c:	b1b0      	cbz	r0, 800dbbc <_svfiprintf_r+0x110>
 800db8e:	9207      	str	r2, [sp, #28]
 800db90:	e014      	b.n	800dbbc <_svfiprintf_r+0x110>
 800db92:	eba0 0308 	sub.w	r3, r0, r8
 800db96:	fa09 f303 	lsl.w	r3, r9, r3
 800db9a:	4313      	orrs	r3, r2
 800db9c:	9304      	str	r3, [sp, #16]
 800db9e:	46a2      	mov	sl, r4
 800dba0:	e7d2      	b.n	800db48 <_svfiprintf_r+0x9c>
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	1d19      	adds	r1, r3, #4
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	9103      	str	r1, [sp, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	bfbb      	ittet	lt
 800dbae:	425b      	neglt	r3, r3
 800dbb0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbb4:	9307      	strge	r3, [sp, #28]
 800dbb6:	9307      	strlt	r3, [sp, #28]
 800dbb8:	bfb8      	it	lt
 800dbba:	9204      	strlt	r2, [sp, #16]
 800dbbc:	7823      	ldrb	r3, [r4, #0]
 800dbbe:	2b2e      	cmp	r3, #46	; 0x2e
 800dbc0:	d10c      	bne.n	800dbdc <_svfiprintf_r+0x130>
 800dbc2:	7863      	ldrb	r3, [r4, #1]
 800dbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc6:	d135      	bne.n	800dc34 <_svfiprintf_r+0x188>
 800dbc8:	9b03      	ldr	r3, [sp, #12]
 800dbca:	1d1a      	adds	r2, r3, #4
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	9203      	str	r2, [sp, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	bfb8      	it	lt
 800dbd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbd8:	3402      	adds	r4, #2
 800dbda:	9305      	str	r3, [sp, #20]
 800dbdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dca8 <_svfiprintf_r+0x1fc>
 800dbe0:	7821      	ldrb	r1, [r4, #0]
 800dbe2:	2203      	movs	r2, #3
 800dbe4:	4650      	mov	r0, sl
 800dbe6:	f7f2 fb03 	bl	80001f0 <memchr>
 800dbea:	b140      	cbz	r0, 800dbfe <_svfiprintf_r+0x152>
 800dbec:	2340      	movs	r3, #64	; 0x40
 800dbee:	eba0 000a 	sub.w	r0, r0, sl
 800dbf2:	fa03 f000 	lsl.w	r0, r3, r0
 800dbf6:	9b04      	ldr	r3, [sp, #16]
 800dbf8:	4303      	orrs	r3, r0
 800dbfa:	3401      	adds	r4, #1
 800dbfc:	9304      	str	r3, [sp, #16]
 800dbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc02:	4826      	ldr	r0, [pc, #152]	; (800dc9c <_svfiprintf_r+0x1f0>)
 800dc04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc08:	2206      	movs	r2, #6
 800dc0a:	f7f2 faf1 	bl	80001f0 <memchr>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d038      	beq.n	800dc84 <_svfiprintf_r+0x1d8>
 800dc12:	4b23      	ldr	r3, [pc, #140]	; (800dca0 <_svfiprintf_r+0x1f4>)
 800dc14:	bb1b      	cbnz	r3, 800dc5e <_svfiprintf_r+0x1b2>
 800dc16:	9b03      	ldr	r3, [sp, #12]
 800dc18:	3307      	adds	r3, #7
 800dc1a:	f023 0307 	bic.w	r3, r3, #7
 800dc1e:	3308      	adds	r3, #8
 800dc20:	9303      	str	r3, [sp, #12]
 800dc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc24:	4433      	add	r3, r6
 800dc26:	9309      	str	r3, [sp, #36]	; 0x24
 800dc28:	e767      	b.n	800dafa <_svfiprintf_r+0x4e>
 800dc2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc2e:	460c      	mov	r4, r1
 800dc30:	2001      	movs	r0, #1
 800dc32:	e7a5      	b.n	800db80 <_svfiprintf_r+0xd4>
 800dc34:	2300      	movs	r3, #0
 800dc36:	3401      	adds	r4, #1
 800dc38:	9305      	str	r3, [sp, #20]
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	f04f 0c0a 	mov.w	ip, #10
 800dc40:	4620      	mov	r0, r4
 800dc42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc46:	3a30      	subs	r2, #48	; 0x30
 800dc48:	2a09      	cmp	r2, #9
 800dc4a:	d903      	bls.n	800dc54 <_svfiprintf_r+0x1a8>
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0c5      	beq.n	800dbdc <_svfiprintf_r+0x130>
 800dc50:	9105      	str	r1, [sp, #20]
 800dc52:	e7c3      	b.n	800dbdc <_svfiprintf_r+0x130>
 800dc54:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc58:	4604      	mov	r4, r0
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e7f0      	b.n	800dc40 <_svfiprintf_r+0x194>
 800dc5e:	ab03      	add	r3, sp, #12
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	462a      	mov	r2, r5
 800dc64:	4b0f      	ldr	r3, [pc, #60]	; (800dca4 <_svfiprintf_r+0x1f8>)
 800dc66:	a904      	add	r1, sp, #16
 800dc68:	4638      	mov	r0, r7
 800dc6a:	f7fe f88d 	bl	800bd88 <_printf_float>
 800dc6e:	1c42      	adds	r2, r0, #1
 800dc70:	4606      	mov	r6, r0
 800dc72:	d1d6      	bne.n	800dc22 <_svfiprintf_r+0x176>
 800dc74:	89ab      	ldrh	r3, [r5, #12]
 800dc76:	065b      	lsls	r3, r3, #25
 800dc78:	f53f af2c 	bmi.w	800dad4 <_svfiprintf_r+0x28>
 800dc7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc7e:	b01d      	add	sp, #116	; 0x74
 800dc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc84:	ab03      	add	r3, sp, #12
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	462a      	mov	r2, r5
 800dc8a:	4b06      	ldr	r3, [pc, #24]	; (800dca4 <_svfiprintf_r+0x1f8>)
 800dc8c:	a904      	add	r1, sp, #16
 800dc8e:	4638      	mov	r0, r7
 800dc90:	f7fe fb1e 	bl	800c2d0 <_printf_i>
 800dc94:	e7eb      	b.n	800dc6e <_svfiprintf_r+0x1c2>
 800dc96:	bf00      	nop
 800dc98:	08019b44 	.word	0x08019b44
 800dc9c:	08019b4e 	.word	0x08019b4e
 800dca0:	0800bd89 	.word	0x0800bd89
 800dca4:	0800d9f7 	.word	0x0800d9f7
 800dca8:	08019b4a 	.word	0x08019b4a

0800dcac <__assert_func>:
 800dcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcae:	4614      	mov	r4, r2
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <__assert_func+0x2c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4605      	mov	r5, r0
 800dcb8:	68d8      	ldr	r0, [r3, #12]
 800dcba:	b14c      	cbz	r4, 800dcd0 <__assert_func+0x24>
 800dcbc:	4b07      	ldr	r3, [pc, #28]	; (800dcdc <__assert_func+0x30>)
 800dcbe:	9100      	str	r1, [sp, #0]
 800dcc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcc4:	4906      	ldr	r1, [pc, #24]	; (800dce0 <__assert_func+0x34>)
 800dcc6:	462b      	mov	r3, r5
 800dcc8:	f000 f80e 	bl	800dce8 <fiprintf>
 800dccc:	f000 fa62 	bl	800e194 <abort>
 800dcd0:	4b04      	ldr	r3, [pc, #16]	; (800dce4 <__assert_func+0x38>)
 800dcd2:	461c      	mov	r4, r3
 800dcd4:	e7f3      	b.n	800dcbe <__assert_func+0x12>
 800dcd6:	bf00      	nop
 800dcd8:	20000c74 	.word	0x20000c74
 800dcdc:	08019b55 	.word	0x08019b55
 800dce0:	08019b62 	.word	0x08019b62
 800dce4:	08019b90 	.word	0x08019b90

0800dce8 <fiprintf>:
 800dce8:	b40e      	push	{r1, r2, r3}
 800dcea:	b503      	push	{r0, r1, lr}
 800dcec:	4601      	mov	r1, r0
 800dcee:	ab03      	add	r3, sp, #12
 800dcf0:	4805      	ldr	r0, [pc, #20]	; (800dd08 <fiprintf+0x20>)
 800dcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcf6:	6800      	ldr	r0, [r0, #0]
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	f000 f84d 	bl	800dd98 <_vfiprintf_r>
 800dcfe:	b002      	add	sp, #8
 800dd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd04:	b003      	add	sp, #12
 800dd06:	4770      	bx	lr
 800dd08:	20000c74 	.word	0x20000c74

0800dd0c <__retarget_lock_init_recursive>:
 800dd0c:	4770      	bx	lr

0800dd0e <__retarget_lock_acquire_recursive>:
 800dd0e:	4770      	bx	lr

0800dd10 <__retarget_lock_release_recursive>:
 800dd10:	4770      	bx	lr

0800dd12 <__ascii_mbtowc>:
 800dd12:	b082      	sub	sp, #8
 800dd14:	b901      	cbnz	r1, 800dd18 <__ascii_mbtowc+0x6>
 800dd16:	a901      	add	r1, sp, #4
 800dd18:	b142      	cbz	r2, 800dd2c <__ascii_mbtowc+0x1a>
 800dd1a:	b14b      	cbz	r3, 800dd30 <__ascii_mbtowc+0x1e>
 800dd1c:	7813      	ldrb	r3, [r2, #0]
 800dd1e:	600b      	str	r3, [r1, #0]
 800dd20:	7812      	ldrb	r2, [r2, #0]
 800dd22:	1e10      	subs	r0, r2, #0
 800dd24:	bf18      	it	ne
 800dd26:	2001      	movne	r0, #1
 800dd28:	b002      	add	sp, #8
 800dd2a:	4770      	bx	lr
 800dd2c:	4610      	mov	r0, r2
 800dd2e:	e7fb      	b.n	800dd28 <__ascii_mbtowc+0x16>
 800dd30:	f06f 0001 	mvn.w	r0, #1
 800dd34:	e7f8      	b.n	800dd28 <__ascii_mbtowc+0x16>

0800dd36 <_malloc_usable_size_r>:
 800dd36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd3a:	1f18      	subs	r0, r3, #4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	bfbc      	itt	lt
 800dd40:	580b      	ldrlt	r3, [r1, r0]
 800dd42:	18c0      	addlt	r0, r0, r3
 800dd44:	4770      	bx	lr

0800dd46 <__sfputc_r>:
 800dd46:	6893      	ldr	r3, [r2, #8]
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	b410      	push	{r4}
 800dd4e:	6093      	str	r3, [r2, #8]
 800dd50:	da08      	bge.n	800dd64 <__sfputc_r+0x1e>
 800dd52:	6994      	ldr	r4, [r2, #24]
 800dd54:	42a3      	cmp	r3, r4
 800dd56:	db01      	blt.n	800dd5c <__sfputc_r+0x16>
 800dd58:	290a      	cmp	r1, #10
 800dd5a:	d103      	bne.n	800dd64 <__sfputc_r+0x1e>
 800dd5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd60:	f000 b94a 	b.w	800dff8 <__swbuf_r>
 800dd64:	6813      	ldr	r3, [r2, #0]
 800dd66:	1c58      	adds	r0, r3, #1
 800dd68:	6010      	str	r0, [r2, #0]
 800dd6a:	7019      	strb	r1, [r3, #0]
 800dd6c:	4608      	mov	r0, r1
 800dd6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <__sfputs_r>:
 800dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd76:	4606      	mov	r6, r0
 800dd78:	460f      	mov	r7, r1
 800dd7a:	4614      	mov	r4, r2
 800dd7c:	18d5      	adds	r5, r2, r3
 800dd7e:	42ac      	cmp	r4, r5
 800dd80:	d101      	bne.n	800dd86 <__sfputs_r+0x12>
 800dd82:	2000      	movs	r0, #0
 800dd84:	e007      	b.n	800dd96 <__sfputs_r+0x22>
 800dd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd8a:	463a      	mov	r2, r7
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f7ff ffda 	bl	800dd46 <__sfputc_r>
 800dd92:	1c43      	adds	r3, r0, #1
 800dd94:	d1f3      	bne.n	800dd7e <__sfputs_r+0xa>
 800dd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd98 <_vfiprintf_r>:
 800dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	460d      	mov	r5, r1
 800dd9e:	b09d      	sub	sp, #116	; 0x74
 800dda0:	4614      	mov	r4, r2
 800dda2:	4698      	mov	r8, r3
 800dda4:	4606      	mov	r6, r0
 800dda6:	b118      	cbz	r0, 800ddb0 <_vfiprintf_r+0x18>
 800dda8:	6983      	ldr	r3, [r0, #24]
 800ddaa:	b90b      	cbnz	r3, 800ddb0 <_vfiprintf_r+0x18>
 800ddac:	f000 fb14 	bl	800e3d8 <__sinit>
 800ddb0:	4b89      	ldr	r3, [pc, #548]	; (800dfd8 <_vfiprintf_r+0x240>)
 800ddb2:	429d      	cmp	r5, r3
 800ddb4:	d11b      	bne.n	800ddee <_vfiprintf_r+0x56>
 800ddb6:	6875      	ldr	r5, [r6, #4]
 800ddb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddba:	07d9      	lsls	r1, r3, #31
 800ddbc:	d405      	bmi.n	800ddca <_vfiprintf_r+0x32>
 800ddbe:	89ab      	ldrh	r3, [r5, #12]
 800ddc0:	059a      	lsls	r2, r3, #22
 800ddc2:	d402      	bmi.n	800ddca <_vfiprintf_r+0x32>
 800ddc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddc6:	f7ff ffa2 	bl	800dd0e <__retarget_lock_acquire_recursive>
 800ddca:	89ab      	ldrh	r3, [r5, #12]
 800ddcc:	071b      	lsls	r3, r3, #28
 800ddce:	d501      	bpl.n	800ddd4 <_vfiprintf_r+0x3c>
 800ddd0:	692b      	ldr	r3, [r5, #16]
 800ddd2:	b9eb      	cbnz	r3, 800de10 <_vfiprintf_r+0x78>
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f000 f96e 	bl	800e0b8 <__swsetup_r>
 800dddc:	b1c0      	cbz	r0, 800de10 <_vfiprintf_r+0x78>
 800ddde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde0:	07dc      	lsls	r4, r3, #31
 800dde2:	d50e      	bpl.n	800de02 <_vfiprintf_r+0x6a>
 800dde4:	f04f 30ff 	mov.w	r0, #4294967295
 800dde8:	b01d      	add	sp, #116	; 0x74
 800ddea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddee:	4b7b      	ldr	r3, [pc, #492]	; (800dfdc <_vfiprintf_r+0x244>)
 800ddf0:	429d      	cmp	r5, r3
 800ddf2:	d101      	bne.n	800ddf8 <_vfiprintf_r+0x60>
 800ddf4:	68b5      	ldr	r5, [r6, #8]
 800ddf6:	e7df      	b.n	800ddb8 <_vfiprintf_r+0x20>
 800ddf8:	4b79      	ldr	r3, [pc, #484]	; (800dfe0 <_vfiprintf_r+0x248>)
 800ddfa:	429d      	cmp	r5, r3
 800ddfc:	bf08      	it	eq
 800ddfe:	68f5      	ldreq	r5, [r6, #12]
 800de00:	e7da      	b.n	800ddb8 <_vfiprintf_r+0x20>
 800de02:	89ab      	ldrh	r3, [r5, #12]
 800de04:	0598      	lsls	r0, r3, #22
 800de06:	d4ed      	bmi.n	800dde4 <_vfiprintf_r+0x4c>
 800de08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de0a:	f7ff ff81 	bl	800dd10 <__retarget_lock_release_recursive>
 800de0e:	e7e9      	b.n	800dde4 <_vfiprintf_r+0x4c>
 800de10:	2300      	movs	r3, #0
 800de12:	9309      	str	r3, [sp, #36]	; 0x24
 800de14:	2320      	movs	r3, #32
 800de16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de1e:	2330      	movs	r3, #48	; 0x30
 800de20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfe4 <_vfiprintf_r+0x24c>
 800de24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de28:	f04f 0901 	mov.w	r9, #1
 800de2c:	4623      	mov	r3, r4
 800de2e:	469a      	mov	sl, r3
 800de30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de34:	b10a      	cbz	r2, 800de3a <_vfiprintf_r+0xa2>
 800de36:	2a25      	cmp	r2, #37	; 0x25
 800de38:	d1f9      	bne.n	800de2e <_vfiprintf_r+0x96>
 800de3a:	ebba 0b04 	subs.w	fp, sl, r4
 800de3e:	d00b      	beq.n	800de58 <_vfiprintf_r+0xc0>
 800de40:	465b      	mov	r3, fp
 800de42:	4622      	mov	r2, r4
 800de44:	4629      	mov	r1, r5
 800de46:	4630      	mov	r0, r6
 800de48:	f7ff ff94 	bl	800dd74 <__sfputs_r>
 800de4c:	3001      	adds	r0, #1
 800de4e:	f000 80aa 	beq.w	800dfa6 <_vfiprintf_r+0x20e>
 800de52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de54:	445a      	add	r2, fp
 800de56:	9209      	str	r2, [sp, #36]	; 0x24
 800de58:	f89a 3000 	ldrb.w	r3, [sl]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 80a2 	beq.w	800dfa6 <_vfiprintf_r+0x20e>
 800de62:	2300      	movs	r3, #0
 800de64:	f04f 32ff 	mov.w	r2, #4294967295
 800de68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de6c:	f10a 0a01 	add.w	sl, sl, #1
 800de70:	9304      	str	r3, [sp, #16]
 800de72:	9307      	str	r3, [sp, #28]
 800de74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de78:	931a      	str	r3, [sp, #104]	; 0x68
 800de7a:	4654      	mov	r4, sl
 800de7c:	2205      	movs	r2, #5
 800de7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de82:	4858      	ldr	r0, [pc, #352]	; (800dfe4 <_vfiprintf_r+0x24c>)
 800de84:	f7f2 f9b4 	bl	80001f0 <memchr>
 800de88:	9a04      	ldr	r2, [sp, #16]
 800de8a:	b9d8      	cbnz	r0, 800dec4 <_vfiprintf_r+0x12c>
 800de8c:	06d1      	lsls	r1, r2, #27
 800de8e:	bf44      	itt	mi
 800de90:	2320      	movmi	r3, #32
 800de92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de96:	0713      	lsls	r3, r2, #28
 800de98:	bf44      	itt	mi
 800de9a:	232b      	movmi	r3, #43	; 0x2b
 800de9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dea0:	f89a 3000 	ldrb.w	r3, [sl]
 800dea4:	2b2a      	cmp	r3, #42	; 0x2a
 800dea6:	d015      	beq.n	800ded4 <_vfiprintf_r+0x13c>
 800dea8:	9a07      	ldr	r2, [sp, #28]
 800deaa:	4654      	mov	r4, sl
 800deac:	2000      	movs	r0, #0
 800deae:	f04f 0c0a 	mov.w	ip, #10
 800deb2:	4621      	mov	r1, r4
 800deb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deb8:	3b30      	subs	r3, #48	; 0x30
 800deba:	2b09      	cmp	r3, #9
 800debc:	d94e      	bls.n	800df5c <_vfiprintf_r+0x1c4>
 800debe:	b1b0      	cbz	r0, 800deee <_vfiprintf_r+0x156>
 800dec0:	9207      	str	r2, [sp, #28]
 800dec2:	e014      	b.n	800deee <_vfiprintf_r+0x156>
 800dec4:	eba0 0308 	sub.w	r3, r0, r8
 800dec8:	fa09 f303 	lsl.w	r3, r9, r3
 800decc:	4313      	orrs	r3, r2
 800dece:	9304      	str	r3, [sp, #16]
 800ded0:	46a2      	mov	sl, r4
 800ded2:	e7d2      	b.n	800de7a <_vfiprintf_r+0xe2>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	1d19      	adds	r1, r3, #4
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	9103      	str	r1, [sp, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	bfbb      	ittet	lt
 800dee0:	425b      	neglt	r3, r3
 800dee2:	f042 0202 	orrlt.w	r2, r2, #2
 800dee6:	9307      	strge	r3, [sp, #28]
 800dee8:	9307      	strlt	r3, [sp, #28]
 800deea:	bfb8      	it	lt
 800deec:	9204      	strlt	r2, [sp, #16]
 800deee:	7823      	ldrb	r3, [r4, #0]
 800def0:	2b2e      	cmp	r3, #46	; 0x2e
 800def2:	d10c      	bne.n	800df0e <_vfiprintf_r+0x176>
 800def4:	7863      	ldrb	r3, [r4, #1]
 800def6:	2b2a      	cmp	r3, #42	; 0x2a
 800def8:	d135      	bne.n	800df66 <_vfiprintf_r+0x1ce>
 800defa:	9b03      	ldr	r3, [sp, #12]
 800defc:	1d1a      	adds	r2, r3, #4
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	9203      	str	r2, [sp, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	bfb8      	it	lt
 800df06:	f04f 33ff 	movlt.w	r3, #4294967295
 800df0a:	3402      	adds	r4, #2
 800df0c:	9305      	str	r3, [sp, #20]
 800df0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dff4 <_vfiprintf_r+0x25c>
 800df12:	7821      	ldrb	r1, [r4, #0]
 800df14:	2203      	movs	r2, #3
 800df16:	4650      	mov	r0, sl
 800df18:	f7f2 f96a 	bl	80001f0 <memchr>
 800df1c:	b140      	cbz	r0, 800df30 <_vfiprintf_r+0x198>
 800df1e:	2340      	movs	r3, #64	; 0x40
 800df20:	eba0 000a 	sub.w	r0, r0, sl
 800df24:	fa03 f000 	lsl.w	r0, r3, r0
 800df28:	9b04      	ldr	r3, [sp, #16]
 800df2a:	4303      	orrs	r3, r0
 800df2c:	3401      	adds	r4, #1
 800df2e:	9304      	str	r3, [sp, #16]
 800df30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df34:	482c      	ldr	r0, [pc, #176]	; (800dfe8 <_vfiprintf_r+0x250>)
 800df36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df3a:	2206      	movs	r2, #6
 800df3c:	f7f2 f958 	bl	80001f0 <memchr>
 800df40:	2800      	cmp	r0, #0
 800df42:	d03f      	beq.n	800dfc4 <_vfiprintf_r+0x22c>
 800df44:	4b29      	ldr	r3, [pc, #164]	; (800dfec <_vfiprintf_r+0x254>)
 800df46:	bb1b      	cbnz	r3, 800df90 <_vfiprintf_r+0x1f8>
 800df48:	9b03      	ldr	r3, [sp, #12]
 800df4a:	3307      	adds	r3, #7
 800df4c:	f023 0307 	bic.w	r3, r3, #7
 800df50:	3308      	adds	r3, #8
 800df52:	9303      	str	r3, [sp, #12]
 800df54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df56:	443b      	add	r3, r7
 800df58:	9309      	str	r3, [sp, #36]	; 0x24
 800df5a:	e767      	b.n	800de2c <_vfiprintf_r+0x94>
 800df5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df60:	460c      	mov	r4, r1
 800df62:	2001      	movs	r0, #1
 800df64:	e7a5      	b.n	800deb2 <_vfiprintf_r+0x11a>
 800df66:	2300      	movs	r3, #0
 800df68:	3401      	adds	r4, #1
 800df6a:	9305      	str	r3, [sp, #20]
 800df6c:	4619      	mov	r1, r3
 800df6e:	f04f 0c0a 	mov.w	ip, #10
 800df72:	4620      	mov	r0, r4
 800df74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df78:	3a30      	subs	r2, #48	; 0x30
 800df7a:	2a09      	cmp	r2, #9
 800df7c:	d903      	bls.n	800df86 <_vfiprintf_r+0x1ee>
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d0c5      	beq.n	800df0e <_vfiprintf_r+0x176>
 800df82:	9105      	str	r1, [sp, #20]
 800df84:	e7c3      	b.n	800df0e <_vfiprintf_r+0x176>
 800df86:	fb0c 2101 	mla	r1, ip, r1, r2
 800df8a:	4604      	mov	r4, r0
 800df8c:	2301      	movs	r3, #1
 800df8e:	e7f0      	b.n	800df72 <_vfiprintf_r+0x1da>
 800df90:	ab03      	add	r3, sp, #12
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	462a      	mov	r2, r5
 800df96:	4b16      	ldr	r3, [pc, #88]	; (800dff0 <_vfiprintf_r+0x258>)
 800df98:	a904      	add	r1, sp, #16
 800df9a:	4630      	mov	r0, r6
 800df9c:	f7fd fef4 	bl	800bd88 <_printf_float>
 800dfa0:	4607      	mov	r7, r0
 800dfa2:	1c78      	adds	r0, r7, #1
 800dfa4:	d1d6      	bne.n	800df54 <_vfiprintf_r+0x1bc>
 800dfa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfa8:	07d9      	lsls	r1, r3, #31
 800dfaa:	d405      	bmi.n	800dfb8 <_vfiprintf_r+0x220>
 800dfac:	89ab      	ldrh	r3, [r5, #12]
 800dfae:	059a      	lsls	r2, r3, #22
 800dfb0:	d402      	bmi.n	800dfb8 <_vfiprintf_r+0x220>
 800dfb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfb4:	f7ff feac 	bl	800dd10 <__retarget_lock_release_recursive>
 800dfb8:	89ab      	ldrh	r3, [r5, #12]
 800dfba:	065b      	lsls	r3, r3, #25
 800dfbc:	f53f af12 	bmi.w	800dde4 <_vfiprintf_r+0x4c>
 800dfc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfc2:	e711      	b.n	800dde8 <_vfiprintf_r+0x50>
 800dfc4:	ab03      	add	r3, sp, #12
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	462a      	mov	r2, r5
 800dfca:	4b09      	ldr	r3, [pc, #36]	; (800dff0 <_vfiprintf_r+0x258>)
 800dfcc:	a904      	add	r1, sp, #16
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f7fe f97e 	bl	800c2d0 <_printf_i>
 800dfd4:	e7e4      	b.n	800dfa0 <_vfiprintf_r+0x208>
 800dfd6:	bf00      	nop
 800dfd8:	08019cbc 	.word	0x08019cbc
 800dfdc:	08019cdc 	.word	0x08019cdc
 800dfe0:	08019c9c 	.word	0x08019c9c
 800dfe4:	08019b44 	.word	0x08019b44
 800dfe8:	08019b4e 	.word	0x08019b4e
 800dfec:	0800bd89 	.word	0x0800bd89
 800dff0:	0800dd75 	.word	0x0800dd75
 800dff4:	08019b4a 	.word	0x08019b4a

0800dff8 <__swbuf_r>:
 800dff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffa:	460e      	mov	r6, r1
 800dffc:	4614      	mov	r4, r2
 800dffe:	4605      	mov	r5, r0
 800e000:	b118      	cbz	r0, 800e00a <__swbuf_r+0x12>
 800e002:	6983      	ldr	r3, [r0, #24]
 800e004:	b90b      	cbnz	r3, 800e00a <__swbuf_r+0x12>
 800e006:	f000 f9e7 	bl	800e3d8 <__sinit>
 800e00a:	4b21      	ldr	r3, [pc, #132]	; (800e090 <__swbuf_r+0x98>)
 800e00c:	429c      	cmp	r4, r3
 800e00e:	d12b      	bne.n	800e068 <__swbuf_r+0x70>
 800e010:	686c      	ldr	r4, [r5, #4]
 800e012:	69a3      	ldr	r3, [r4, #24]
 800e014:	60a3      	str	r3, [r4, #8]
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	071a      	lsls	r2, r3, #28
 800e01a:	d52f      	bpl.n	800e07c <__swbuf_r+0x84>
 800e01c:	6923      	ldr	r3, [r4, #16]
 800e01e:	b36b      	cbz	r3, 800e07c <__swbuf_r+0x84>
 800e020:	6923      	ldr	r3, [r4, #16]
 800e022:	6820      	ldr	r0, [r4, #0]
 800e024:	1ac0      	subs	r0, r0, r3
 800e026:	6963      	ldr	r3, [r4, #20]
 800e028:	b2f6      	uxtb	r6, r6
 800e02a:	4283      	cmp	r3, r0
 800e02c:	4637      	mov	r7, r6
 800e02e:	dc04      	bgt.n	800e03a <__swbuf_r+0x42>
 800e030:	4621      	mov	r1, r4
 800e032:	4628      	mov	r0, r5
 800e034:	f000 f93c 	bl	800e2b0 <_fflush_r>
 800e038:	bb30      	cbnz	r0, 800e088 <__swbuf_r+0x90>
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	3b01      	subs	r3, #1
 800e03e:	60a3      	str	r3, [r4, #8]
 800e040:	6823      	ldr	r3, [r4, #0]
 800e042:	1c5a      	adds	r2, r3, #1
 800e044:	6022      	str	r2, [r4, #0]
 800e046:	701e      	strb	r6, [r3, #0]
 800e048:	6963      	ldr	r3, [r4, #20]
 800e04a:	3001      	adds	r0, #1
 800e04c:	4283      	cmp	r3, r0
 800e04e:	d004      	beq.n	800e05a <__swbuf_r+0x62>
 800e050:	89a3      	ldrh	r3, [r4, #12]
 800e052:	07db      	lsls	r3, r3, #31
 800e054:	d506      	bpl.n	800e064 <__swbuf_r+0x6c>
 800e056:	2e0a      	cmp	r6, #10
 800e058:	d104      	bne.n	800e064 <__swbuf_r+0x6c>
 800e05a:	4621      	mov	r1, r4
 800e05c:	4628      	mov	r0, r5
 800e05e:	f000 f927 	bl	800e2b0 <_fflush_r>
 800e062:	b988      	cbnz	r0, 800e088 <__swbuf_r+0x90>
 800e064:	4638      	mov	r0, r7
 800e066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e068:	4b0a      	ldr	r3, [pc, #40]	; (800e094 <__swbuf_r+0x9c>)
 800e06a:	429c      	cmp	r4, r3
 800e06c:	d101      	bne.n	800e072 <__swbuf_r+0x7a>
 800e06e:	68ac      	ldr	r4, [r5, #8]
 800e070:	e7cf      	b.n	800e012 <__swbuf_r+0x1a>
 800e072:	4b09      	ldr	r3, [pc, #36]	; (800e098 <__swbuf_r+0xa0>)
 800e074:	429c      	cmp	r4, r3
 800e076:	bf08      	it	eq
 800e078:	68ec      	ldreq	r4, [r5, #12]
 800e07a:	e7ca      	b.n	800e012 <__swbuf_r+0x1a>
 800e07c:	4621      	mov	r1, r4
 800e07e:	4628      	mov	r0, r5
 800e080:	f000 f81a 	bl	800e0b8 <__swsetup_r>
 800e084:	2800      	cmp	r0, #0
 800e086:	d0cb      	beq.n	800e020 <__swbuf_r+0x28>
 800e088:	f04f 37ff 	mov.w	r7, #4294967295
 800e08c:	e7ea      	b.n	800e064 <__swbuf_r+0x6c>
 800e08e:	bf00      	nop
 800e090:	08019cbc 	.word	0x08019cbc
 800e094:	08019cdc 	.word	0x08019cdc
 800e098:	08019c9c 	.word	0x08019c9c

0800e09c <__ascii_wctomb>:
 800e09c:	b149      	cbz	r1, 800e0b2 <__ascii_wctomb+0x16>
 800e09e:	2aff      	cmp	r2, #255	; 0xff
 800e0a0:	bf85      	ittet	hi
 800e0a2:	238a      	movhi	r3, #138	; 0x8a
 800e0a4:	6003      	strhi	r3, [r0, #0]
 800e0a6:	700a      	strbls	r2, [r1, #0]
 800e0a8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e0ac:	bf98      	it	ls
 800e0ae:	2001      	movls	r0, #1
 800e0b0:	4770      	bx	lr
 800e0b2:	4608      	mov	r0, r1
 800e0b4:	4770      	bx	lr
	...

0800e0b8 <__swsetup_r>:
 800e0b8:	4b32      	ldr	r3, [pc, #200]	; (800e184 <__swsetup_r+0xcc>)
 800e0ba:	b570      	push	{r4, r5, r6, lr}
 800e0bc:	681d      	ldr	r5, [r3, #0]
 800e0be:	4606      	mov	r6, r0
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	b125      	cbz	r5, 800e0ce <__swsetup_r+0x16>
 800e0c4:	69ab      	ldr	r3, [r5, #24]
 800e0c6:	b913      	cbnz	r3, 800e0ce <__swsetup_r+0x16>
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f000 f985 	bl	800e3d8 <__sinit>
 800e0ce:	4b2e      	ldr	r3, [pc, #184]	; (800e188 <__swsetup_r+0xd0>)
 800e0d0:	429c      	cmp	r4, r3
 800e0d2:	d10f      	bne.n	800e0f4 <__swsetup_r+0x3c>
 800e0d4:	686c      	ldr	r4, [r5, #4]
 800e0d6:	89a3      	ldrh	r3, [r4, #12]
 800e0d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0dc:	0719      	lsls	r1, r3, #28
 800e0de:	d42c      	bmi.n	800e13a <__swsetup_r+0x82>
 800e0e0:	06dd      	lsls	r5, r3, #27
 800e0e2:	d411      	bmi.n	800e108 <__swsetup_r+0x50>
 800e0e4:	2309      	movs	r3, #9
 800e0e6:	6033      	str	r3, [r6, #0]
 800e0e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0ec:	81a3      	strh	r3, [r4, #12]
 800e0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f2:	e03e      	b.n	800e172 <__swsetup_r+0xba>
 800e0f4:	4b25      	ldr	r3, [pc, #148]	; (800e18c <__swsetup_r+0xd4>)
 800e0f6:	429c      	cmp	r4, r3
 800e0f8:	d101      	bne.n	800e0fe <__swsetup_r+0x46>
 800e0fa:	68ac      	ldr	r4, [r5, #8]
 800e0fc:	e7eb      	b.n	800e0d6 <__swsetup_r+0x1e>
 800e0fe:	4b24      	ldr	r3, [pc, #144]	; (800e190 <__swsetup_r+0xd8>)
 800e100:	429c      	cmp	r4, r3
 800e102:	bf08      	it	eq
 800e104:	68ec      	ldreq	r4, [r5, #12]
 800e106:	e7e6      	b.n	800e0d6 <__swsetup_r+0x1e>
 800e108:	0758      	lsls	r0, r3, #29
 800e10a:	d512      	bpl.n	800e132 <__swsetup_r+0x7a>
 800e10c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e10e:	b141      	cbz	r1, 800e122 <__swsetup_r+0x6a>
 800e110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e114:	4299      	cmp	r1, r3
 800e116:	d002      	beq.n	800e11e <__swsetup_r+0x66>
 800e118:	4630      	mov	r0, r6
 800e11a:	f7fd fceb 	bl	800baf4 <_free_r>
 800e11e:	2300      	movs	r3, #0
 800e120:	6363      	str	r3, [r4, #52]	; 0x34
 800e122:	89a3      	ldrh	r3, [r4, #12]
 800e124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e128:	81a3      	strh	r3, [r4, #12]
 800e12a:	2300      	movs	r3, #0
 800e12c:	6063      	str	r3, [r4, #4]
 800e12e:	6923      	ldr	r3, [r4, #16]
 800e130:	6023      	str	r3, [r4, #0]
 800e132:	89a3      	ldrh	r3, [r4, #12]
 800e134:	f043 0308 	orr.w	r3, r3, #8
 800e138:	81a3      	strh	r3, [r4, #12]
 800e13a:	6923      	ldr	r3, [r4, #16]
 800e13c:	b94b      	cbnz	r3, 800e152 <__swsetup_r+0x9a>
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e148:	d003      	beq.n	800e152 <__swsetup_r+0x9a>
 800e14a:	4621      	mov	r1, r4
 800e14c:	4630      	mov	r0, r6
 800e14e:	f000 fa05 	bl	800e55c <__smakebuf_r>
 800e152:	89a0      	ldrh	r0, [r4, #12]
 800e154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e158:	f010 0301 	ands.w	r3, r0, #1
 800e15c:	d00a      	beq.n	800e174 <__swsetup_r+0xbc>
 800e15e:	2300      	movs	r3, #0
 800e160:	60a3      	str	r3, [r4, #8]
 800e162:	6963      	ldr	r3, [r4, #20]
 800e164:	425b      	negs	r3, r3
 800e166:	61a3      	str	r3, [r4, #24]
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	b943      	cbnz	r3, 800e17e <__swsetup_r+0xc6>
 800e16c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e170:	d1ba      	bne.n	800e0e8 <__swsetup_r+0x30>
 800e172:	bd70      	pop	{r4, r5, r6, pc}
 800e174:	0781      	lsls	r1, r0, #30
 800e176:	bf58      	it	pl
 800e178:	6963      	ldrpl	r3, [r4, #20]
 800e17a:	60a3      	str	r3, [r4, #8]
 800e17c:	e7f4      	b.n	800e168 <__swsetup_r+0xb0>
 800e17e:	2000      	movs	r0, #0
 800e180:	e7f7      	b.n	800e172 <__swsetup_r+0xba>
 800e182:	bf00      	nop
 800e184:	20000c74 	.word	0x20000c74
 800e188:	08019cbc 	.word	0x08019cbc
 800e18c:	08019cdc 	.word	0x08019cdc
 800e190:	08019c9c 	.word	0x08019c9c

0800e194 <abort>:
 800e194:	b508      	push	{r3, lr}
 800e196:	2006      	movs	r0, #6
 800e198:	f000 fa48 	bl	800e62c <raise>
 800e19c:	2001      	movs	r0, #1
 800e19e:	f000 fe2f 	bl	800ee00 <_exit>
	...

0800e1a4 <__sflush_r>:
 800e1a4:	898a      	ldrh	r2, [r1, #12]
 800e1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1aa:	4605      	mov	r5, r0
 800e1ac:	0710      	lsls	r0, r2, #28
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	d458      	bmi.n	800e264 <__sflush_r+0xc0>
 800e1b2:	684b      	ldr	r3, [r1, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	dc05      	bgt.n	800e1c4 <__sflush_r+0x20>
 800e1b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	dc02      	bgt.n	800e1c4 <__sflush_r+0x20>
 800e1be:	2000      	movs	r0, #0
 800e1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1c6:	2e00      	cmp	r6, #0
 800e1c8:	d0f9      	beq.n	800e1be <__sflush_r+0x1a>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1d0:	682f      	ldr	r7, [r5, #0]
 800e1d2:	602b      	str	r3, [r5, #0]
 800e1d4:	d032      	beq.n	800e23c <__sflush_r+0x98>
 800e1d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1d8:	89a3      	ldrh	r3, [r4, #12]
 800e1da:	075a      	lsls	r2, r3, #29
 800e1dc:	d505      	bpl.n	800e1ea <__sflush_r+0x46>
 800e1de:	6863      	ldr	r3, [r4, #4]
 800e1e0:	1ac0      	subs	r0, r0, r3
 800e1e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1e4:	b10b      	cbz	r3, 800e1ea <__sflush_r+0x46>
 800e1e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1e8:	1ac0      	subs	r0, r0, r3
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1f0:	6a21      	ldr	r1, [r4, #32]
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	47b0      	blx	r6
 800e1f6:	1c43      	adds	r3, r0, #1
 800e1f8:	89a3      	ldrh	r3, [r4, #12]
 800e1fa:	d106      	bne.n	800e20a <__sflush_r+0x66>
 800e1fc:	6829      	ldr	r1, [r5, #0]
 800e1fe:	291d      	cmp	r1, #29
 800e200:	d82c      	bhi.n	800e25c <__sflush_r+0xb8>
 800e202:	4a2a      	ldr	r2, [pc, #168]	; (800e2ac <__sflush_r+0x108>)
 800e204:	40ca      	lsrs	r2, r1
 800e206:	07d6      	lsls	r6, r2, #31
 800e208:	d528      	bpl.n	800e25c <__sflush_r+0xb8>
 800e20a:	2200      	movs	r2, #0
 800e20c:	6062      	str	r2, [r4, #4]
 800e20e:	04d9      	lsls	r1, r3, #19
 800e210:	6922      	ldr	r2, [r4, #16]
 800e212:	6022      	str	r2, [r4, #0]
 800e214:	d504      	bpl.n	800e220 <__sflush_r+0x7c>
 800e216:	1c42      	adds	r2, r0, #1
 800e218:	d101      	bne.n	800e21e <__sflush_r+0x7a>
 800e21a:	682b      	ldr	r3, [r5, #0]
 800e21c:	b903      	cbnz	r3, 800e220 <__sflush_r+0x7c>
 800e21e:	6560      	str	r0, [r4, #84]	; 0x54
 800e220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e222:	602f      	str	r7, [r5, #0]
 800e224:	2900      	cmp	r1, #0
 800e226:	d0ca      	beq.n	800e1be <__sflush_r+0x1a>
 800e228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e22c:	4299      	cmp	r1, r3
 800e22e:	d002      	beq.n	800e236 <__sflush_r+0x92>
 800e230:	4628      	mov	r0, r5
 800e232:	f7fd fc5f 	bl	800baf4 <_free_r>
 800e236:	2000      	movs	r0, #0
 800e238:	6360      	str	r0, [r4, #52]	; 0x34
 800e23a:	e7c1      	b.n	800e1c0 <__sflush_r+0x1c>
 800e23c:	6a21      	ldr	r1, [r4, #32]
 800e23e:	2301      	movs	r3, #1
 800e240:	4628      	mov	r0, r5
 800e242:	47b0      	blx	r6
 800e244:	1c41      	adds	r1, r0, #1
 800e246:	d1c7      	bne.n	800e1d8 <__sflush_r+0x34>
 800e248:	682b      	ldr	r3, [r5, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d0c4      	beq.n	800e1d8 <__sflush_r+0x34>
 800e24e:	2b1d      	cmp	r3, #29
 800e250:	d001      	beq.n	800e256 <__sflush_r+0xb2>
 800e252:	2b16      	cmp	r3, #22
 800e254:	d101      	bne.n	800e25a <__sflush_r+0xb6>
 800e256:	602f      	str	r7, [r5, #0]
 800e258:	e7b1      	b.n	800e1be <__sflush_r+0x1a>
 800e25a:	89a3      	ldrh	r3, [r4, #12]
 800e25c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e260:	81a3      	strh	r3, [r4, #12]
 800e262:	e7ad      	b.n	800e1c0 <__sflush_r+0x1c>
 800e264:	690f      	ldr	r7, [r1, #16]
 800e266:	2f00      	cmp	r7, #0
 800e268:	d0a9      	beq.n	800e1be <__sflush_r+0x1a>
 800e26a:	0793      	lsls	r3, r2, #30
 800e26c:	680e      	ldr	r6, [r1, #0]
 800e26e:	bf08      	it	eq
 800e270:	694b      	ldreq	r3, [r1, #20]
 800e272:	600f      	str	r7, [r1, #0]
 800e274:	bf18      	it	ne
 800e276:	2300      	movne	r3, #0
 800e278:	eba6 0807 	sub.w	r8, r6, r7
 800e27c:	608b      	str	r3, [r1, #8]
 800e27e:	f1b8 0f00 	cmp.w	r8, #0
 800e282:	dd9c      	ble.n	800e1be <__sflush_r+0x1a>
 800e284:	6a21      	ldr	r1, [r4, #32]
 800e286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e288:	4643      	mov	r3, r8
 800e28a:	463a      	mov	r2, r7
 800e28c:	4628      	mov	r0, r5
 800e28e:	47b0      	blx	r6
 800e290:	2800      	cmp	r0, #0
 800e292:	dc06      	bgt.n	800e2a2 <__sflush_r+0xfe>
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e29a:	81a3      	strh	r3, [r4, #12]
 800e29c:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a0:	e78e      	b.n	800e1c0 <__sflush_r+0x1c>
 800e2a2:	4407      	add	r7, r0
 800e2a4:	eba8 0800 	sub.w	r8, r8, r0
 800e2a8:	e7e9      	b.n	800e27e <__sflush_r+0xda>
 800e2aa:	bf00      	nop
 800e2ac:	20400001 	.word	0x20400001

0800e2b0 <_fflush_r>:
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	690b      	ldr	r3, [r1, #16]
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	b913      	cbnz	r3, 800e2c0 <_fflush_r+0x10>
 800e2ba:	2500      	movs	r5, #0
 800e2bc:	4628      	mov	r0, r5
 800e2be:	bd38      	pop	{r3, r4, r5, pc}
 800e2c0:	b118      	cbz	r0, 800e2ca <_fflush_r+0x1a>
 800e2c2:	6983      	ldr	r3, [r0, #24]
 800e2c4:	b90b      	cbnz	r3, 800e2ca <_fflush_r+0x1a>
 800e2c6:	f000 f887 	bl	800e3d8 <__sinit>
 800e2ca:	4b14      	ldr	r3, [pc, #80]	; (800e31c <_fflush_r+0x6c>)
 800e2cc:	429c      	cmp	r4, r3
 800e2ce:	d11b      	bne.n	800e308 <_fflush_r+0x58>
 800e2d0:	686c      	ldr	r4, [r5, #4]
 800e2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d0ef      	beq.n	800e2ba <_fflush_r+0xa>
 800e2da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2dc:	07d0      	lsls	r0, r2, #31
 800e2de:	d404      	bmi.n	800e2ea <_fflush_r+0x3a>
 800e2e0:	0599      	lsls	r1, r3, #22
 800e2e2:	d402      	bmi.n	800e2ea <_fflush_r+0x3a>
 800e2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2e6:	f7ff fd12 	bl	800dd0e <__retarget_lock_acquire_recursive>
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	f7ff ff59 	bl	800e1a4 <__sflush_r>
 800e2f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2f4:	07da      	lsls	r2, r3, #31
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	d4e0      	bmi.n	800e2bc <_fflush_r+0xc>
 800e2fa:	89a3      	ldrh	r3, [r4, #12]
 800e2fc:	059b      	lsls	r3, r3, #22
 800e2fe:	d4dd      	bmi.n	800e2bc <_fflush_r+0xc>
 800e300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e302:	f7ff fd05 	bl	800dd10 <__retarget_lock_release_recursive>
 800e306:	e7d9      	b.n	800e2bc <_fflush_r+0xc>
 800e308:	4b05      	ldr	r3, [pc, #20]	; (800e320 <_fflush_r+0x70>)
 800e30a:	429c      	cmp	r4, r3
 800e30c:	d101      	bne.n	800e312 <_fflush_r+0x62>
 800e30e:	68ac      	ldr	r4, [r5, #8]
 800e310:	e7df      	b.n	800e2d2 <_fflush_r+0x22>
 800e312:	4b04      	ldr	r3, [pc, #16]	; (800e324 <_fflush_r+0x74>)
 800e314:	429c      	cmp	r4, r3
 800e316:	bf08      	it	eq
 800e318:	68ec      	ldreq	r4, [r5, #12]
 800e31a:	e7da      	b.n	800e2d2 <_fflush_r+0x22>
 800e31c:	08019cbc 	.word	0x08019cbc
 800e320:	08019cdc 	.word	0x08019cdc
 800e324:	08019c9c 	.word	0x08019c9c

0800e328 <std>:
 800e328:	2300      	movs	r3, #0
 800e32a:	b510      	push	{r4, lr}
 800e32c:	4604      	mov	r4, r0
 800e32e:	e9c0 3300 	strd	r3, r3, [r0]
 800e332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e336:	6083      	str	r3, [r0, #8]
 800e338:	8181      	strh	r1, [r0, #12]
 800e33a:	6643      	str	r3, [r0, #100]	; 0x64
 800e33c:	81c2      	strh	r2, [r0, #14]
 800e33e:	6183      	str	r3, [r0, #24]
 800e340:	4619      	mov	r1, r3
 800e342:	2208      	movs	r2, #8
 800e344:	305c      	adds	r0, #92	; 0x5c
 800e346:	f7fd fbcd 	bl	800bae4 <memset>
 800e34a:	4b05      	ldr	r3, [pc, #20]	; (800e360 <std+0x38>)
 800e34c:	6263      	str	r3, [r4, #36]	; 0x24
 800e34e:	4b05      	ldr	r3, [pc, #20]	; (800e364 <std+0x3c>)
 800e350:	62a3      	str	r3, [r4, #40]	; 0x28
 800e352:	4b05      	ldr	r3, [pc, #20]	; (800e368 <std+0x40>)
 800e354:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e356:	4b05      	ldr	r3, [pc, #20]	; (800e36c <std+0x44>)
 800e358:	6224      	str	r4, [r4, #32]
 800e35a:	6323      	str	r3, [r4, #48]	; 0x30
 800e35c:	bd10      	pop	{r4, pc}
 800e35e:	bf00      	nop
 800e360:	0800e665 	.word	0x0800e665
 800e364:	0800e687 	.word	0x0800e687
 800e368:	0800e6bf 	.word	0x0800e6bf
 800e36c:	0800e6e3 	.word	0x0800e6e3

0800e370 <_cleanup_r>:
 800e370:	4901      	ldr	r1, [pc, #4]	; (800e378 <_cleanup_r+0x8>)
 800e372:	f000 b8af 	b.w	800e4d4 <_fwalk_reent>
 800e376:	bf00      	nop
 800e378:	0800e2b1 	.word	0x0800e2b1

0800e37c <__sfmoreglue>:
 800e37c:	b570      	push	{r4, r5, r6, lr}
 800e37e:	1e4a      	subs	r2, r1, #1
 800e380:	2568      	movs	r5, #104	; 0x68
 800e382:	4355      	muls	r5, r2
 800e384:	460e      	mov	r6, r1
 800e386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e38a:	f7fd fc03 	bl	800bb94 <_malloc_r>
 800e38e:	4604      	mov	r4, r0
 800e390:	b140      	cbz	r0, 800e3a4 <__sfmoreglue+0x28>
 800e392:	2100      	movs	r1, #0
 800e394:	e9c0 1600 	strd	r1, r6, [r0]
 800e398:	300c      	adds	r0, #12
 800e39a:	60a0      	str	r0, [r4, #8]
 800e39c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3a0:	f7fd fba0 	bl	800bae4 <memset>
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}

0800e3a8 <__sfp_lock_acquire>:
 800e3a8:	4801      	ldr	r0, [pc, #4]	; (800e3b0 <__sfp_lock_acquire+0x8>)
 800e3aa:	f7ff bcb0 	b.w	800dd0e <__retarget_lock_acquire_recursive>
 800e3ae:	bf00      	nop
 800e3b0:	200093d4 	.word	0x200093d4

0800e3b4 <__sfp_lock_release>:
 800e3b4:	4801      	ldr	r0, [pc, #4]	; (800e3bc <__sfp_lock_release+0x8>)
 800e3b6:	f7ff bcab 	b.w	800dd10 <__retarget_lock_release_recursive>
 800e3ba:	bf00      	nop
 800e3bc:	200093d4 	.word	0x200093d4

0800e3c0 <__sinit_lock_acquire>:
 800e3c0:	4801      	ldr	r0, [pc, #4]	; (800e3c8 <__sinit_lock_acquire+0x8>)
 800e3c2:	f7ff bca4 	b.w	800dd0e <__retarget_lock_acquire_recursive>
 800e3c6:	bf00      	nop
 800e3c8:	200093cf 	.word	0x200093cf

0800e3cc <__sinit_lock_release>:
 800e3cc:	4801      	ldr	r0, [pc, #4]	; (800e3d4 <__sinit_lock_release+0x8>)
 800e3ce:	f7ff bc9f 	b.w	800dd10 <__retarget_lock_release_recursive>
 800e3d2:	bf00      	nop
 800e3d4:	200093cf 	.word	0x200093cf

0800e3d8 <__sinit>:
 800e3d8:	b510      	push	{r4, lr}
 800e3da:	4604      	mov	r4, r0
 800e3dc:	f7ff fff0 	bl	800e3c0 <__sinit_lock_acquire>
 800e3e0:	69a3      	ldr	r3, [r4, #24]
 800e3e2:	b11b      	cbz	r3, 800e3ec <__sinit+0x14>
 800e3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3e8:	f7ff bff0 	b.w	800e3cc <__sinit_lock_release>
 800e3ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e3f0:	6523      	str	r3, [r4, #80]	; 0x50
 800e3f2:	4b13      	ldr	r3, [pc, #76]	; (800e440 <__sinit+0x68>)
 800e3f4:	4a13      	ldr	r2, [pc, #76]	; (800e444 <__sinit+0x6c>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e3fa:	42a3      	cmp	r3, r4
 800e3fc:	bf04      	itt	eq
 800e3fe:	2301      	moveq	r3, #1
 800e400:	61a3      	streq	r3, [r4, #24]
 800e402:	4620      	mov	r0, r4
 800e404:	f000 f820 	bl	800e448 <__sfp>
 800e408:	6060      	str	r0, [r4, #4]
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 f81c 	bl	800e448 <__sfp>
 800e410:	60a0      	str	r0, [r4, #8]
 800e412:	4620      	mov	r0, r4
 800e414:	f000 f818 	bl	800e448 <__sfp>
 800e418:	2200      	movs	r2, #0
 800e41a:	60e0      	str	r0, [r4, #12]
 800e41c:	2104      	movs	r1, #4
 800e41e:	6860      	ldr	r0, [r4, #4]
 800e420:	f7ff ff82 	bl	800e328 <std>
 800e424:	68a0      	ldr	r0, [r4, #8]
 800e426:	2201      	movs	r2, #1
 800e428:	2109      	movs	r1, #9
 800e42a:	f7ff ff7d 	bl	800e328 <std>
 800e42e:	68e0      	ldr	r0, [r4, #12]
 800e430:	2202      	movs	r2, #2
 800e432:	2112      	movs	r1, #18
 800e434:	f7ff ff78 	bl	800e328 <std>
 800e438:	2301      	movs	r3, #1
 800e43a:	61a3      	str	r3, [r4, #24]
 800e43c:	e7d2      	b.n	800e3e4 <__sinit+0xc>
 800e43e:	bf00      	nop
 800e440:	0801991c 	.word	0x0801991c
 800e444:	0800e371 	.word	0x0800e371

0800e448 <__sfp>:
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44a:	4607      	mov	r7, r0
 800e44c:	f7ff ffac 	bl	800e3a8 <__sfp_lock_acquire>
 800e450:	4b1e      	ldr	r3, [pc, #120]	; (800e4cc <__sfp+0x84>)
 800e452:	681e      	ldr	r6, [r3, #0]
 800e454:	69b3      	ldr	r3, [r6, #24]
 800e456:	b913      	cbnz	r3, 800e45e <__sfp+0x16>
 800e458:	4630      	mov	r0, r6
 800e45a:	f7ff ffbd 	bl	800e3d8 <__sinit>
 800e45e:	3648      	adds	r6, #72	; 0x48
 800e460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e464:	3b01      	subs	r3, #1
 800e466:	d503      	bpl.n	800e470 <__sfp+0x28>
 800e468:	6833      	ldr	r3, [r6, #0]
 800e46a:	b30b      	cbz	r3, 800e4b0 <__sfp+0x68>
 800e46c:	6836      	ldr	r6, [r6, #0]
 800e46e:	e7f7      	b.n	800e460 <__sfp+0x18>
 800e470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e474:	b9d5      	cbnz	r5, 800e4ac <__sfp+0x64>
 800e476:	4b16      	ldr	r3, [pc, #88]	; (800e4d0 <__sfp+0x88>)
 800e478:	60e3      	str	r3, [r4, #12]
 800e47a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e47e:	6665      	str	r5, [r4, #100]	; 0x64
 800e480:	f7ff fc44 	bl	800dd0c <__retarget_lock_init_recursive>
 800e484:	f7ff ff96 	bl	800e3b4 <__sfp_lock_release>
 800e488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e48c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e490:	6025      	str	r5, [r4, #0]
 800e492:	61a5      	str	r5, [r4, #24]
 800e494:	2208      	movs	r2, #8
 800e496:	4629      	mov	r1, r5
 800e498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e49c:	f7fd fb22 	bl	800bae4 <memset>
 800e4a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ac:	3468      	adds	r4, #104	; 0x68
 800e4ae:	e7d9      	b.n	800e464 <__sfp+0x1c>
 800e4b0:	2104      	movs	r1, #4
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f7ff ff62 	bl	800e37c <__sfmoreglue>
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	6030      	str	r0, [r6, #0]
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d1d5      	bne.n	800e46c <__sfp+0x24>
 800e4c0:	f7ff ff78 	bl	800e3b4 <__sfp_lock_release>
 800e4c4:	230c      	movs	r3, #12
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	e7ee      	b.n	800e4a8 <__sfp+0x60>
 800e4ca:	bf00      	nop
 800e4cc:	0801991c 	.word	0x0801991c
 800e4d0:	ffff0001 	.word	0xffff0001

0800e4d4 <_fwalk_reent>:
 800e4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d8:	4606      	mov	r6, r0
 800e4da:	4688      	mov	r8, r1
 800e4dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e4e0:	2700      	movs	r7, #0
 800e4e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4e6:	f1b9 0901 	subs.w	r9, r9, #1
 800e4ea:	d505      	bpl.n	800e4f8 <_fwalk_reent+0x24>
 800e4ec:	6824      	ldr	r4, [r4, #0]
 800e4ee:	2c00      	cmp	r4, #0
 800e4f0:	d1f7      	bne.n	800e4e2 <_fwalk_reent+0xe>
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4f8:	89ab      	ldrh	r3, [r5, #12]
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d907      	bls.n	800e50e <_fwalk_reent+0x3a>
 800e4fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e502:	3301      	adds	r3, #1
 800e504:	d003      	beq.n	800e50e <_fwalk_reent+0x3a>
 800e506:	4629      	mov	r1, r5
 800e508:	4630      	mov	r0, r6
 800e50a:	47c0      	blx	r8
 800e50c:	4307      	orrs	r7, r0
 800e50e:	3568      	adds	r5, #104	; 0x68
 800e510:	e7e9      	b.n	800e4e6 <_fwalk_reent+0x12>

0800e512 <__swhatbuf_r>:
 800e512:	b570      	push	{r4, r5, r6, lr}
 800e514:	460e      	mov	r6, r1
 800e516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e51a:	2900      	cmp	r1, #0
 800e51c:	b096      	sub	sp, #88	; 0x58
 800e51e:	4614      	mov	r4, r2
 800e520:	461d      	mov	r5, r3
 800e522:	da07      	bge.n	800e534 <__swhatbuf_r+0x22>
 800e524:	2300      	movs	r3, #0
 800e526:	602b      	str	r3, [r5, #0]
 800e528:	89b3      	ldrh	r3, [r6, #12]
 800e52a:	061a      	lsls	r2, r3, #24
 800e52c:	d410      	bmi.n	800e550 <__swhatbuf_r+0x3e>
 800e52e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e532:	e00e      	b.n	800e552 <__swhatbuf_r+0x40>
 800e534:	466a      	mov	r2, sp
 800e536:	f000 f8fb 	bl	800e730 <_fstat_r>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	dbf2      	blt.n	800e524 <__swhatbuf_r+0x12>
 800e53e:	9a01      	ldr	r2, [sp, #4]
 800e540:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e544:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e548:	425a      	negs	r2, r3
 800e54a:	415a      	adcs	r2, r3
 800e54c:	602a      	str	r2, [r5, #0]
 800e54e:	e7ee      	b.n	800e52e <__swhatbuf_r+0x1c>
 800e550:	2340      	movs	r3, #64	; 0x40
 800e552:	2000      	movs	r0, #0
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	b016      	add	sp, #88	; 0x58
 800e558:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e55c <__smakebuf_r>:
 800e55c:	898b      	ldrh	r3, [r1, #12]
 800e55e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e560:	079d      	lsls	r5, r3, #30
 800e562:	4606      	mov	r6, r0
 800e564:	460c      	mov	r4, r1
 800e566:	d507      	bpl.n	800e578 <__smakebuf_r+0x1c>
 800e568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e56c:	6023      	str	r3, [r4, #0]
 800e56e:	6123      	str	r3, [r4, #16]
 800e570:	2301      	movs	r3, #1
 800e572:	6163      	str	r3, [r4, #20]
 800e574:	b002      	add	sp, #8
 800e576:	bd70      	pop	{r4, r5, r6, pc}
 800e578:	ab01      	add	r3, sp, #4
 800e57a:	466a      	mov	r2, sp
 800e57c:	f7ff ffc9 	bl	800e512 <__swhatbuf_r>
 800e580:	9900      	ldr	r1, [sp, #0]
 800e582:	4605      	mov	r5, r0
 800e584:	4630      	mov	r0, r6
 800e586:	f7fd fb05 	bl	800bb94 <_malloc_r>
 800e58a:	b948      	cbnz	r0, 800e5a0 <__smakebuf_r+0x44>
 800e58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e590:	059a      	lsls	r2, r3, #22
 800e592:	d4ef      	bmi.n	800e574 <__smakebuf_r+0x18>
 800e594:	f023 0303 	bic.w	r3, r3, #3
 800e598:	f043 0302 	orr.w	r3, r3, #2
 800e59c:	81a3      	strh	r3, [r4, #12]
 800e59e:	e7e3      	b.n	800e568 <__smakebuf_r+0xc>
 800e5a0:	4b0d      	ldr	r3, [pc, #52]	; (800e5d8 <__smakebuf_r+0x7c>)
 800e5a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	6020      	str	r0, [r4, #0]
 800e5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5ac:	81a3      	strh	r3, [r4, #12]
 800e5ae:	9b00      	ldr	r3, [sp, #0]
 800e5b0:	6163      	str	r3, [r4, #20]
 800e5b2:	9b01      	ldr	r3, [sp, #4]
 800e5b4:	6120      	str	r0, [r4, #16]
 800e5b6:	b15b      	cbz	r3, 800e5d0 <__smakebuf_r+0x74>
 800e5b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f000 f8c9 	bl	800e754 <_isatty_r>
 800e5c2:	b128      	cbz	r0, 800e5d0 <__smakebuf_r+0x74>
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	f023 0303 	bic.w	r3, r3, #3
 800e5ca:	f043 0301 	orr.w	r3, r3, #1
 800e5ce:	81a3      	strh	r3, [r4, #12]
 800e5d0:	89a0      	ldrh	r0, [r4, #12]
 800e5d2:	4305      	orrs	r5, r0
 800e5d4:	81a5      	strh	r5, [r4, #12]
 800e5d6:	e7cd      	b.n	800e574 <__smakebuf_r+0x18>
 800e5d8:	0800e371 	.word	0x0800e371

0800e5dc <_raise_r>:
 800e5dc:	291f      	cmp	r1, #31
 800e5de:	b538      	push	{r3, r4, r5, lr}
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	460d      	mov	r5, r1
 800e5e4:	d904      	bls.n	800e5f0 <_raise_r+0x14>
 800e5e6:	2316      	movs	r3, #22
 800e5e8:	6003      	str	r3, [r0, #0]
 800e5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
 800e5f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5f2:	b112      	cbz	r2, 800e5fa <_raise_r+0x1e>
 800e5f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5f8:	b94b      	cbnz	r3, 800e60e <_raise_r+0x32>
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f000 f830 	bl	800e660 <_getpid_r>
 800e600:	462a      	mov	r2, r5
 800e602:	4601      	mov	r1, r0
 800e604:	4620      	mov	r0, r4
 800e606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e60a:	f000 b817 	b.w	800e63c <_kill_r>
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d00a      	beq.n	800e628 <_raise_r+0x4c>
 800e612:	1c59      	adds	r1, r3, #1
 800e614:	d103      	bne.n	800e61e <_raise_r+0x42>
 800e616:	2316      	movs	r3, #22
 800e618:	6003      	str	r3, [r0, #0]
 800e61a:	2001      	movs	r0, #1
 800e61c:	e7e7      	b.n	800e5ee <_raise_r+0x12>
 800e61e:	2400      	movs	r4, #0
 800e620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e624:	4628      	mov	r0, r5
 800e626:	4798      	blx	r3
 800e628:	2000      	movs	r0, #0
 800e62a:	e7e0      	b.n	800e5ee <_raise_r+0x12>

0800e62c <raise>:
 800e62c:	4b02      	ldr	r3, [pc, #8]	; (800e638 <raise+0xc>)
 800e62e:	4601      	mov	r1, r0
 800e630:	6818      	ldr	r0, [r3, #0]
 800e632:	f7ff bfd3 	b.w	800e5dc <_raise_r>
 800e636:	bf00      	nop
 800e638:	20000c74 	.word	0x20000c74

0800e63c <_kill_r>:
 800e63c:	b538      	push	{r3, r4, r5, lr}
 800e63e:	4d07      	ldr	r5, [pc, #28]	; (800e65c <_kill_r+0x20>)
 800e640:	2300      	movs	r3, #0
 800e642:	4604      	mov	r4, r0
 800e644:	4608      	mov	r0, r1
 800e646:	4611      	mov	r1, r2
 800e648:	602b      	str	r3, [r5, #0]
 800e64a:	f000 fbb9 	bl	800edc0 <_kill>
 800e64e:	1c43      	adds	r3, r0, #1
 800e650:	d102      	bne.n	800e658 <_kill_r+0x1c>
 800e652:	682b      	ldr	r3, [r5, #0]
 800e654:	b103      	cbz	r3, 800e658 <_kill_r+0x1c>
 800e656:	6023      	str	r3, [r4, #0]
 800e658:	bd38      	pop	{r3, r4, r5, pc}
 800e65a:	bf00      	nop
 800e65c:	200093c8 	.word	0x200093c8

0800e660 <_getpid_r>:
 800e660:	f000 bb9e 	b.w	800eda0 <_getpid>

0800e664 <__sread>:
 800e664:	b510      	push	{r4, lr}
 800e666:	460c      	mov	r4, r1
 800e668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e66c:	f000 f894 	bl	800e798 <_read_r>
 800e670:	2800      	cmp	r0, #0
 800e672:	bfab      	itete	ge
 800e674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e676:	89a3      	ldrhlt	r3, [r4, #12]
 800e678:	181b      	addge	r3, r3, r0
 800e67a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e67e:	bfac      	ite	ge
 800e680:	6563      	strge	r3, [r4, #84]	; 0x54
 800e682:	81a3      	strhlt	r3, [r4, #12]
 800e684:	bd10      	pop	{r4, pc}

0800e686 <__swrite>:
 800e686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e68a:	461f      	mov	r7, r3
 800e68c:	898b      	ldrh	r3, [r1, #12]
 800e68e:	05db      	lsls	r3, r3, #23
 800e690:	4605      	mov	r5, r0
 800e692:	460c      	mov	r4, r1
 800e694:	4616      	mov	r6, r2
 800e696:	d505      	bpl.n	800e6a4 <__swrite+0x1e>
 800e698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e69c:	2302      	movs	r3, #2
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f000 f868 	bl	800e774 <_lseek_r>
 800e6a4:	89a3      	ldrh	r3, [r4, #12]
 800e6a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e6ae:	81a3      	strh	r3, [r4, #12]
 800e6b0:	4632      	mov	r2, r6
 800e6b2:	463b      	mov	r3, r7
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ba:	f000 b817 	b.w	800e6ec <_write_r>

0800e6be <__sseek>:
 800e6be:	b510      	push	{r4, lr}
 800e6c0:	460c      	mov	r4, r1
 800e6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c6:	f000 f855 	bl	800e774 <_lseek_r>
 800e6ca:	1c43      	adds	r3, r0, #1
 800e6cc:	89a3      	ldrh	r3, [r4, #12]
 800e6ce:	bf15      	itete	ne
 800e6d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6da:	81a3      	strheq	r3, [r4, #12]
 800e6dc:	bf18      	it	ne
 800e6de:	81a3      	strhne	r3, [r4, #12]
 800e6e0:	bd10      	pop	{r4, pc}

0800e6e2 <__sclose>:
 800e6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e6:	f000 b813 	b.w	800e710 <_close_r>
	...

0800e6ec <_write_r>:
 800e6ec:	b538      	push	{r3, r4, r5, lr}
 800e6ee:	4d07      	ldr	r5, [pc, #28]	; (800e70c <_write_r+0x20>)
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	4608      	mov	r0, r1
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	602a      	str	r2, [r5, #0]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	f000 fb78 	bl	800edf0 <_write>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d102      	bne.n	800e70a <_write_r+0x1e>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	b103      	cbz	r3, 800e70a <_write_r+0x1e>
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	bd38      	pop	{r3, r4, r5, pc}
 800e70c:	200093c8 	.word	0x200093c8

0800e710 <_close_r>:
 800e710:	b538      	push	{r3, r4, r5, lr}
 800e712:	4d06      	ldr	r5, [pc, #24]	; (800e72c <_close_r+0x1c>)
 800e714:	2300      	movs	r3, #0
 800e716:	4604      	mov	r4, r0
 800e718:	4608      	mov	r0, r1
 800e71a:	602b      	str	r3, [r5, #0]
 800e71c:	f000 fb30 	bl	800ed80 <_close>
 800e720:	1c43      	adds	r3, r0, #1
 800e722:	d102      	bne.n	800e72a <_close_r+0x1a>
 800e724:	682b      	ldr	r3, [r5, #0]
 800e726:	b103      	cbz	r3, 800e72a <_close_r+0x1a>
 800e728:	6023      	str	r3, [r4, #0]
 800e72a:	bd38      	pop	{r3, r4, r5, pc}
 800e72c:	200093c8 	.word	0x200093c8

0800e730 <_fstat_r>:
 800e730:	b538      	push	{r3, r4, r5, lr}
 800e732:	4d07      	ldr	r5, [pc, #28]	; (800e750 <_fstat_r+0x20>)
 800e734:	2300      	movs	r3, #0
 800e736:	4604      	mov	r4, r0
 800e738:	4608      	mov	r0, r1
 800e73a:	4611      	mov	r1, r2
 800e73c:	602b      	str	r3, [r5, #0]
 800e73e:	f000 fb27 	bl	800ed90 <_fstat>
 800e742:	1c43      	adds	r3, r0, #1
 800e744:	d102      	bne.n	800e74c <_fstat_r+0x1c>
 800e746:	682b      	ldr	r3, [r5, #0]
 800e748:	b103      	cbz	r3, 800e74c <_fstat_r+0x1c>
 800e74a:	6023      	str	r3, [r4, #0]
 800e74c:	bd38      	pop	{r3, r4, r5, pc}
 800e74e:	bf00      	nop
 800e750:	200093c8 	.word	0x200093c8

0800e754 <_isatty_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	4d06      	ldr	r5, [pc, #24]	; (800e770 <_isatty_r+0x1c>)
 800e758:	2300      	movs	r3, #0
 800e75a:	4604      	mov	r4, r0
 800e75c:	4608      	mov	r0, r1
 800e75e:	602b      	str	r3, [r5, #0]
 800e760:	f000 fb26 	bl	800edb0 <_isatty>
 800e764:	1c43      	adds	r3, r0, #1
 800e766:	d102      	bne.n	800e76e <_isatty_r+0x1a>
 800e768:	682b      	ldr	r3, [r5, #0]
 800e76a:	b103      	cbz	r3, 800e76e <_isatty_r+0x1a>
 800e76c:	6023      	str	r3, [r4, #0]
 800e76e:	bd38      	pop	{r3, r4, r5, pc}
 800e770:	200093c8 	.word	0x200093c8

0800e774 <_lseek_r>:
 800e774:	b538      	push	{r3, r4, r5, lr}
 800e776:	4d07      	ldr	r5, [pc, #28]	; (800e794 <_lseek_r+0x20>)
 800e778:	4604      	mov	r4, r0
 800e77a:	4608      	mov	r0, r1
 800e77c:	4611      	mov	r1, r2
 800e77e:	2200      	movs	r2, #0
 800e780:	602a      	str	r2, [r5, #0]
 800e782:	461a      	mov	r2, r3
 800e784:	f000 fb24 	bl	800edd0 <_lseek>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	d102      	bne.n	800e792 <_lseek_r+0x1e>
 800e78c:	682b      	ldr	r3, [r5, #0]
 800e78e:	b103      	cbz	r3, 800e792 <_lseek_r+0x1e>
 800e790:	6023      	str	r3, [r4, #0]
 800e792:	bd38      	pop	{r3, r4, r5, pc}
 800e794:	200093c8 	.word	0x200093c8

0800e798 <_read_r>:
 800e798:	b538      	push	{r3, r4, r5, lr}
 800e79a:	4d07      	ldr	r5, [pc, #28]	; (800e7b8 <_read_r+0x20>)
 800e79c:	4604      	mov	r4, r0
 800e79e:	4608      	mov	r0, r1
 800e7a0:	4611      	mov	r1, r2
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	602a      	str	r2, [r5, #0]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	f000 fb1a 	bl	800ede0 <_read>
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	d102      	bne.n	800e7b6 <_read_r+0x1e>
 800e7b0:	682b      	ldr	r3, [r5, #0]
 800e7b2:	b103      	cbz	r3, 800e7b6 <_read_r+0x1e>
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	bd38      	pop	{r3, r4, r5, pc}
 800e7b8:	200093c8 	.word	0x200093c8

0800e7bc <fabsf>:
 800e7bc:	ee10 3a10 	vmov	r3, s0
 800e7c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7c4:	ee00 3a10 	vmov	s0, r3
 800e7c8:	4770      	bx	lr
	...

0800e7cc <tanhf>:
 800e7cc:	b510      	push	{r4, lr}
 800e7ce:	ee10 4a10 	vmov	r4, s0
 800e7d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e7d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e7da:	ed2d 8b02 	vpush	{d8}
 800e7de:	eeb0 7a40 	vmov.f32	s14, s0
 800e7e2:	db0c      	blt.n	800e7fe <tanhf+0x32>
 800e7e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e7e8:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800e7ec:	2c00      	cmp	r4, #0
 800e7ee:	bfac      	ite	ge
 800e7f0:	ee37 0a80 	vaddge.f32	s0, s15, s0
 800e7f4:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 800e7f8:	ecbd 8b02 	vpop	{d8}
 800e7fc:	bd10      	pop	{r4, pc}
 800e7fe:	4a1b      	ldr	r2, [pc, #108]	; (800e86c <tanhf+0xa0>)
 800e800:	4293      	cmp	r3, r2
 800e802:	dc30      	bgt.n	800e866 <tanhf+0x9a>
 800e804:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800e808:	da06      	bge.n	800e818 <tanhf+0x4c>
 800e80a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e80e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e812:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e816:	e7ef      	b.n	800e7f8 <tanhf+0x2c>
 800e818:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e81c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800e820:	db12      	blt.n	800e848 <tanhf+0x7c>
 800e822:	f7ff ffcb 	bl	800e7bc <fabsf>
 800e826:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e82a:	f000 f97b 	bl	800eb24 <expm1f>
 800e82e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800e832:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800e836:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e83a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e83e:	2c00      	cmp	r4, #0
 800e840:	bfb8      	it	lt
 800e842:	eeb1 0a40 	vneglt.f32	s0, s0
 800e846:	e7d7      	b.n	800e7f8 <tanhf+0x2c>
 800e848:	f7ff ffb8 	bl	800e7bc <fabsf>
 800e84c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800e850:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e854:	f000 f966 	bl	800eb24 <expm1f>
 800e858:	ee70 7a08 	vadd.f32	s15, s0, s16
 800e85c:	eeb1 7a40 	vneg.f32	s14, s0
 800e860:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e864:	e7eb      	b.n	800e83e <tanhf+0x72>
 800e866:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e86a:	e7e8      	b.n	800e83e <tanhf+0x72>
 800e86c:	41afffff 	.word	0x41afffff

0800e870 <expf>:
 800e870:	b508      	push	{r3, lr}
 800e872:	ed2d 8b02 	vpush	{d8}
 800e876:	eef0 8a40 	vmov.f32	s17, s0
 800e87a:	f000 f85d 	bl	800e938 <__ieee754_expf>
 800e87e:	4b16      	ldr	r3, [pc, #88]	; (800e8d8 <expf+0x68>)
 800e880:	f993 3000 	ldrsb.w	r3, [r3]
 800e884:	3301      	adds	r3, #1
 800e886:	eeb0 8a40 	vmov.f32	s16, s0
 800e88a:	d011      	beq.n	800e8b0 <expf+0x40>
 800e88c:	eeb0 0a68 	vmov.f32	s0, s17
 800e890:	f000 fa68 	bl	800ed64 <finitef>
 800e894:	b160      	cbz	r0, 800e8b0 <expf+0x40>
 800e896:	eddf 7a11 	vldr	s15, [pc, #68]	; 800e8dc <expf+0x6c>
 800e89a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a2:	dd0a      	ble.n	800e8ba <expf+0x4a>
 800e8a4:	f7fd f8bc 	bl	800ba20 <__errno>
 800e8a8:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800e8e0 <expf+0x70>
 800e8ac:	2322      	movs	r3, #34	; 0x22
 800e8ae:	6003      	str	r3, [r0, #0]
 800e8b0:	eeb0 0a48 	vmov.f32	s0, s16
 800e8b4:	ecbd 8b02 	vpop	{d8}
 800e8b8:	bd08      	pop	{r3, pc}
 800e8ba:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e8e4 <expf+0x74>
 800e8be:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c6:	d5f3      	bpl.n	800e8b0 <expf+0x40>
 800e8c8:	f7fd f8aa 	bl	800ba20 <__errno>
 800e8cc:	2322      	movs	r3, #34	; 0x22
 800e8ce:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800e8e8 <expf+0x78>
 800e8d2:	6003      	str	r3, [r0, #0]
 800e8d4:	e7ec      	b.n	800e8b0 <expf+0x40>
 800e8d6:	bf00      	nop
 800e8d8:	20000e44 	.word	0x20000e44
 800e8dc:	42b17180 	.word	0x42b17180
 800e8e0:	7f800000 	.word	0x7f800000
 800e8e4:	c2cff1b5 	.word	0xc2cff1b5
 800e8e8:	00000000 	.word	0x00000000

0800e8ec <sqrtf>:
 800e8ec:	b508      	push	{r3, lr}
 800e8ee:	ed2d 8b02 	vpush	{d8}
 800e8f2:	eeb0 8a40 	vmov.f32	s16, s0
 800e8f6:	f000 f8f3 	bl	800eae0 <__ieee754_sqrtf>
 800e8fa:	4b0d      	ldr	r3, [pc, #52]	; (800e930 <sqrtf+0x44>)
 800e8fc:	f993 3000 	ldrsb.w	r3, [r3]
 800e900:	3301      	adds	r3, #1
 800e902:	d011      	beq.n	800e928 <sqrtf+0x3c>
 800e904:	eeb4 8a48 	vcmp.f32	s16, s16
 800e908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90c:	d60c      	bvs.n	800e928 <sqrtf+0x3c>
 800e90e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800e934 <sqrtf+0x48>
 800e912:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91a:	d505      	bpl.n	800e928 <sqrtf+0x3c>
 800e91c:	f7fd f880 	bl	800ba20 <__errno>
 800e920:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e924:	2321      	movs	r3, #33	; 0x21
 800e926:	6003      	str	r3, [r0, #0]
 800e928:	ecbd 8b02 	vpop	{d8}
 800e92c:	bd08      	pop	{r3, pc}
 800e92e:	bf00      	nop
 800e930:	20000e44 	.word	0x20000e44
 800e934:	00000000 	.word	0x00000000

0800e938 <__ieee754_expf>:
 800e938:	ee10 2a10 	vmov	r2, s0
 800e93c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e940:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e944:	d902      	bls.n	800e94c <__ieee754_expf+0x14>
 800e946:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e94a:	4770      	bx	lr
 800e94c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800e950:	d106      	bne.n	800e960 <__ieee754_expf+0x28>
 800e952:	eddf 7a51 	vldr	s15, [pc, #324]	; 800ea98 <__ieee754_expf+0x160>
 800e956:	2b00      	cmp	r3, #0
 800e958:	bf18      	it	ne
 800e95a:	eeb0 0a67 	vmovne.f32	s0, s15
 800e95e:	4770      	bx	lr
 800e960:	484e      	ldr	r0, [pc, #312]	; (800ea9c <__ieee754_expf+0x164>)
 800e962:	4282      	cmp	r2, r0
 800e964:	dd04      	ble.n	800e970 <__ieee754_expf+0x38>
 800e966:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800eaa0 <__ieee754_expf+0x168>
 800e96a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e96e:	4770      	bx	lr
 800e970:	2a00      	cmp	r2, #0
 800e972:	da03      	bge.n	800e97c <__ieee754_expf+0x44>
 800e974:	4a4b      	ldr	r2, [pc, #300]	; (800eaa4 <__ieee754_expf+0x16c>)
 800e976:	4291      	cmp	r1, r2
 800e978:	f200 808a 	bhi.w	800ea90 <__ieee754_expf+0x158>
 800e97c:	4a4a      	ldr	r2, [pc, #296]	; (800eaa8 <__ieee754_expf+0x170>)
 800e97e:	4291      	cmp	r1, r2
 800e980:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e984:	d954      	bls.n	800ea30 <__ieee754_expf+0xf8>
 800e986:	4a49      	ldr	r2, [pc, #292]	; (800eaac <__ieee754_expf+0x174>)
 800e988:	4291      	cmp	r1, r2
 800e98a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e98e:	d836      	bhi.n	800e9fe <__ieee754_expf+0xc6>
 800e990:	4947      	ldr	r1, [pc, #284]	; (800eab0 <__ieee754_expf+0x178>)
 800e992:	4411      	add	r1, r2
 800e994:	ed91 7a00 	vldr	s14, [r1]
 800e998:	4946      	ldr	r1, [pc, #280]	; (800eab4 <__ieee754_expf+0x17c>)
 800e99a:	440a      	add	r2, r1
 800e99c:	edd2 7a00 	vldr	s15, [r2]
 800e9a0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800e9a4:	f1c3 0201 	rsb	r2, r3, #1
 800e9a8:	1ad2      	subs	r2, r2, r3
 800e9aa:	ee37 0a67 	vsub.f32	s0, s14, s15
 800e9ae:	ee60 6a00 	vmul.f32	s13, s0, s0
 800e9b2:	eddf 5a41 	vldr	s11, [pc, #260]	; 800eab8 <__ieee754_expf+0x180>
 800e9b6:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800eabc <__ieee754_expf+0x184>
 800e9ba:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800e9be:	eddf 5a40 	vldr	s11, [pc, #256]	; 800eac0 <__ieee754_expf+0x188>
 800e9c2:	eee5 5a26 	vfma.f32	s11, s10, s13
 800e9c6:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800eac4 <__ieee754_expf+0x18c>
 800e9ca:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800e9ce:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800eac8 <__ieee754_expf+0x190>
 800e9d2:	eee5 5a26 	vfma.f32	s11, s10, s13
 800e9d6:	eeb0 5a40 	vmov.f32	s10, s0
 800e9da:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800e9de:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e9e2:	eef0 6a45 	vmov.f32	s13, s10
 800e9e6:	ee20 5a05 	vmul.f32	s10, s0, s10
 800e9ea:	bb92      	cbnz	r2, 800ea52 <__ieee754_expf+0x11a>
 800e9ec:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800e9f0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800e9f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e9f8:	ee36 0a40 	vsub.f32	s0, s12, s0
 800e9fc:	4770      	bx	lr
 800e9fe:	4b33      	ldr	r3, [pc, #204]	; (800eacc <__ieee754_expf+0x194>)
 800ea00:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ead0 <__ieee754_expf+0x198>
 800ea04:	4413      	add	r3, r2
 800ea06:	edd3 7a00 	vldr	s15, [r3]
 800ea0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ea0e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ead4 <__ieee754_expf+0x19c>
 800ea12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea16:	ee17 2a90 	vmov	r2, s15
 800ea1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea1e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ea22:	eeb0 7a40 	vmov.f32	s14, s0
 800ea26:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800ead8 <__ieee754_expf+0x1a0>
 800ea2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ea2e:	e7bc      	b.n	800e9aa <__ieee754_expf+0x72>
 800ea30:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800ea34:	d20b      	bcs.n	800ea4e <__ieee754_expf+0x116>
 800ea36:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800eaa0 <__ieee754_expf+0x168>
 800ea3a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ea3e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ea42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea46:	dd02      	ble.n	800ea4e <__ieee754_expf+0x116>
 800ea48:	ee30 0a06 	vadd.f32	s0, s0, s12
 800ea4c:	4770      	bx	lr
 800ea4e:	2200      	movs	r2, #0
 800ea50:	e7ad      	b.n	800e9ae <__ieee754_expf+0x76>
 800ea52:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800ea56:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800ea5a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800ea5e:	bfb8      	it	lt
 800ea60:	3264      	addlt	r2, #100	; 0x64
 800ea62:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ea66:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ea6a:	ee76 7a40 	vsub.f32	s15, s12, s0
 800ea6e:	ee17 3a90 	vmov	r3, s15
 800ea72:	bfab      	itete	ge
 800ea74:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800ea78:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800ea7c:	ee00 3a10 	vmovge	s0, r3
 800ea80:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800eadc <__ieee754_expf+0x1a4>
 800ea84:	bfbc      	itt	lt
 800ea86:	ee00 3a10 	vmovlt	s0, r3
 800ea8a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800ea8e:	4770      	bx	lr
 800ea90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea98 <__ieee754_expf+0x160>
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	00000000 	.word	0x00000000
 800ea9c:	42b17217 	.word	0x42b17217
 800eaa0:	7149f2ca 	.word	0x7149f2ca
 800eaa4:	42cff1b5 	.word	0x42cff1b5
 800eaa8:	3eb17218 	.word	0x3eb17218
 800eaac:	3f851591 	.word	0x3f851591
 800eab0:	08019d04 	.word	0x08019d04
 800eab4:	08019d0c 	.word	0x08019d0c
 800eab8:	3331bb4c 	.word	0x3331bb4c
 800eabc:	b5ddea0e 	.word	0xb5ddea0e
 800eac0:	388ab355 	.word	0x388ab355
 800eac4:	bb360b61 	.word	0xbb360b61
 800eac8:	3e2aaaab 	.word	0x3e2aaaab
 800eacc:	08019cfc 	.word	0x08019cfc
 800ead0:	3fb8aa3b 	.word	0x3fb8aa3b
 800ead4:	3f317180 	.word	0x3f317180
 800ead8:	3717f7d1 	.word	0x3717f7d1
 800eadc:	0d800000 	.word	0x0d800000

0800eae0 <__ieee754_sqrtf>:
 800eae0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800eae4:	4770      	bx	lr

0800eae6 <with_errnof>:
 800eae6:	b513      	push	{r0, r1, r4, lr}
 800eae8:	4604      	mov	r4, r0
 800eaea:	ed8d 0a01 	vstr	s0, [sp, #4]
 800eaee:	f7fc ff97 	bl	800ba20 <__errno>
 800eaf2:	ed9d 0a01 	vldr	s0, [sp, #4]
 800eaf6:	6004      	str	r4, [r0, #0]
 800eaf8:	b002      	add	sp, #8
 800eafa:	bd10      	pop	{r4, pc}

0800eafc <xflowf.constprop.0>:
 800eafc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800eb18 <xflowf.constprop.0+0x1c>
 800eb00:	eddf 7a06 	vldr	s15, [pc, #24]	; 800eb1c <xflowf.constprop.0+0x20>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	bf08      	it	eq
 800eb08:	eef0 7a40 	vmoveq.f32	s15, s0
 800eb0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eb10:	2022      	movs	r0, #34	; 0x22
 800eb12:	f7ff bfe8 	b.w	800eae6 <with_errnof>
 800eb16:	bf00      	nop
 800eb18:	70000000 	.word	0x70000000
 800eb1c:	f0000000 	.word	0xf0000000

0800eb20 <__math_oflowf>:
 800eb20:	f7ff bfec 	b.w	800eafc <xflowf.constprop.0>

0800eb24 <expm1f>:
 800eb24:	ee10 2a10 	vmov	r2, s0
 800eb28:	497f      	ldr	r1, [pc, #508]	; (800ed28 <expm1f+0x204>)
 800eb2a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800eb2e:	428b      	cmp	r3, r1
 800eb30:	d921      	bls.n	800eb76 <expm1f+0x52>
 800eb32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eb36:	d902      	bls.n	800eb3e <expm1f+0x1a>
 800eb38:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eb3c:	4770      	bx	lr
 800eb3e:	d106      	bne.n	800eb4e <expm1f+0x2a>
 800eb40:	2a00      	cmp	r2, #0
 800eb42:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800eb46:	bfb8      	it	lt
 800eb48:	eeb0 0a67 	vmovlt.f32	s0, s15
 800eb4c:	4770      	bx	lr
 800eb4e:	2a00      	cmp	r2, #0
 800eb50:	db05      	blt.n	800eb5e <expm1f+0x3a>
 800eb52:	4976      	ldr	r1, [pc, #472]	; (800ed2c <expm1f+0x208>)
 800eb54:	428b      	cmp	r3, r1
 800eb56:	d960      	bls.n	800ec1a <expm1f+0xf6>
 800eb58:	2000      	movs	r0, #0
 800eb5a:	f7ff bfe1 	b.w	800eb20 <__math_oflowf>
 800eb5e:	eddf 7a74 	vldr	s15, [pc, #464]	; 800ed30 <expm1f+0x20c>
 800eb62:	ee70 7a27 	vadd.f32	s15, s0, s15
 800eb66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb6e:	d554      	bpl.n	800ec1a <expm1f+0xf6>
 800eb70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800eb74:	4770      	bx	lr
 800eb76:	496f      	ldr	r1, [pc, #444]	; (800ed34 <expm1f+0x210>)
 800eb78:	428b      	cmp	r3, r1
 800eb7a:	d96b      	bls.n	800ec54 <expm1f+0x130>
 800eb7c:	496e      	ldr	r1, [pc, #440]	; (800ed38 <expm1f+0x214>)
 800eb7e:	428b      	cmp	r3, r1
 800eb80:	d84b      	bhi.n	800ec1a <expm1f+0xf6>
 800eb82:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800ed3c <expm1f+0x218>
 800eb86:	2a00      	cmp	r2, #0
 800eb88:	bfa7      	ittee	ge
 800eb8a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800eb8e:	eddf 7a6c 	vldrge	s15, [pc, #432]	; 800ed40 <expm1f+0x21c>
 800eb92:	eddf 7a6c 	vldrlt	s15, [pc, #432]	; 800ed44 <expm1f+0x220>
 800eb96:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800eb9a:	bfac      	ite	ge
 800eb9c:	2301      	movge	r3, #1
 800eb9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800eba2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800eba6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ebaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebae:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800ebb2:	ee20 5a25 	vmul.f32	s10, s0, s11
 800ebb6:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ed48 <expm1f+0x224>
 800ebba:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800ed4c <expm1f+0x228>
 800ebbe:	ee20 7a05 	vmul.f32	s14, s0, s10
 800ebc2:	eea7 6a26 	vfma.f32	s12, s14, s13
 800ebc6:	eddf 6a62 	vldr	s13, [pc, #392]	; 800ed50 <expm1f+0x22c>
 800ebca:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ebce:	ed9f 6a61 	vldr	s12, [pc, #388]	; 800ed54 <expm1f+0x230>
 800ebd2:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ebd6:	eddf 6a60 	vldr	s13, [pc, #384]	; 800ed58 <expm1f+0x234>
 800ebda:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ebde:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ebe2:	eef0 4a46 	vmov.f32	s9, s12
 800ebe6:	eee6 4a87 	vfma.f32	s9, s13, s14
 800ebea:	eef0 6a64 	vmov.f32	s13, s9
 800ebee:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800ebf2:	eee5 4a66 	vfms.f32	s9, s10, s13
 800ebf6:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800ebfa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800ebfe:	eee0 6a64 	vfms.f32	s13, s0, s9
 800ec02:	eef0 4a66 	vmov.f32	s9, s13
 800ec06:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800ec0a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ec0e:	bb7b      	cbnz	r3, 800ec70 <expm1f+0x14c>
 800ec10:	eef0 7a47 	vmov.f32	s15, s14
 800ec14:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800ec18:	e025      	b.n	800ec66 <expm1f+0x142>
 800ec1a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800ec1e:	2a00      	cmp	r2, #0
 800ec20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ec24:	bfb8      	it	lt
 800ec26:	eef0 7a47 	vmovlt.f32	s15, s14
 800ec2a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800ed5c <expm1f+0x238>
 800ec2e:	eddf 6a44 	vldr	s13, [pc, #272]	; 800ed40 <expm1f+0x21c>
 800ec32:	ee40 7a07 	vmla.f32	s15, s0, s14
 800ec36:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ed3c <expm1f+0x218>
 800ec3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec3e:	ee17 3a90 	vmov	r3, s15
 800ec42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec46:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ec4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ec4e:	eeb0 7a40 	vmov.f32	s14, s0
 800ec52:	e7a6      	b.n	800eba2 <expm1f+0x7e>
 800ec54:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800ec58:	d208      	bcs.n	800ec6c <expm1f+0x148>
 800ec5a:	eddf 7a41 	vldr	s15, [pc, #260]	; 800ed60 <expm1f+0x23c>
 800ec5e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ec62:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800ec66:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec6a:	4770      	bx	lr
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	e79e      	b.n	800ebae <expm1f+0x8a>
 800ec70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ec74:	1c5a      	adds	r2, r3, #1
 800ec76:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800ec7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec7e:	d106      	bne.n	800ec8e <expm1f+0x16a>
 800ec80:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ec84:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800ec88:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800ec8c:	4770      	bx	lr
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d118      	bne.n	800ecc4 <expm1f+0x1a0>
 800ec92:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800ec96:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ec9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec9e:	bf41      	itttt	mi
 800eca0:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800eca4:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800eca8:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800ecac:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800ecb0:	bf5f      	itttt	pl
 800ecb2:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800ecb6:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800ecba:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800ecbe:	eeb0 0a46 	vmovpl.f32	s0, s12
 800ecc2:	4770      	bx	lr
 800ecc4:	1c5a      	adds	r2, r3, #1
 800ecc6:	2a39      	cmp	r2, #57	; 0x39
 800ecc8:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800eccc:	d90b      	bls.n	800ece6 <expm1f+0x1c2>
 800ecce:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ecd2:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ecd6:	ee10 3a10 	vmov	r3, s0
 800ecda:	440b      	add	r3, r1
 800ecdc:	ee00 3a10 	vmov	s0, r3
 800ece0:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ece4:	4770      	bx	lr
 800ece6:	2b16      	cmp	r3, #22
 800ece8:	dc11      	bgt.n	800ed0e <expm1f+0x1ea>
 800ecea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ecee:	fa42 f303 	asr.w	r3, r2, r3
 800ecf2:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800ecf6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ecfa:	ee07 3a90 	vmov	s15, r3
 800ecfe:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ed02:	ee10 3a10 	vmov	r3, s0
 800ed06:	440b      	add	r3, r1
 800ed08:	ee00 3a10 	vmov	s0, r3
 800ed0c:	4770      	bx	lr
 800ed0e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ed12:	05db      	lsls	r3, r3, #23
 800ed14:	ee07 3a10 	vmov	s14, r3
 800ed18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed20:	ee30 0a06 	vadd.f32	s0, s0, s12
 800ed24:	e7ed      	b.n	800ed02 <expm1f+0x1de>
 800ed26:	bf00      	nop
 800ed28:	4195b843 	.word	0x4195b843
 800ed2c:	42b17217 	.word	0x42b17217
 800ed30:	0da24260 	.word	0x0da24260
 800ed34:	3eb17218 	.word	0x3eb17218
 800ed38:	3f851591 	.word	0x3f851591
 800ed3c:	3f317180 	.word	0x3f317180
 800ed40:	3717f7d1 	.word	0x3717f7d1
 800ed44:	b717f7d1 	.word	0xb717f7d1
 800ed48:	b457edbb 	.word	0xb457edbb
 800ed4c:	36867e54 	.word	0x36867e54
 800ed50:	b8a670cd 	.word	0xb8a670cd
 800ed54:	3ad00d01 	.word	0x3ad00d01
 800ed58:	bd088889 	.word	0xbd088889
 800ed5c:	3fb8aa3b 	.word	0x3fb8aa3b
 800ed60:	7149f2ca 	.word	0x7149f2ca

0800ed64 <finitef>:
 800ed64:	b082      	sub	sp, #8
 800ed66:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ed6a:	9801      	ldr	r0, [sp, #4]
 800ed6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ed70:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ed74:	bfac      	ite	ge
 800ed76:	2000      	movge	r0, #0
 800ed78:	2001      	movlt	r0, #1
 800ed7a:	b002      	add	sp, #8
 800ed7c:	4770      	bx	lr
	...

0800ed80 <_close>:
 800ed80:	4b02      	ldr	r3, [pc, #8]	; (800ed8c <_close+0xc>)
 800ed82:	2258      	movs	r2, #88	; 0x58
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	f04f 30ff 	mov.w	r0, #4294967295
 800ed8a:	4770      	bx	lr
 800ed8c:	200093c8 	.word	0x200093c8

0800ed90 <_fstat>:
 800ed90:	4b02      	ldr	r3, [pc, #8]	; (800ed9c <_fstat+0xc>)
 800ed92:	2258      	movs	r2, #88	; 0x58
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9a:	4770      	bx	lr
 800ed9c:	200093c8 	.word	0x200093c8

0800eda0 <_getpid>:
 800eda0:	4b02      	ldr	r3, [pc, #8]	; (800edac <_getpid+0xc>)
 800eda2:	2258      	movs	r2, #88	; 0x58
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	f04f 30ff 	mov.w	r0, #4294967295
 800edaa:	4770      	bx	lr
 800edac:	200093c8 	.word	0x200093c8

0800edb0 <_isatty>:
 800edb0:	4b02      	ldr	r3, [pc, #8]	; (800edbc <_isatty+0xc>)
 800edb2:	2258      	movs	r2, #88	; 0x58
 800edb4:	601a      	str	r2, [r3, #0]
 800edb6:	2000      	movs	r0, #0
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	200093c8 	.word	0x200093c8

0800edc0 <_kill>:
 800edc0:	4b02      	ldr	r3, [pc, #8]	; (800edcc <_kill+0xc>)
 800edc2:	2258      	movs	r2, #88	; 0x58
 800edc4:	601a      	str	r2, [r3, #0]
 800edc6:	f04f 30ff 	mov.w	r0, #4294967295
 800edca:	4770      	bx	lr
 800edcc:	200093c8 	.word	0x200093c8

0800edd0 <_lseek>:
 800edd0:	4b02      	ldr	r3, [pc, #8]	; (800eddc <_lseek+0xc>)
 800edd2:	2258      	movs	r2, #88	; 0x58
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	f04f 30ff 	mov.w	r0, #4294967295
 800edda:	4770      	bx	lr
 800eddc:	200093c8 	.word	0x200093c8

0800ede0 <_read>:
 800ede0:	4b02      	ldr	r3, [pc, #8]	; (800edec <_read+0xc>)
 800ede2:	2258      	movs	r2, #88	; 0x58
 800ede4:	601a      	str	r2, [r3, #0]
 800ede6:	f04f 30ff 	mov.w	r0, #4294967295
 800edea:	4770      	bx	lr
 800edec:	200093c8 	.word	0x200093c8

0800edf0 <_write>:
 800edf0:	4b02      	ldr	r3, [pc, #8]	; (800edfc <_write+0xc>)
 800edf2:	2258      	movs	r2, #88	; 0x58
 800edf4:	601a      	str	r2, [r3, #0]
 800edf6:	f04f 30ff 	mov.w	r0, #4294967295
 800edfa:	4770      	bx	lr
 800edfc:	200093c8 	.word	0x200093c8

0800ee00 <_exit>:
 800ee00:	e7fe      	b.n	800ee00 <_exit>
	...

0800ee04 <_init>:
 800ee04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee06:	bf00      	nop
 800ee08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee0a:	bc08      	pop	{r3}
 800ee0c:	469e      	mov	lr, r3
 800ee0e:	4770      	bx	lr

0800ee10 <_fini>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	bf00      	nop
 800ee14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee16:	bc08      	pop	{r3}
 800ee18:	469e      	mov	lr, r3
 800ee1a:	4770      	bx	lr
